102
Enter Building at Location
103
Enter the building closest to the specified Building Location.
104
Building Location
396
Wander
397
Move casually between randomly selected destinations in the specified Wandering Area, remaining in each destination for the specified Wait Duration.
398
Wandering Area
399
Wait Duration
400
Unit ID
401
Returns the technical ID of the specified Unit parameter.
402
Unit
403
Unit Type
404
Returns the type of the specified Unit parameter, as mapped to the generalized UT_UnitType hierarchy.
405
Unit Aggregate Type
406
Returns the Aggregate Type of the specified AggregateUnit.
407
Aggregate Unit
408
Unit Aggregate Native Type
409
Returns the native type of the specified Unit parameter, i.e. the exact type used to classify it, without any mapping. If the specified Unit is not an aggregate - a Null NativeType is returned.
410
Unit Native Type
411
Returns the native type of the specified Unit parameter, i.e. the exact type used to classify it, without any mapping.
412
Unit Vehicle Native Type
413
Returns the native type of the Vehicle (sub-type of VEHICLE) used by the specified SimpleUnit.
414
SimpleUnit
415
Unit Name
416
Returns the name of the specified Unit parameter.
For units bellow Battalion level, the name is qualified, i.e. it contains the path up to and including the Battalion name. For Battalions and above - the name is not qualified.
417
Unit Name Extension
418
Returns the name extension of the specified Unit parameter.
419
Unit Army Type
420
Returns the Army Type to which the specified Unit belongs.
421
Unit Army Native Type
422
Returns the Army Native Type to which the specified Unit belongs.
423
Unit Echelon
424
Returns the Echelon of the specified Unit parameter.
425
Unit Alliance Color
426
Returns the Alliance Color of the specified Unit.
427
Unit Exists
428
Returns "true" if the specified Unit exists. A unit ceases to exist when removed/deleted from the simulation.
429
Unit Role Native Type
430
Returns the native type of the Role (sub-type of ROLE) associated with the current profile of the specified SimpleUnit.
431
Unit Mounted Passengers
432
Returns all Simple Units that are currently mounted on the specified CarrierSimpleUnit.
If no Simple Unit is currently mounted on the specified CarrierSimpleUnit - an empty collection is returned.
433
Carrier Simple Unit
434
Unit Carrier
435
Returns the Simple Unit on which the specified PassengerSimpleUnit is currently mounted.
If the specified PassengerSimpleUnit is not currently mounted on any carrier - Null Unit is returned.
436
Passenger Simple Unit
437
Unit DIrect Fire Policy
438
Returns the current policy of the specified SimpleUnit for direct fire at detected enemy Simple Units.
439
Unit Main Activity
440
Returns the main activity of the specified Unit.
441
Unit is Moving
442
Returns "true" if the specified Unit (parameter) is currently executing a "location changing" Command (i.e. a Command whose EndLocation is different than its StartLocation). Note that if an executed "location changing" Command is suspended, the executing Unit is still considered to be moving.
443
Unit Current Direction
444
Returns the Direction the specified Unit is currently facing.
445
Unit Heading
446
Returns the current heading (dynamic property) of the specified SimpleUnit. Heading value is set according to the following rules:
- While moving, the heading of a Simple Unit is constantly updated to reflect the Azimuth of the current leg on its movement route. This applies to all types of Simple Units - land, air and sea, in all forms of movement - driving/walking, flying, sailing. After movement, heading naturally retains its last set value (Azimuth of the last movement leg).
- A change of direction in a stationary Simple Unit (e.g by AtomicAssumePosition or SetOwnDirection Commands) sets heading to the median Azimuth of the new direction only if it currently lies outside the Azimuth boundaries of the new set direction (otherwise heading remains as is). For example: the effect of setting direction to DR_SouthEast depends on current heading value: if current heading is 97 (outside bounds of South-East) - then it is set to 135, however if current heading is 129 (inside bounds) - it remains as is.
447
Simple Unit
448
Unit Native Item Type in Inventory
449
Returns the Native Type of the first concrete Inventory Item belonging to the specified ItemType, that exists (i.e has a quantity greater than zero) in the inventory of at least one of the Simple Units belonging to the specified Unit.
If no such Inventory Item exists - a Null Native Type is returned.
450
Item Type
451
Unit Actual Radar Operation Mode
452
Returns the actual Radar Operation Mode of the specified Simple Unit (hereinafter U), which is determined as follows:
If U is operational (UnitIsOperational(U) returns 'true') - it is the current Radar Operation Mode of U (see SetRadarOperationMode Atomic Command), otherwise it is ROM_Off.
453
Unit Location is Real
454
Returns "true" if the location of the specified Unit reflects the location of an actual unit that exists in the real world.
Note that this property is dynamic since the association of a location transmitter with a corresponding unit may change during the course of an exercise.
455
Unit is Underground
456
Returns "true" if the specified SimpleUnit is located underground.
Note:underground entry/exit is performed by the AtomicEnterUnderground / AtomicExitUnderground Atomic Commands.
457
Unit Available Indirect Fire Ammo
458
Returns all Indirect Fire Ammunition (AT_Indirect sub-types) inventory that is available for fire by the specified SimpleUnit. This includes both own inventory and inventory of nearby friendly ammunition sources (offloaded ammunition stockpiles, ammunition supply trucks/APCs etc.).
Notes:
- The returned collection contains a single Allocation for each available NativeType of Indirect Fire Ammunition, representing the entire (cummulative) available Quantity.
- The returned collection is limited to Indirect Fire Ammunition NativeTypes that the specified SimpleUnit is capable of firing.
- The Duration property of each Allocation in the returned collection is set to zero.
459
Unit Longest Range Ammo Native Type
460
Returns the Native Type of the ammunition Inventory Item whose range (see below) is maximal, among all ammunition Inventory Items belonging to the specified AmmoType that exist (quantity > 0) in the inventory of the specified SimpleUnit.
The range (in meters) of an ammunition type is given by its AMM_EFF_RANGE external property - if the specified UseEffectiveRange is true, otherwise - by its AMM_MAX_RANGE external property.
If no Inventory Item belonging to the specified AmmoType exists in inventory - a Null Native Type is returned.
461
Ammo Type
462
Use Effective Range
463
Unit is Defunct
464
Returns 'true' if the specified Unit is defunct/dead, i.e incapable of doing anything.
465
Unit is Operational
466
Returns 'true' if the specified SimpleUnit (hereinafter U) is considered operational, i.e if one of the following conditions is met:
- U is considered to be always operational (the ALWAYS_OPERATIONAL typical external property of U is 'true') AND U is not currently in storage (UnitMainActivity(U) is not MA_InStorage).
- U is deployed (UnitsFilteredByDeploymentState([U], true) returns [U]).
467
Unit Can Supply
468
Returns 'true' is the specified SimpleUnit can supply at least one Inventory Item Type that belongs to the specified ItemType.
469
Unit Has EMG Device
470
Returns 'true' if the specified Unit has an EMG (Electromagnetic) Device that operates in the specified Medium.
471
Medium
472
Unit Current Location
473
Returns the current location of the Unit parameter.
474
Unit Vehicles Count
475
Returns the number of vehicles in all Simple Units of the specified UnitType that belong to at least one of the Units in the specified UnitCollection, whose serviceability matches the specified VehicleServiceability.
476
Unit Collection
477
Vehicle Serviceability
478
Unit Infantry Soldiers Count
479
Returns the overall number of infantry (foot) soldiers in all Simple Units of the specified UnitType that belong to at least one of the Units in the specified UnitCollection, whose competence matches the specified SoldierCompetence.
Note: both mounted and dismounted infantry soldiers are counted.
480
Soldier Competence
481
Unit Mounted Soldiers Occupancy
482
Return the overall number of soldiers currently mounted on vehicles of all Simple Units belonging to at least one of the Units in the specified UnitCollection.
483
Unit Mounted Soldiers Vacancy
484
Return the overall remaining vacancy for carrying mounted soldiers in all vehicles of all Simple Units belonging to at least one of the Units in the specified UnitCollection.
Wounded and dead soldiers do not occupy any space when mounted and are therefore disregarded for vacancy consideration.

If AllowCarrierSharing is false - vacancy is limited by the fact that a vehicle may only be mounted by a single Simple Unit.
For example, given that: 
- A carrier Simple Unit C has 3 vehicles with each vehicle having a theoretical capacity for carrying 10 soldiers in it.
- C is currently mounted by a "passenger" Infantry Simple Unit that has 21 soldiers - 4 of which are wounded/dead and the rest (17) are competent.
the remaining vacancy for carrying mounted soldiers in C is considered to be 10.

If however AllowCarrierSharing is true - the remaining vacancy for carrying mounted soldiers in C is considered to be 13.
485
Allow Carrier Sharing
486
Unit Current Inventory
487
Returns the total quantity of all inventory items of types belonging to the specified ItemType, that are currently found in all Simple Units belonging to the specified Unit.
488
Unit Current Inventory Native
489
Returns the total quantity of all inventory items of Native Types belonging to the specified ItemNativeType, that are currently found in all Simple Units belonging to the specified Unit.
490
Item Native Type
491
Unit Current Inventory Percentage
492
Returns the overall percentage (current quantity out of standard quantity) for all inventory items of types belonging to the specified ItemType, in all Simple Units belonging to the specified Unit.
Note that the returned percentage may be greater than 100, since current quantity is limited by maximal quantity (physical limitation), which may exceed standard quantity (initialization default).
493
Units Avarage Location
494
Returns the avarage location of all Units in the specified UnitCollection.
If the specified UnitCollection is empty - a Null Point is returned.
495
Unit State of Readiness
496
Returns the State of Readiness of the specified AggregateUnit as set by the last executed SetStateOfReadiness Atomic Command. If a SetStateOfReadiness Command was never executed by the specified AggregateUnit - a Null Enumeration is returned.
497
Units Worst Passability Type
498
Returns the worst Land Passability among all non-mounted live land Simple Units belonging to at least one of the Units in the specified UnitCollection.
Land Passabilities are ordered as follows, from best to worst:
- On Foot
- Remarkable
- Tracked
- Multi Wheel Drive
- Two Wheel Drive
If none of the Units of the specified UnitCollection contain any non-mounted live land Simple Unit - the returned value is Two Wheel Drive.
499
Units Slowest Movement Speed
500
Returns the typical movement speed (in Kilometer per hour) of the slowest Simple Unit in the specified SimpleUnitsCollection.
If the specified TacticalMovement value is true - typical tactical movement speeds are considered, otherwise typical aggregate movement speeds apply.
If the specified SimpleUnitsColection is empty - NullReal is returned.
501
Simple Units Collection
502
Tactical Movement
503
Unit Max Inventory Quantity
504
Returns the maximal quantity of the specified ItemType that can be carried by all SimpleUnits belonging to the specified Unit.
505
Unit Std Inventory Quantity
506
Returns the standard quantity of the specified ItemType carried by all SimpleUnits belonging to the specified Unit.
507
Unit Effective Direct Fire Range
508
Returns the maximal effective range that can be reached with direct fire by a Simple Unit that belongs to the specified Unit, is capable of firing and if ConsiderAmmunitionAvailability is specified as 'true' - also has the relevant ammunition in its inventory.
If the specified Unit does not contain any such Simple Unit - 0 is returned.
509
Consider Ammunition Availability
510
Unit Effective Indirect Fire Range
511
Returns the maximal effective range that can be reached with indirect fire by a Simple Unit that belongs to the specified Unit and is capable of firing.
If the specified Unit does not contain any such Simple Unit - 0 is returned.
Note: for this purpose firing capability depends on vehicle serviceability and soldiers competence only. Ammunition availability is not considered.
512
Unit Can Breach Obstacle
513
Returns 'true' if the specified Unit can breach the obstacle/s (one or more) found along the specified BreachingLine, based on its composition.
For this purpose a Unit is considered capable of breaching the obstacle/s if it contains all necessary Engineering SimpleUnits as would be required for successful completion of an equivalent BreachObstacle Atomic Command.
Each required Engineering SimpleUnit must obviously be properly manned - having the necessary number of competent soldiers, and equipped - having the necessary number of serviceable vehicles (relevant for vehicular SimpleUnits only).
Note that current location of contained Engineering SimpleUnits is of no relevance, i.e. their distance from the BreachingLine and ability to get there are not considered for this purpose.
If no obstacle is found along the specified BreachingLine - 'true' is returned.
514
Breaching Line
515
Commanding Unit
516
Returns the first commanding unit above (up the OrBat tree) the specified Unit (parameter), that is not lower than the specified Echelon (parameter). If no such unit exists - a Null Unit is returned.
517
Echelon
518
Unit Subordinates
519
Returns all subordinates of the specified Unit whose Echelon (see UnitEchelon Atomic Function) is not lower than the specified MinimalEchelon. If DirectOnly is true - the result contains only direct subordinates, otherwise all (both direct and indirect) subordinates are considered.
Note: if MinimalEchelon is EL_Simple, subordinate Simple Units are included in the result whether mounted (on some carrier Simple Unit) or not.
520
Minimal Echelon
521
Direct Only
522
Units Contained Simple Units
523
Returns all Simple Units that either appear in the specifie UnitCollection or belong to (i.e. are direct or indirect subordinates of) at least one unit that appears in the specified UnitCollection.
Note: all Simple Units are returned - whether mounted (on some carrier Simple Unit) or not.
524
Unit Closest Relatives
525
Returns a collection containing units belonging to the specified TopmostAncestor, whose Native Type (sub-type of UNIT, see UnitNativeType Atomic Function) belongs to the specified RelativesNativeType and whose hierarchical distance from from the specified Unit is minimal (hence "closest relatives").
For this purpose hierarchical distance between two units is defined by the echelon of their lowest common ancestor in the OrBat tree. A lower echelon means a shorter hierarchical distance, i.e. a closer [family] relationship.

Definitions:
- RelativesEchelon (sub-type of ECHELON_SIZE) is given by the SIZE external property of the specified RelativesNativeType.

Process Logic:
- Initialize CommonAncestor to the specified Unit.
- Do while CommonAncestor has a parent unit (i.e. it is not the root unit) AND CommonAncestor is not the specified TopmostAncestor
    + Set CommonAncestor to CommonAncestor's parent unit.
    + If CommonAncestor's Native Type belongs to the specified RelativesNativeType
          - Return a collection containing CommonAncestor.
    + else if CommonAncestor ecelon is higher than RelativesEchelon
          - Find all descendants (direct/indirect subordinates) of CommonAncestor whose Native Type belongs to the specified RelativesNativeType.
            Note that for obvious efficiency reasons, this recursion stops at descendants whose ehelon is not higher than RelativesEchelon.
          - If at least one such type matching descendant was found
               + Return a collection containing all found type matching descendants.
- Return an empty collection.
526
Relatives Native Type
527
Topmost Ancestor
528
Unit Effective Supported Unit
529
Returns the Unit that is currently supported by the specified FireUnit, as defined by its Fire Support Assignment.
If the Fire Support Assignment of the specified FireUnit is empty or expired - a Null Unit is returned.
Notes:
- A Fire Unit is a UT_Artillery Aggregate Unit whose Echelon is not lower than EL_Brigade and contains UT_Artillery Simple Units (typically an Artillery Battery/Battalion/Regiment).
- A Fire Support Assignment is a dynamic property of a Fire Unit that defines its mission/commitment to provide indirect fire support for (i.e. fire as directed by) a specified Aggregate Unit for a specified period (not necessarilly limited), constrained by ammunition allocations that limit the types and quantity of Indirect Fire Ammunition that may be fired. Ammunition allocations are defined separately for planned missions (FSM_PlannedMission) and for occasional targets (FSM_OccasionalTarget).
530
Fire Unit
531
Unit Supporting Fire Units
532
Returns all Fire Units Fi whose Effective Supported Unit (see EffectiveSupportedUnit Atomic Function) Si is either the specified SupportedUnit or contains the specified SupportedUnit (i.e. SupportedUnit is a direct or indirect subordinate of Si).
533
Supported Unit
534
Unit Unutilized Indirect Fire Ammo
535
Returns the Indirect Fire Ammunition (AT_Indirect sub-types) inventory that remains to be utilized by the specified FireUnit, as defined by the ammunition allocation for the specified MissionType in its Fire Support Assignment (see EffectiveSupportedUnit Atomic Function for a definition of Fire Unit and Fire Support Assignment).
Remaining unutilized quantity Qi for each allocated Indirect Fire Ammunition NativeType Ti is defined as Max(Ai - Ui, 0) where:
- Ai is the allocated quantity for Ti for the specified MissionType.
- Ui is the utilized quantity of Ti for the specified MissionType.
If the Fire Support Assignment of the specified FireUnit is empty or expired - an empty Allocation Collection is returned.
Note: the Duration property of each Allocation in the returned collection is set to zero.
536
Mission Type
537
Unit Detection List
538
Returns all Simple Units that are currently detected by the specified Unit (parameter) at a Detection Level that is not worse than the specified MinimumDetectionLevel.
In an Aggregation Unit, the Detection Level attributed to a detected Simple Unit is the best Detection Level found among all the Unit's subordinates that detect it.
539
The detecting Unit.
540
Minimum Detection Level
541
Singles whose Detection Level is lower than this are filtered out.
542
Unit Detection State
543
Retrurns the state of detection of the specified DetectedUnit (hereinafter D) by the specified Unit (hereinafter U), as represented in U's detection list (see UnitDetectionList Function), which is:
- DS_LiveDetection - if D is currently detected by U.
- DS_PastDetection - if D is not currently detected by U but was recently detected by U.
- DS_NoDetection - if D is not currently detected by U nor was it recently detected by U.
Note: the lifespan of a past detection is determined by the PAST_DETECTION_LIFESPAN typical property of the Detection System used to detect it.
544
Detected Unit
545
Unit Detection Location
546
Retrurns the detected location of the specified DetectedUnit (hereinafter D), as represented in the detection list (see UnitDetectionList Function) of the specified Unit (hereinafter U).
The result depends on the detection state (see UnitDetectionState Function) of D in U's detection list:
- If it is DS_LiveDetection - the current location of D is returned.
- If it is DS_PastDetection - the location of D when it was last detected by U is returned.
- If it is DS_NoDetection - a Null Point is returned.
547
Units in Area
548
Returns a collection of all Units (both Simple Units and Aggregate Units) that are located inside the specified Area.
549
Area
550
Unit by C4I Logistic Transponder ID
551
Returns the Simple Unit whose Logistic C4I Transponder ID (see SetLogisticC4ITransponderID Atomic Command) equals the specified TransponderID.
If not such Simple Unit is found - a Null Unit is returned.
552
Transponder ID
553
Units Filtered by Area
554
Returns a collection of all Units of the specified UnitCollection (parameter) that are located inside the specified Area. 
Note: the order of the Units in the specified UnitCollection is maintained in the result.
555
Units Filtered by Alliance Color
556
Returns a collection of all Units of the specified UnitCollection (parameter) that belong to the specified AllianceColor.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
557
Alliance Color
558
Units Filtered by Type
559
Returns a collection of all Units of the specified UnitCollection (parameter) whose Unit Type belongs to the specified UnitType.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
560
Units Filtered by Aggregate Type
561
Returns a collection of all Units of the specified UnitCollection (assumed to contain only Aggregate Units) whose Aggregate Type (see UnitAggregateType Atomic Function) belongs to the specified AggregateType.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
562
Aggregate Type
563
Units Filtered by Native Type
564
Returns a collection of all Units of the specified UnitCollection (parameter) whose Native Type (see UnitNativeType Function for details) belongs to the specified UnitNativeType.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
565
Units Filtered by Echelon Level
566
Returns a collection of all Units of the specified UnitCollection (parameter) whose Echelon Level is not lower than the specified LowEchelon and not higher than the specified HighEchelon.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
567
Low Echelon
568
High Echelon
569
Units Filtered by Mount State
570
Returns a collection of all Units of the specified UnitCollection (assumed to contain only Simple Units) whose mount state (mounted/ not mounted on some vehicle/carrier Simple Unit) is specified by the Mounted parameter.
Notes:
- Mounting applies to both vehicular Simple Units (see VehiclesMountTransporters Atomic Command) and infantry/non-vehicular Simple Units (see SoldiersMountVehicles Atomic Command).
- The order of the Units in the specified UnitCollection is maintained in the result.
571
Mounted
572
Units Filtered by Carrier State
573
Returns a collection of all Units of the specified UnitCollection (assumed to contain only Simple Units) whose state as a carrier (i.e being mounted or not by some passenger Simple Unit) is specified by the Mounted parameter.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
574
Units Filtered by Carrier Suitability
575
Returns a collection of all Simple Units of the specified SimpleUnitCollection that are suitable for carring a mounted Simple Unit having vehicles of the specified MountedVehicleNativeType (see UnitVehicleNativeType Atomic Function). Carrier suitability is a typical property, i.e independent of current serviceability nor of carrier state (being mounted or not).
Notes:
- MountedVehicleNativeType may either indicate a vehicular type - potentially carriable thorugh VehiclesMountTransporters Atomic Command, or an infantry/non-vehicular type (RAGLIM) - potentially carriable thorugh SoldiersMountVehicles Atomic Command.
- The order of the Simple Units in the specified SimpleUnitCollection is maintained in the result.
576
Simple Unit Collection
577
Mounted Vehicle Native Type
578
Units Filtered by Targeting Ability
579
Returns a collection of all Units of the specified PotentialTargets collection that are valid targets for direct fire by at least one of the specified FiringUnits. Both collections are assumed to contain only Simple Units.
A PotentialTarget T is considered to be a valid target for direct fire by FiringUnit F if the following conditions are all met:
- T is not completely destroyed/"dead".
- A Line-of-Sight exists between F's current location and T's current location.
- F is capable of firing - as determined by availability of weapon (AKA Direct Fire System) and present competence/serviceability state of its soldiers/vehicles.
- F has in its inventory some ammunition A that is effective against T and T's distance from F is within A's effective range.
Note: the order of Units in the specified PotentialTargets collection is maintained in the result.
580
Potential Targets
581
Firing Units
582
Units Filtered by Firing Ability
583
Returns a collection of all Units of the specified FiringUnits collection for which at least one of the specified PotentialTargets is a valid target for direct fire. Both collections are assumed to contain only Simple Units.
See UnitsFilteredByTargetingAbility Atomic Function for a description of all required conditions for considering PotentialTarget T as a valid target for direct fire by FiringUnit F.
Note: the order of Units in the specified FiringUnits collection is maintained in the result.
584
Units Filtered by Aim Point Reach
585
Returns a collection of all Units of the specified SimpleUnits collection whose inventory contains an ammunition of the specified AmmoType that can reach the specified AimPoint from the Unit's current location.

Definitions:
- The LongestRangeAmmo of a SimpleUnit U is given by UnitLongestRangeAmmoNativeType(U, AmmoType, UseEffectiveRange).
- The Range (in meters) of an ammunition type is given by its AMM_EFF_RANGE external property - if the specified UseEffectiveRange is true, otherwise - by its AMM_MAX_RANGE external property.
- The MinimalRange (in meters) of an ammunition type is given by its AMM_MIN_RANGE external property.
- A Simple Unit U can reach the specified AimPoint if the following conditions are both met:
   + The Range of its LongestRangeAmmo is not lower than the distance between U's current location and the specified AimPoint.
   + The MinimalRange of its LongestRangeAmmo is not higher than the distance between U's current location and the specified AimPoint.
Note: the order of Units in the specified SimpleUnits collection is maintained in the result.
586
Simple Units
587
Aim Point
588
Units Filtered by Shortest Range
589
Returns a collection of all Units of the specified SimpleUnits collection for which the range of the longest range ammunition of the specified AmmoType found in inventory is minimal.
The order of Units in the specified SimpleUnits collection is maintained in the result.

Definitions:
- The Range (in meters) of an ammunition type is given by its AMM_EFF_RANGE external property - if the specified UseEffectiveRange is true, otherwise - by its AMM_MAX_RANGE external property.

Process Logic:
- Set MinimalRangeSimpleUnits to empty collection.
- Set MinimalRange to MaxInt (maximal possible integer value).

- Do for each SimpleUnit Ui of the specified SimpleUnits collection
   + Set LongestRangeAmmo to UnitLongestRangeAmmoNativeType(Ui, AmmoType, UseEffectiveRange).
   + If LongestRangeAmmo equals Null Native Type - continue (to check next Ui).
   + Set R to Range of LongestRangeAmmo.
   + If R > MinimalRange - continue (to check next Ui).
   + If MinimalRange > R
         - Set MinimalRangeSimpleUnits to empty collection.
         - Set MinimalRange to R.
   + Append Ui to MinimalRangeSimpleUnits.

- Return MinimalRangeSimpleUnits.
590
Units Filtered by Deployment State
591
Returns a collection of all Units of the specified UnitCollection (assumed to contain only Simple Units) whose deployment state (deployed/ undeployed) is specified by the Deployed parameter.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
592
Deployed
593
Units Filtered by Deployment Ability
594
Returns a collection of all Units of the specified UnitCollection (assumed to contain only Simple Units) whose ability to deploy is as specified by the Deployable parameter.
The ability to be deployed is a typical property, i.e. independent of current state. The deployment ability of a Simple Unit U is determined as follows:
- Tu is the Native Unit Type of U (see UnitNativeType Function for details).
- If the typical DEPLOYMENT_DELAY external property of Tu is defined and is greater than zero - U is considered to be "Deployable".
Note: the order of the Units in the specified UnitCollection is maintained in the result.
595
Deployable
596
Units Filtered by Operational State
597
Returns a collection of all Units of the specified UnitCollection (assumed to contain only Simple Units) whose operational state (see UnitIsOperational Atomic Function for details) is specified by the Operational parameter.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
598
Operational
599
Units Filtered by Vehicle Type
600
Returns a collection of all Units of the specified UnitCollection (assumed to contain only Simple Units) whose vehicle type belongs to the specified VehicleType.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
601
Vehicle Type
602
Units Filtered by Mounted Soldiers Vacancy
603
Returns a collection of all Units of the specified UnitCollection (assumed to contain only Simple Units) whose Mounted Soldiers Vacancy (see UnitMountedSoldiersVacancy Atomic Function) is not lower than the specified MinimalVacancy parameter.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
604
Minimal Vacancy
605
Units Filtered by Boolean External Property
606
Returns a collection of all Units of the specified UnitCollection (parameter) that belong to a NativeType (see UnitNativeType Atomic Function) for which the value of the specified [Boolean] ExternalProperty of the specified Structure (a collection of Properties that are grouped together) - as defined in the External Properties Database (AKA Static Database), is the specified Value.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
607
External Property
608
Structure
609
Value
610
Units Filtered by Detection Signature
611
Returns a collection of all SimpleUnits of the specified SimpleUnitCollection whose DetectionSignature (see DetectionSignatureNativeType Atomic Function) - when detected by the specified DetectionSystemNativeType (sub-type of DETECTION_SYSTEMS), satisfies the following conditions:
- It belongs to the specified DetectionSignatureNativeType.
- The value of its IS_MSTR (Must Strike Then Report) typical boolean property corresponds to the specified MustStrikeThenReport value (with YN_YesNo value effectively means "don't care" regarding the value of this property).
Note: the order of the SimpleUnits in the specified SimpleUnitCollection is maintained in the result.
612
Detection System Native Type
613
Detection Signature Native Type
614
Must Strike Then Report
615
Units Filtered by Counter Measure State
616
Returns a collection of all SimpleUnits of the specified SimpleUnitCollection for which the state (on/off) of the specified CounterMeasure (see SetCounterMeasureState Atomic Command) corresponds to the specified IsOn parameter.
Notes:
- The state of all counter measures in a SimpleUnit that has no counter measures is obviously 'off'.
- The order of the SimpleUnits in the specified SimpleUnitCollection is maintained in the result.
617
Counter Measure
618
IsOn
619
Units Filtered by Serviceability
620
Returns a collection of all SimpleUnits of the specified SimpleUnitCollection whose serviceability belongs to the specified UnitServiceability.
The serviceability of a vehicular SimpleUnit U is determined according to the serviceability of its vehicles (see UnitVehiclesCount Atomic Function):
- If all of U's vehicles are incapable of neither firing nor moving (VS_CannotMoveAndFire) - US_Destroyed, else
- If U has at least one unserviceable vehicle (a vehicle whose state belongs to VS_Unserviceable) - US_Damaged, else
- US_Serviceable.
The serviceability of a non-vehicular (Infantry) SimpleUnit U is determined according to the competence of its soldiers (see UnitInfantrySoldiersCount Atomic Function):
- If none of U's soldiers is competent (SC_Competent) - US_Destroyed, else
- If all of U's soldeirs are competent (SC_Competent) - US_Serviceable, else
- US_Damaged.
Note: the order of the SimpleUnits in the spcified SimpleUnitCollection is maintained in the result.
621
Unit Serviceability
622
Units Filtered by Role Native Type
623
Returns a collection of all Units of the specified UnitCollection (parameter) whose Role Native Type (see UnitRoleNativeType Function for details) belongs to the specified RoleNativeType.
Note: the order of the Units in the specified UnitCollection is maintained in the result.
624
Role Native Type
625
Units Filtered by Mutual Exclusivity
626
Returns a collection of all units of the specified UnitCollection that are mutually exclusive, i.e. that are not subordinates of or equal to any other unit in the collection.
Note: the order of the units in the specified UnitCollection is maintained in the result.

Example: given the following units hierarchy
A
  B
  C
    D
  E
For UnitCollection {D,A,E} - {A} is returned.
For UnitCollection {D,B,E,C} - {B,E,C} is returned.
For UnitCollection {D,E,C,E,B,C} - {E,C,B} is returned.
627
Units Filtered by Soldiers Count
628
Returns a collection containing a subset of the specified SimpleUnitCollection containing the maximal number of Simple Units Ui for which Sum(Ci) is not larger than the specified MaxSoldiersCount, where Ci is the number of competent soldiers (i.e. excluding dead/wounded soldiers) in Ui.
The implementation is based on a single pass, and is therefore not guaranteed to find the optimal solution.

Example: assuming SimpleUnitCollection contains 5 Simple Units {U1..U5} for which the following Ci values apply:
- C1 = 3
- C2 = 1
- C3 = 4
- C4 = 2
- C5 = 2

UnitsFilteredBySoldiersCount({U1..U5}, 8) returns {U1..U3}
UnitsFilteredBySoldiersCount({U1..U5}, 2) returns {U2}
UnitsFilteredBySoldiersCount({U1..U5}, 20) returns {U1..U5}
UnitsFilteredBySoldiersCount({U1..U5}, 7) returns {U1,U2,U4}
629
Max Soldiers Count
630
Units Sorted by Proximity
631
Returns the units of the specified UnitCollection, sorted by their proximity to the specified Point (parameter) - from closest to farthest.
632
Point
633
Units Sorted by Proximity to Polyline
634
Returns the units of the specified UnitCollection, sorted by their proximity to the specified Polyline - from closest to farthest.
Note: the distance between a point P and a polyline L is defined as the distance between P and the closest point to P on L (see SnapToPolyline Atomic Function).
635
Polyline
636
Units Sorted by Infantry Soldiers Count
637
Returns the units of the specified UnitCollection, sorted by their respective "Infantry Soldiers Count" - from highest to lowest.
For this purpose, the Infantry Count" of each unit Ui of the collection is defined by UnitInfantrySoldiersCount(Ui, UnitType, SoldierCompetence), i.e. it equals the total number of infantry soldeirs whose competence matches the specified SoldierCompetence in all Simple Units belonging to Ui that are of the specified UnitType.
638
Units Sorted by Vehicles Count
639
Returns the units of the specified UnitCollection, sorted by their respective "Vehicles Count" - from highest to lowest.
For this purpose, the "Vehicles Count" of each unit Ui of the collection is defined by UnitVehiclesCount(Ui, UnitType, VehicleServiceability), i.e. it equals the total number of vehicles whose serviceability matches the specified VehicleServiceability in all Simple Units belonging to Ui that are of the specified UnitType.
640
Simple Units Sorted by Deployment Priority
641
Returns the units of the specified SimpleUnitCollection (all assumed to be Simple Units), sorted by their respective "Deployment Priority Grade" - from highest to lowest.
The "Deployment Priority Grade" (hereinafter D) of a Simple Unit U is defined as follows: 
- Tu is the Native Unit Type of U (see UnitNativeType Function for details).
- C is the value of AF_CONTENT_TARGET_COMPONENT_TYPE external property of Tu.
- D is the value of DEPLOYMENT_PRIORITY_GRADE external property of C.
Note: If AF_CONTENT_TARGET_COMPONENT_TYPE is not defined for Tu or if DEPLOYMENT_PRIORITY_GRADE is not defined for C - D is considered to be zero.
642
Simple Units Sorted by Storage Priority
643
Returns the units of the specified SimpleUnitCollection (all assumed to be Simple Units), sorted by their respective "Storage Priority Grade" - from highest to lowest.
The "Storage Priority Grade" (hereinafter S) of a Simple Unit U is defined as follows: 
- Tu is the Native Unit Type of U (see UnitNativeType Function for details).
- C is the value of AF_CONTENT_TARGET_COMPONENT_TYPE external property of Tu.
- S is the value of STORAGE_PRIORITY_GRADE external property of C.
Note: If AF_CONTENT_TARGET_COMPONENT_TYPE is not defined for Tu or if STORAGE_PRIORITY_GRADE is not defined for C - S is considered to be zero.
644
Simple Units Sorted by Carrier Suitability
645
Returns the units of the specified SimpleUnitCollection (all assumed to be Simple Units), sorted by their respective "Carrier Suitability Grade" - from highest to lowest.
The "Carrier Suitability Grade" (hereinafter S) of a Simple Unit U for carrying MountedVehiclesNumber (hereinafter N) vehicles of type MountedVehicleNativeType (hereinafter MVT) is based on the difference between U's overall capacity for carring vehicles of type MVT and the required N.
S is determined as follows:
- Uvn is the number of vehicles in U.
- UVT is the Vehicle Native Type of U (see UnitVehicleNativeType Atomic Function).
- C is the number of vehicles of type MVT that may be mounted/loaded on a single vehicle of type UVT, i.e C = MountedVehiclesCapacity(UVT, MVT).
- Diff is the difference between U's overall capacity for carring vehicles of type MVT and N, i.e. Diff = C * Uvn - N:
   + Zero Diff indicates perfect match.
   + Positive Diff indicates surplus of carrier vehicles in U.
   + Negative Diff indicates shortage of carrier vehicles in U.
- Given that BIG is a significantly large number (10,000), S it computed as follows: if Diff is zero or positive => S = BIG - Diff, else (Diff is negative) => S = Diff.
  This means that: 
   + A pefect match gets highest possible grade (BIG).
   + Surplus Diffs get lower grades: the larger the surplus - the lower the grade.
   + Shortage Diffs get even lower (negative) grades: the larger the shortage - the lower the grade.
646
Mounted Vehicles Number
647
Simple Units Sorted by Indirect Fire Coverage
648
Returns the units of the specified SimpleUnitCollection (all assumed to be Simple Units capable of indirect fire), sorted by their respective "Indirect Fire Coverage" of the specified Route - from highest to lowest.
"Indirect Fire Coverage" of a Route by a Simple Unit Ui is given by PolylineCircleIntersectionPercentage(Route, UnitCurrentLocation(Ui), UnitEffectiveIndirectFireRange(Ui)).
649
Route
650
Units Sorted by Commanding Units
651
Returns the units of the specified UnitCollection, grouped and sorted according to their commanding units of the specified CommandingUnitEchelon.
For this purpose the CommandingUnit (CUi) of each unit Ui in the specified UnitCollection is the first unit above it (up the OrBat tree) whose echelon is not lower than the specified CommandingUnitEchelon, i.e. CUi = CommandingUnit(Ui) (see CommandingUnit Atomic Function).
The units in the returned collection are grouped according to their CUi, and the groups are ordered from largest in size to smallest.
The relative order of units belonging to the same group is maintained in the returned collection. Ordering of same size groups is according to the relative order (in the specified UnitCollection) of their first units.

Example: assuming UnitCollection contains 8 units {U1..U8} for which the following CUi values apply:
- CU1 = G
- CU2 = K
- CU3 = G
- CU4 = H
- CU6 = K
- CU7 = K
- CU8 = M
The returned collection is {U2,U6,U7,U1,U3,U4,U8}.
652
Commanding Unit Echelon
653
Object Name
654
Returns the name of the specified Object.
655
Object
656
Object Type
657
Returns the type of the specified Object.
658
Object Native Type
659
Returns the Native Type of the specified Object.
660
Point Object Location
661
Returns the location of the specified Object, which is assumed to be a Point Terrain Object.
If the specified Object does not exists or is not a Point Terrain Object - a NullPoint is returned.
662
Polyline Object Geometry
663
Returns the geometry of the specified Object, which is assumed to be a Polyline Terrain Object.
If the specified Object does not exists or is not a Polyline Terrain Object - a NullPolyline is returned.
664
Polygon Object Geometry
665
Returns the geometry of the specified Object, which is assumed to be a Polygon Terrain Object.
If the specified Object does not exists or is not a Polygon Terrain Object - an  EmptyPolygon is returned.
666
Ellipse Object Geometry
667
Returns the geometry of the specified Object, which is assumed to be an Ellipse Terrain Object.
If the specified Object does not exists or is not an Ellipse Terrain Object - an EmptyEllipse is returned.
668
Object is Destructed
669
Returns 'true' if the damage level of the specified Terrain Object is such that the object is effectively destructed.
If no such Terrain Object exists - 'false' is returned.
670
Builtup Area Percentage
671
Returns the percentage (a value between 0-100) of built-up area out of the total area of the specified Area Polygon.
A point is considered to be in built-up area if it resides inside a TOT_BuiltupArea object.
672
Thick Vegetation Area Percentage
673
Returns the percentage (a value between 0-100) of thick vegetation area out of the total area of the specified Area Polygon.
A point is considered to be in thick vegetation area if it resides inside a TOT_ThickVegetationArea object.
674
Point Object Collection Locations
675
Return collection of points (polyline) from object collection (infrastructures)
676
Object Collection
677
Objects in Area
678
Returns a collection of all Objects whose Object Type belongs to the specified ObjectType and are located inside the specified Area. If IncludeDestructed is 'true'- destructed objects (see ObjectIsDestructed Atomic Function) are considered by the search and may thus be returned in the result collection, otherwise - destructed objects are ignored.
Note: for this purpose, an Object is considered to be located inside an area if it has at least one point that is located inside the area.
679
Include Destructed
680
Objects in Areas Collection
681
Returns a collection of all objects whose Object Type belongs to the specified ObjectType and are located inside at least one of the polygonal areas defined by the specified PolygonObjects collection. If IncludeDestructed is 'true'- destructed objects (see ObjectIsDestructed Atomic Function) are considered by the search and may thus be returned in the result collection, otherwise - destructed objects are ignored.
Notes:
- For this purpose, an object is considered to be located inside an area if it has at least one point that is located inside the area.
- The specified PolygonObjects may overlap, however each object only appears once in the returned collection.
- The order of objects in the returned collection is immaterial.
682
Polygon Objects
683
Objects of type TOT_PolygonObject.
684
Objects Owned by Units
685
Returns a collection of all Objects whose Native Type (see Object Native Type Atomic Function) belongs to the specified ObjectNativeType and are owned by either one of the specified OwnerUnits. If IncludeDestructed is 'true'- destructed objects (see ObjectIsDestructed Atomic Function) are considered by the search and may thus be returned in the result collection, otherwise - destructed objects are ignored.
686
Owner Units
687
Closest Underground Opening Location
688
Returns the location of the underground opening (see below) that is closest to the specified Point. The search is limited to a subset of the underground network that contains only TOT_TunnelSection and TOT_UndergroundBunker terrain objects that reside (either fully or partially) within the specified SearchArea and may be used by Simple Units of the specified AlianceColor and RequiredAccomodation.
If no such underground opening is found - a Null Point is returned.

Note: underground openings are located:
- At the location of a TOT_UndergroundBunker object.
- At the start point of a TOT_TunnelSection object.
- At the end point of a TOT_TunnelSection object whose OpeningLocations [dynamic] property value is "Start and End".
689
The point from which the distance of underground openings is measured.
690
Search Area
691
The area in which underground openings are searched for.
692
Required Accomodation
693
The search is limited to underground objects whose Underground Accomodation is not lower/narrower than the specified Value.
694
The search is limited to underground objects that may be used by Simple Units belonging to the specified Alliance Color.
695
First Non Builtup Section
696
Returns the first section along the specified Polyline that does not pass through builtup area (a TOT_BuiltupArea object) and whose length is not lower than the specified MinimalLength.
If the entire Polyline passes through builtup area - a NullPolyline is returned.
697
Minimal Length
698
Polyline Object Crossing Polyline
699
Returns the first Polyline Terrain Object of the specified ObjectType that crosses the specified Polyline. The search advances from the first point of the Polyline towards its last. 
If no such Polyline Terrain Object exists - a NullObject is returned.
700
Ellipse Objects Along Polyline
701
Returns all Ellipse Terrain OBjects of the specified ObjectType located along the specified Polyline. The order of the Objects in the returned collection is the order they are encountered when advancing along the Polyline.
For this purpose an Ellipse Terrain Object is considered to be located along a Polyline if at least one point of the Polyline is located inside it.
702
Objects Filtered by Area
703
Returns a collection of all Objects of the specified ObjectCollection that are located inside the specified Area.
If FullContainment is specified as 'true' - an Object is considered to be located inside an area only if it is fully contained inside it, otherwise an Object is considered to be located inside an area if it has at least one point that is located inside the area.
Note: the order of the Objects in the specified ObjectCollection is maintained in the result.
704
Full Containment
705
Objects Filtered by Type
706
Returns a collection of all Objects of the specified ObjectCollection whose Object Type belongs to the specified ObjectType.
Note: the order of the Objects in the specified ObjectCollection is maintained in the result.
707
Objects Filtered by Native Type
708
Returns a collection of all Objects of the specified ObjectCollection whose Native Type belongs to the specified ObjectNativeType.
Note: the order of the Objects in the specified ObjectCollection is maintained in the result.
709
Objects Filtered by Area Visibility
710
Returns a collection containing all Objects of the specified PointObjectCollection (assumed to contain only TOT_PointObjects) from which Visibility (see below) of the specified ObservedArea is not lower than the specified MinimalVisibility.
The Visibility of an area A from a Point Object O is defined as the percentage (0-100) of points inside A that are visible (i.e. have clear line of sight) from O's location.
Note: the order of the Objects in the specified ObjectCollection is maintained in the result.
711
Point Object Collection
712
Observed Area
713
Minimal Visibility
714
Objects Filtered by Army Native Type
715
Returns a collection containing all Objects of the specified ObjectCollection that satisfy the following conditions:
- The Object has an ArmyType property. Note that some Object classes have an ArmyType property (e.g TOT_Airbase, TOT_AerialRoad, TOT_AFSector) and some don't.
- The value of the Object's Army Type property belongs to the specified ArmyNativeType.
Note: the order of the Objects in the specified ObjectCollection is maintained in the result.
716
Army Native Type
717
Objects Filtered by Echelon Level
718
Returns a collection containing all Objects of the specified ObjectCollection that satisfy the following conditions:
- The Object has an EchelonLevel property. Note that some Object classes have an EchelonLevel property (e.g TOT_HQ) and some don't.
- The value of the Object's EchelonLevel equals the specified EchelonLevel OR IncludeNulls = 'true' is specified and the value of the Object's EchelonLevel is null/empty.
Note: the order of the Objects in the specified ObjectCollection is maintained in the result.
719
Echelon Level
720
Include Nulls
721
Objects Filtered by Damage Level
722
Returns a collection containing all Objects of the specified ObjectCollection that satisfy the following conditions:
- The Object has an DamageLevel property. Note that some Object classes have an DamageLevel property (e.g TOT_HQ) and some don't.
- The Object's Damage Level (a value between 0-100) is not lower than the specified MinimalDamageLevel and not higher than the specified MaximalDamageLevel.
Note: the order of the Objects in the specified ObjectCollection is maintained in the result.
723
Minimal Damage Level
724
Maximal Damage Level
725
Objects Filtered by Network Access
726
Returns a collection of all Objects of the specified ObjectCollection from which a network belonging to the specified NetworkNativeType (sub-type of NETWORK) may be accessed.
Note: the order of the Objects in the specified ObjectCollection is maintained in the result.
727
Network Native Type
728
Objects Filtered by Association Native Type
729
Returns a collection containing all Objects of the specified ObjectCollection whose Association equals the specified AssociationNativeType.
Notes:
- Association is a dynamic property of an Object. Its value is a Native Type belonging to the ARRAY_ASSOCIATION hierarchy.
- The order of the Objects in the specified ObjectCollection is maintained in the result.
730
Association Native Type
731
Objects Sorted by Proximity
732
Returns the objects of the specified ObjectCollection, sorted by their proximity to the specified Point (parameter) - from closest to farthest.
Notes:
- The distance between a Point P and a Polyline L is defined as the distance between P and the closest point to P on L.
- The distance between a Point P and a Polygon G is defined as follows: if P is inside G and ZeroDistanceInsidePolygon is true - it is zero, otherwise - it is the distance between P and the closest point to P on G's perimeter.
733
Zero Distance Inside Polygon
734
Objects Sorted by Area Visibility
735
Returns the objects of the specified PointObjectCollection (assumed to contain only TOT_PointObjects), sorted by their visibility to the specified ObservedArea - from highest to lowest.
See ObjectsFilteredByAreaVisibility Atomic Function for a definition of area visibility.
736
Ground Elevation
737
Returns the ground elevation (in meters) at the specified Point.
738
Lowest Point on Polyline
739
Returns the point Pi on the specified Polyline for which GroundElevation(Pi) is lowest (see GroundElevation Atomic Function).
740
Find  Route to Polyline
741
Returns an optimal route on dry land, from an origin point (From parameter) to a destination Polyline (To parameter), subject to tactical criteria.
If a passable route to the specified destination cannot be found under the specified constraints - the result depends on the specified ReturnBestEffort parameter: when 'true' - a route leading to the closest reachable point is returned, otherwise - a Null Polyline is returned.
742
From
743
Movement start point (origin).
744
To
745
Any point on this Polyline is a valid destination point.
746
The area inside which the route is searched for. Must contain both From and To locations.
747
Passability Type
748
The passability of the moving unit.
749
BUA Crossing Policy
750
Preference for passing through Built-up Area.
751
Roads Usage Policy
752
Preference for using roads as part of the route.
753
Enemy Avoidance Policy
754
Preference for avoiding exposure to enemy along the route.
755
Enemy to Avoid
756
A collection of enemy Simple Unis that should preferably be avoided.
757
Exclusion Zone
758
The returned route must not pass through this area.
759
Return Best Effort
760
If true - when the specified destination cannot be reached, a route leading to the closest reachable point is returned (otherwise a NullPolyline is returned).
761
First Impassable Section Start
762
Returns the start point of the first section along the specified Route that is not passable for movement by a unit of the specified Passability.
If the entire Route is passable - a Null Point is returned.
A section of a route is considered not passable if it crosses an obstacle or soil type that is defined as movement-blocking for the specified Passability, or if it slopes (to the front, rear or either side) to a degree that exceeds the maximum passable slope degree attributed to the specified Passability.
763
Last Impassable Section Start
764
Returns the start point of the last section along the specified Route that is not passable for movement by a unit of the specified Passability.
If the entire Route is passable - a Null Point is returned.
A section of a route is considered not passable if it crosses an obstacle or soil type that is defined as movement-blocking for the specified Passability, or if it slopes (to the front, rear or either side) to a degree that exceeds the maximum passable slope degree attributed to the specified Passability.
765
First Passable Section Start
766
Returns the start point of the first section along the specified Route that is passable for movement by a unit of the specified Passability.
If the entire Route is not passable - a Null Point is returned.
A section of a route is considered not passable if it crosses an obstacle or soil type that is defined as movement-blocking for the specified Passability, or if it slopes (to the front, rear or either side) to a degree that exceeds the maximum passable slope degree attributed to the specified Passability.
767
Improved Route
768
Returns an improved route that is based on the specified Route, with impassable sections replaced with bypass sections - wherever found. Impassable sections that cannot be bypassed remain as they are. The returned route is therefore not guaranteed to be passable.
769
The route to be improved (by adding bypasses).
770
The area inside which bypasses are searched for. Must contain the specified Route.
771
Find Route on Roads
772
Returns an optimal (shortest) route on the roads network, that leads from an origin point (From parameter) to a destination point (To parameter). The search is limited to the specified SearchArea. Both From and To points must reside on a road segment and be located inside the specified SearchArea (otherwise an Exception is thrown).
If a route cannot be found - the result depends on the specified ReturnBestEffort parameter: when 'true' - a route leading to the closest reachable point on the roads network is returned, otherwise - a Null Polyline is returned.
773
Movement start point (origin). Must reside on a road segment.
774
Movement end point (destination). Must reside on a road segment.
775
Find Underground Route
776
Returns the shortest contiguous underground route that leads from an underground origin point (From parameter) to a point that is close as possible to the specified destination (To parameter). The returned underground route is limited to a subset of the underground network (hereinafter "Effective Network") that contains only TOT_TunnelSection and TOT_UndergroundBunker terrain objects that reside (either fully or partially) within the specified SearchArea and may be used by Simple Units of the specified AlianceColor and RequiredAccomodation.

Depending on the specified ToForcedOverground parameter, To location is considered to be either underground or underground: when 'false' - To location is considered underground if it is located on the "Effective Network" and overground otherwise, when 'true' - To is considered to be overground.
If To is considered to be underground - the returned route ends at the specified To location. If To is considered to be overground - the returned route ends at the underground opening that is closest to it. If an underground route that satisfies these constraints cannot be found - a Null Polyline is returned.

Note: the specified SearchArea must contain both From location and To location and the specified From location must be located underground, i.e. located on the "Effective Network". If any of these constraints is violated - an Exception is thrown.
777
The underground origin.
778
The destination.
779
To Forced Overground
780
If true - To is considered to be overground, if false - To is considered underground if located on the "Effective Network" and overground otherwise.
781
The area in which the route is searched for. Must contain both From and To locations.
782
Find Accessible Underground Route
783
Returns an underground route that leads from an underground opening (hereinafter EntryPoint) to a point that is close as possible to the specified destination (To parameter). The EntryPoint is located inside the specified EntrySearchArea and is accessible from the specified [above ground] origin point (From parameter) to a Simple Unit of the specified PassabilityType.
The returned underground route is limited to a subset of the underground network (hereinafter "Effective Network") that contains only TOT_TunnelSection and TOT_UndergroundBunker terrain objects that reside (either fully or partially) within the specifeid SearchArea and may be used by Simple Units of the specified AlianceColor and RequiredAccomodation.

Depending on the specified ToForcedOverground parameter, To location is considered to be either underground or underground: when 'false' - To location is considered underground if it is located on the "Effective Network" and overground otherwise, when 'true' - To is considered to be overground.
If To is considered to be underground - the returned route ends at the specified To location. If To is considered to be overground - the returned route ends at the underground opening that is closest to it. If an underground route that satisfies these constraints cannot be found - a Null Polyline is returned.

If several alternative underground routes are found, the route with the lowest "Overall Cost" is returned. Overall Cost is given by Ls + Lu/F + Le where:
- Ls is the distance between From location and the route start point.
- Lu is the length of the route.
- F is the specified UndergroundPreferenceFactor.
- Le is the distance between the route end point and To location.

Note: the specified SearchArea must contain From location,To location and EntrySearchArea. If any of these constraints is violated - an Exception is thrown.
784
Movement end point (destination).
785
The search is limited to underground objects whose Underground Accomodation is not lower than the specified Value.
786
Entry Search Area
787
The returned route must start in an underground opening that is located inside this area.
This area must contain the specified From location and be fully contained inside the specified SearchArea.
788
The returned route start point (E) must be accessible for a Simple Unit of the specified Passability, i.e. a route [above ground] must exist from the specified From location to E that is passable to a Simple Unit of that passability.
789
Underground Preference Factor
790
The maximal number of meters that are worthwhile to move underground, in order to avoid overground movement of one meter.
791
Find  Position
792
Finds an optimal position according to the specified tactical criteria (parameters) and returns the Arrival Route to the found position (the position itself is the last point of the Arrival Route). If a position and/or a route leading to it cannot be found - Null Polyline is returned.
793
The area in which the position is searched for.
794
Potential positions that are within this area are excluded from the search.
795
Objective
796
The position is selected relative to the Objective.
797
Minimal Range
798
The minimum allowed range (in meters) of the position from the center of the Objective parameter.
799
Maximal Range
800
The maximum allowed range (in meters) of the position from the center of the Objective parameter.
801
Dominate
802
If true - the function attempts to find a dominating position, i.e. a position that has superior height and line-of-sight towards the specified Objective. If false - the function attempts to find a hidden position, i.e. a position which is not exposed to the Objective.
803
The location from which the Arrival Route to the found position begins.
804
Route Search Area
805
The area in which the Arrival Route to the found position is searched for.
806
The passability of the unit that is to occupy the position. Considered for finding an Arrival Route to the selected position.
807
Preference for passing through Built-up Area in the Arrival Route.
808
Preference for using roads as part of the Arrival Route.
809
Preference for avoiding exposure to enemy along the Arrival Route.
810
Route Exclusion Zone
811
The returned Arrival Route must not pass through this area.
812
Find Storage Sites
813
Returns a collection of Point Terrain Objects found in a specified SsearchArea, that are optimally selected for storing corresponding Simple Units of the specified SimpleUnitColection.

The order of the Objects in the returned collection corresponds to the order of the Units in the specified SimpleUnitCollection, i.e. each Object is selected to store a corresponding (same index) Simple Unit from SimpleUnitColection. If no suitable Object is found for storing a Simple Unit - a NullObject is returned for it in the result.
For example: for a SimpleUnitCollection containing units A,B,C,D the returned value [Object11, NullObject, Object42, Object11] indicates that Object11 was selected for storing units A and D, Object42 was selected for storing unit C and no Object was selected for storing unit B.

Definitions:
- The PotenialStorageSites is a collection containing all Objects O that satisfy the following conditions:
   + O is a Cultural Point Terrain Object (TASHTIT_POINT).
   + O is located inside the specified SearchArea.
   + O is not destroyed, i.e its current Damage Level is lower than "destroyed_damage_level" external parameter value.
- Tu is the Native Unit Type of Unit U (see UnitNativeType Function for details).
- The typical StorableUnitTypes of each Object O of the PotenialStorageSites is a list of Native Unit Types specified by the typical STORABLE_UNIT_TYPES external property of O.
- The SuitableStorageSites for Unit U is a collection containing all Objects O of the PotenialStorageSites collection that satisfy the following condition:
   + Tu belongs to a Native Unit Type (NUT) that appears in the typical StorableUnitTypes of O.
      The index of NUT in the StorableUnitTypes list of O is considered to be O's Priority for storing U. The lower that index is - the higher the Priority.
- The MostSuitableStorageSites for Unit U is a collection containing those SuitableStorageSites whose Priority for storing U is the highest.
- The PreferredStorageSite for Unit U is the Object closest to U from the MostSuitableStorageSites for U.

Process Logic:
- Set ResultCollection to an empty Object Collection.
- Find the PotentialStorageSites.
- Do for each Unit Ui of the specified SimpleUnitCollection
   + If the SuitableStorageSites collection for Ui is not empty then
          - Append the PreferredStorageSite for Ui to the ResultString.
      else 
          - Append a Null Object to ResultContainers collection.
- Return ResultContainers collection.
814
Find Container Objects
815
Returns a collection of Point Terrain Objects found in a specified SearchArea, that are optimally selected for containing corresponding Simple Units of the specified SimpleUnitColection. 

The order of Objects in the returned collection corresponds to the order of Units in the specified SimpleUnitCollection, i.e. each Object is selected to contain a corresponding (same index) Simple Unit from SimpleUnitColection. If no suitable Object is found for containing a Simple Unit - a NullObject is returned for it in the result.
For example: for a SimpleUnitCollection containing units A,B,C,D the returned value [Object11, NullObject, Object42, Object11] indicates that Object11 was selected for containing units A and D, Object42 was selected for containing unit C and no Object was selected for containing unit B.

Definitions:
- The PotentialContainers is a collection containing all Objects O that satisfy the following conditions:
   + O is a Cultural Point Terrain Object (TASHTIT_POINT).
   + O is located inside the specified SearchArea.
   + O is not destroyed, i.e its current Damage Level is lower than "destroyed_damage_level" external parameter value.
- The following attributes apply to each Unit U of the specified SimpleUnitColection:
   + Tu is the Native Unit Type of Unit U (see UnitNativeType Function for details).
   + Vu is the current number of serviceable vehicles in U (vehicles whose serviceability belongs to VS_Serviceable).
- The following attributes apply to each Object O of the PotentialContainers collection:
   + Oocc is the current occupancy of O, i.e. the overall number of serviceable vehicles in all Simple Units currently deployed inside O.
   + Ocap is the typical capacity of O, as specified by the typical VEHICLES_CAPACITY external property of O.
   + Ovac is the current vacancy in O that equals Ocap minus Oocc minus Vu of every Unit U for which O was already selected as a container.
      Note that Ovac dynamically changes during the selection process.
   + The typical ContainableUnitTypes of O is a list of Native Unit Types specified by the typical CONTAINABLE_UNIT_TYPES external property of O.
- The SuitableContainers for Unit U is a collection containing all Objects O of the PotentialContainers collection that satisfy the following conditions:
   + Tu belongs to a Native Unit Type (NUT) that appears in the typical ContainableUnitTypes of O.
      The index of NUT in the ContainableUnitTypes list of O is considered to be O's Priority for containing U. The lower that index is - the higher the Priority.
   + Vu is not higher than Ovac.
- The MostSuitableContainers for Unit U is a collection containing those SuitableContainers whose Priority for containing U is the highest.
- The PreferredContainer for Unit U is the Object closest to U from the MostSuitableContainers for U.

Process Logic:
- Set ResultContainers to an empty Object Collection.
- Find the PotentialContainers.
- Set the initial Ovac value for each Object O in the PotentialContainers collection to its Ocap minus Oocc (using a Map/Dictionary for maintaining Ovac values is recomended).
- Do for each Unit Ui of the specified SimpleUnitCollection
   + If the SuitableContainers collection for Ui is not empty then
         - Set Oi to the PreferredContainer for Ui.
         - Update Ovac of Oi - subtracting Vu from it.
         - Append Oi to ResultContainers collection.
   + else
         - Append a Null Object to ResultContainers collection.
- Return ResultContainers collection.
816
Current Time
817
Returns the current time in the simulation.
818
Unit Simulation Cycle Length
819
Returns the length of the current/last simulation cycle (tick) executed by the specified Unit.
Note: if activated before execution of the Unit's first simulation cycle - zero is returned.
820
Sunrise
821
Returns the time at which the sun rises (i.e. daytime starts and night time ends) on the specified Date.
Note that only the DD MM YYYY portion of the specified Date is considered (hh:mm:ss portion is ignored).
822
Date
823
Sunset
824
Returns the time at which the sun sets (i.e. daytime ends and night time starts) on the specified Date.
Note that only the DD MM YYYY portion of the specified Date is considered (hh:mm:ss portion is ignored).
825
Downcast to Direction
826
Converts the Direction parameter that is received as a non-specific (Root) Enumeration, to a DR_Direction (leaf) value.
If the received parameter is not a DR_Direction leaf value - an InvalidDowncast Exception is thrown.
827
Direction
828
Downcast to MovementFormation
829
Converts the MovementFormation parameter that is received as a non-specific (Root) Enumeration, to a MF_MovementFormation (leaf) value.
If the received parameter is not a MF_MovementFormation leaf value - an InvalidDowncast Exception is thrown.
830
Movement Formation
831
Downcast to Encounter Reaction
832
Converts the EncounterReaction parameter that is received as a non-specific (Root) Enumeration, to an ER_EncounterReaction (leaf) value.
If the received parameter is not an ER_EncounterReaction leaf value - an InvalidDowncast Exception is thrown.
833
Encounter Reaction
834
Downcast to Roads Usage Policy
835
Converts the RoadsUsagePolicy parameter that is received as a non-specific (Root) Enumeration, to a ROADS_UsagePolicy (leaf) value.
If the received parameter is not a ROADS_UsagePolicy leaf value - an InvalidDowncast Exception is thrown.
836
Downcast to BUA Crossing Policy
837
Converts the BUACrossingPolicy parameter that is received as a non-specific (Root) Enumeration, to a BUA_CrossingPolicy (leaf) value.
If the received parameter is not a BUA_CrossingPolicy leaf value - an InvalidDowncast Exception is thrown.
838
Downcast to Enemy Avoidance Policy
839
Converts the EnemyAvoidancePolicy parameter that is received as a non-specific (Root) Enumeration, to a EAP_EnemyAvoidancePolicy (leaf) value.
If the received parameter is not a EAP_EnemyAvoidancePolicy leaf value - an InvalidDowncast Exception is thrown.
840
Downcast to Alliance Color
841
Converts the AllianceColor parameter that is received as a non-specific (Root) Enumeration, to an AC_AllianceColor (leaf) value.
If the received parameter is not an AC_AllianceColor leaf value - an InvalidDowncast Exception is thrown.
842
Downcast to Position in Formation
843
Converts the PositionInFormation parameter that is received as a non-specific (Root) Enumeration, to a PIF_PositionInFormation (leaf) value.
If the received parameter is not a PIF_PositionInFormation leaf value - an InvalidDowncast Exception is thrown.
844
Position in Formation
845
Downcast to EchelonLevel
846
Converts the EchelonLevel parameter that is received as a non-specific (Root) Enumeration, to an EL_EchelonLevel (leaf) value.
If the received parameter is not an EL_EchelonLevel leaf value - an InvalidDowncast Exception is thrown.
847
Downcast to Indirect Fire Target Type
848
Converts the IndirectFireTargetType parameter that is received as a non-specific (Root) Enumeration, to a IFTT_IndirectFireTargetType (leaf) value.
If the received parameter is not a IFTT_IndirectFireTargetType leaf value - an InvalidDowncast Exception is thrown.
849
IndirectFireTargetType
850
Downcast to Land Passability
851
Converts the LandPassability parameter that is received as a non-specific (Root) Enumeration, to a PT_LandPassability (leaf) value.
If the received parameter is not a PT_LandPassability leaf value - an InvalidDowncast Exception is thrown.
852
Land Passability
853
Downcast to Indirect Ammunition Type
854
Converts the IndirectAmmunitionType parameter that is received as a non-specific (Root) Enumeration, to an AT_Indirect value.
If the received parameter is not a AT_Indirect value - an InvalidDowncast Exception is thrown.
855
Indirect Ammunition Type
856
Downcast to Movement Mode
857
Converts the MovementMode parameter that is received as a non-specific (Root) Enumeration, to a MM_MovementMode (leaf) value.
If the received parameter is not a MM_MovementMode leaf value - an InvalidDowncast Exception is thrown.
858
Movement Mode
859
Downcast to Mounted Vehicles Type
860
Converts the MountedVehiclesType parameter that is received as a non-specific (Root) Enumeration, to a MVT_MountedVehiclesType (leaf) value.
If the received parameter is not a MVT_MountedVehiclesType leaf value - an InvalidDowncast Exception is thrown.
861
Mounted Vehicles Type
862
Downcast to Route Relation
863
Converts the RouteRelation parameter that is received as a non-specific (Root) Enumeration, to a RR_RouteRelation (leaf) value.
If the received parameter is not a RR_RouteRelation leaf value - an InvalidDowncast Exception is thrown.
864
Route Relation
865
Downcast to Main Activity
866
Converts the MainActivity parameter that is received as a non-specific (Root) Enumeration, to a MA_MainActivity value.
If the received parameter is not a MA_MainActivity value - an InvalidDowncast Exception is thrown.
867
Main Activity
868
Downcast to Assume Position Mode
869
Converts the AssumePositionMode parameter that is received as a non-specific (Root) Enumeration, to a APM_AssumePositionMode (leaf) value.
If the received parameter is not a APM_AssumePositionMode leaf value - an InvalidDowncast Exception is thrown.
870
Downcast to On Arrival
871
Converts the OnArrival parameter that is received as a non-specific (Root) Enumeration, to a OA_OnArrival (leaf) value.
If the received parameter is not a OA_OnArrival leaf value - an InvalidDowncast Exception is thrown.
872
Downcast to Land Unit Type
873
Converts the LandUnitType parameter that is received as a non-specific (Root) Enumeration, to a UT_Land value.
If the received parameter is not a UT_Land value - an InvalidDowncast Exception is thrown.
874
Land Unit Type
875
Downcast to Fire Policy
876
Converts the FirePolicy parameter that is received as a non-specific (Root) Enumeration, to a FP_FirePolicy value.
If the received parameter is not a FP_FirePolicy value - an InvalidDowncast Exception is thrown.
877
Fire Policy
878
Downcast to Unit Serviceability
879
Converts the UnitServiceability parameter that is received as a non-specific (Root) Enumeration, to a US_UnitServiceability value.
If the received parameter is not a US_UnitServiceability value - an InvalidDowncast Exception is thrown.
880
Downcast to Detection State
881
Converts the DetectionState parameter that is received as a non-specific (Root) Enumeration, to a DS_DetectionState value.
If the received parameter is not a DS_DetectionState leaf value - an InvalidDowncast Exception is thrown.
882
Detection State
883
Downcast to Underground Accomodation
884
Converts the UndergroundAccomodation parameter that is received as a non-specific (Root) Enumeration, to a UGA_UndergroundAccomodation value.
If the received parameter is not a UGA_UndergroundAccomodation leaf value - an InvalidDowncast Exception is thrown.
885
Underground Accomodation
886
Downcast to Movement Corridor Width
887
Converts the MovementCorridorWidth parameter that is received as a non-specific (Root) Enumeration, to a MCW_MovementCorridorWidth value.
If the received parameter is not a MCW_MovementCorridorWidth leaf value - an InvalidDowncast Exception is thrown.
888
Movement Corridor Width
889
Downcast to Point Cultural Object
890
Converts the PointCulturalObject parameter that is received as a non-specific (Root) Enumeration, to a TOT_PointCulturalObject value.
If the received parameter is not a TOT_PointCulturalObject value - an InvalidDowncast Exception is thrown.
891
Point Cultural Object
892
Downcast to Area of Responsibility
893
Converts the AreaOfResponsibility parameter that is received as a non-specific (Root) Enumeration, to a TOT_AreaOfResponsibility value.
If the received parameter is not a TOT_AreaOfResponsibility value - an InvalidDowncast Exception is thrown.
894
Area of Responsibility
895
Downcast to Unit Type
896
Converts the UnitType parameter that is received as a non-specific (Root) Enumeration, to a UT_Land value.
If the received parameter is not a UT_Land value - an InvalidDowncast Exception is thrown.
897
Downcast to HQ
898
Converts the HQ parameter that is received as a non-specific (Root) Enumeration, to a TOT_HQ value.
If the received parameter is not a TOT_HQ value - an InvalidDowncast Exception is thrown.
899
HQ
900
Downcast to State of Readiness
901
Converts the StateOfReadiness parameter that is received as a non-specific (Root) Enumeration, to a SOR_StateOfReadiness value.
If the received parameter is not a SOR_StateOfReadiness value - an InvalidDowncast Exception is thrown.
902
State of Readiness
903
Downcast to Obstacle Reaction
904
Converts the ObstacleReaction parameter that is received as a non-specific (Root) Enumeration, to an OR_ObstacleReaction (leaf) value.
If the received parameter is not an OR_ObstacleReaction leaf value - an InvalidDowncast Exception is thrown.
905
Obstacle Reaction
906
Downcast to Fire Support Mission
907
Converts the FireSupportMission parameter that is received as a non-specific (Root) Enumeration, to a FSM_FireSupportMission value.
If the received parameter is not a FSM_FireSupportMission value - an InvalidDowncast Exception is thrown.
908
Fire Support Mission
909
Downcast to Ammunition Type
910
Converts the AmmunitionType parameter that is received as a non-specific (Root) Enumeration, to a AT_AmmunitionType value.
If the received parameter is not a AT_AmmunitionType value - an InvalidDowncast Exception is thrown.
911
Ammunition Type
912
Downcast to Waiting Place
913
Converts the WaitingPlace parameter that is received as a non-specific (Root) Enumeration, to a TOT_WaitingPlace value.
If the received parameter is not a TOT_WaitingPlace value - an InvalidDowncast Exception is thrown.
914
Waiting Place
915
Downcast to Launcher State
916
Converts the LauncherState parameter that is received as a non-specific (Root) Enumeration, to a LS_LauncherState value.
If the received parameter is not a LS_LauncherState value - an InvalidDowncast Exception is thrown.
917
Launcher State
918
Downcast to Vehicle Type
919
Converts the VehicleType parameter that is received as a non-specific (Root) Enumeration, to a VT_VehicleType value.
If the received parameter is not a VT_VehicleType value - an InvalidDowncast Exception is thrown.
920
Downcast to Rule For
921
Converts the RuleFor parameter that is received as a non-specific (Root) Enumeration, to an EP_RuleFor value.
If the received parameter is not an EP_RuleFor value - an InvalidDowncast Exception is thrown.
922
Rule For
923
Downcast to Native Type Property
924
Converts the NativeTypeProperty parameter that is received as a non-specific (Root) Enumeration, to a EP_NativeTypeProperty value.
If the received parameter is not a EP_NativeTypeProperty value - an InvalidDowncast Exception is thrown.
925
Native Type Property
926
Native Type Display Name
927
Returns the display name of the specified NativeType.
928
Native Type
929
Native Type is Kind of
930
Returns "true" if NativeType1 (parameter) is a sub-type of (i.e. belongs to the hierachy of NativeTypes defined by) NativeType2 (parameter).
Note that IsKindOf(N,N) is "true" for any NativeType N by definition.
931
NativeType1
932
NativeType2
933
Native Type is Leaf
934
Returns "true" if NativeType is a leaf (has no sub-types).
935
NativeType
936
Allocation Collection Filtered by Native Type
937
Returns a collection containing all Allocations of the specified AllocationCollection whose NativeType (see AllocationNativeType Atomic function) is a sub-type of the specified NativeType (see NativeTypeIsKindOf Atomic Function).
Note: the order of the Allocations in the specified AllocationCollection is maintained in the result.
938
Allocation Collection
939
Integer External Property Value Native
940
Returns the value of the specified ExternalProperty of the specified Structure (a collection of Properties that are grouped together), for the specified NativeType - as defined in the External Properties Database (AKA Static Database). EPS_NoStructure Structure value indicates a property that doesn't belong to a Structure.
If no such property value is defined - a NullInteger is returned.
941
Boolean External Property Value Native
942
Returns YN_Yes or YN_No, according to the value of the specified [Boolean] ExternalProperty of the specified Structure (a collection of Properties that are grouped together), for the specified NativeType - as defined in the External Properties Database (AKA Static Database). EPS_NoStructure Structure value indicates a property that doesn't belong to a Structure.
If no such property value is defined - a Null Enumeration is returned.
943
Real External Property Value Native
944
Returns the value of the specified ExternalProperty of the specified Structure (a collection of Properties that are grouped together), for the specified Type - as defined in the External Properties Database (AKA Static Database). EPS_NoStructure Structure value indicates a property that doesn't belong to a Structure.
If no such property value is defined - a NullReal is returned.
945
Enumeration External Property Value Native
946
Returns the value of the specified ExternalProperty for the specified NativeType - as defined in the External Properties Database (AKA Static Database).
The specified ExternalProperty may belong to a Structure (a collection of Properties that are grouped together) - if specified. An EPS_NoStructure indicates a property that doesn't belong to a Structure.
If no such property value is defined - a NullEnumeration is returned.
947
String External Property Value Native
948
Returns the value of the specified ExternalProperty for the specified NativeType - as defined in the External Properties Database (AKA Static Database).
The specified ExternalProperty may belong to a Structure (a collection of Properties that are grouped together) - if specified. An EPS_NoStructure indicates a property that doesn't belong to a Structure.
If no such property value is defined - a Null (empty) String is returned.
949
Native Type External Property Value Native
950
Returns the value of the specified ExternalProperty for the specified NativeType - as defined in the External Properties Database (AKA Static Database).
The specified ExternalProperty may belong to a Structure (a collection of Properties that are grouped together) - if specified. An EPS_NoStructure indicates a property that doesn't belong to a Structure.
If no such property value is defined - a NullNativeType is returned.
951
Unit Type by Native Type
952
Returns the Unit Type the specified SimpleUnitNativeType is associated with.
953
Simple Unit Native Type
954
Indirect Fire Cocktail Composition
955
Returns the composition (COMPOSITION property) of the specified CocktailNativeType (sub-type of INDIRECT_FIRE_COCKTAIL) - as defined in the External Properties Database (AKA Static Database).
If the specified CocktailNativeType doesn't exist or has no composition defined for it - a Null AllocationCollection is returned.
956
Cocktail Native Type
957
Most Attainable Cocktail Native Type
958
Returns the Native Type of the most attainable (under the specified AmmoConstraint - see details below) IndirectFireCocktail (sub-type of INDIRECT_FIRE_COCKTAIL) out of all IndirectFireCocktails that are applicable to the specified IndirectFireSystem and can achieve the specified RequiredEffect on the specified TargetType.
If no such IndirectFireCocktail is defined - a Null Native Type is returned.

The returned value is determined based on the External Properties Database (AKA Static Database) as follows:
- An Indirect Fire Cocktail C is applicable to an IndirectFireSystem S (sub-type of INDIR_FIRE_SYS) if S belongs to the type defined by the APPLICABILITY Property of C.
- An Indirect Fire Cocktail C can achieve an Indirect Fire Effect E (sub-type of INDIRECT_FIRE_EFFECT) on a TargetType T (sub-type of  INDIRECT_FIRE_TARGET_TYPE) if its EFFECTS_ON_TARGETS Property (collection) contains an element EOTi that satisfies the following conditions:
   + T belongs to the TARGET_TYPE defined by EOTi.
   + E is the EFFECT defined by EOTi.
- The ApplicableCocktails is a collection of all IndirectFireCocktails that are both applicable to the specified IndirectFireSystem and can achieve the specified RequiredEffect on the specified TargetType.
- If ApplicableCocktails is empty - a Null Native Type is returned, otherwise the returned value is the IndirectFireCocktail Ci of the ApplicableCocktails for which the following value (between 0.0 and 1.0) is maximal:
      AllocationCollectionQuantity(AllocationCollectionIntersection(COMPi, AmmoConstraints)) / AllocationCollectionQuantity(COMPi)
where:
   + COMPi is the composition of Ci as given by IndirectFireCocktailComposition(Ci).
   + IndirectFireCocktailComposition, AllocationCollectionQuantity and AllocationCollectionIntersection are all Atomic Functions.

Rationale: out of all ApplicableCocktails, Ci is the IndirectFireCocktail for which the quantity of shells that can be fired (under the specified AmmoConstraints) relative to the quantity of shells that need to be fired (as defined by the composition of Ci) is maximal, hence - the most attainable.
959
Indirect Fire System Native Type
960
Required Effect
961
Target Type
962
Ammo Constraints
963
Returns the Detection Signature NativeType (sub-type of DETECTION_SIGNATURE) of the specified SimpleUnitNativeType (sub-type of UN_SIMPLE), when detected by a Detection System of the specified DetectionSystemNativeType (sub-type of DETECTION_SYSTEMS).
Detection Signatures are used to decide whether a Simple Unit of NativeType X would appear to be identical to (would have the same Detection Signature as) an expected Simple Unit NativeType Y, when both are detected by a certain type of Detection System.

The returned value is determined based on the External Properties Database (AKA Static Database) as follows:
- The DETECTION_SIGNATURES Property of DETECTION_SYSTEMS is a collection of pairs (Structures) of Properties:
   + SIMPLE_UNIT - a SimpleUnit NativeType, hereinafter U.
   + SIGNATURE - a Detection Signature NativeType, hereinafter S.
- A pair {U,S} means that S is the Detection Signature of U, when detected by the characterized type of Detection System.
- A pair {U,S} is considered Relevant if the specified SimpleUnitNativeType belongs to U.
- A Relevant Pair {U1,S1} is considered More Specific than a Relevant Pair {U2,S2} if U1 belongs to U2.
- The returned value is the Detection Signature (S) of the Most Specific Relevant Pair that characterizes the specified DetectionSystemNativeType. If no Relevant Pair is defined - a NullNativeType is returned.
964
Mounted Vehicles Capacity
965
Returns the number of vehicles of the specified MountedVehicleNativeType that may be mounted/loaded on a single vehicle of type CarrierVehicleNativeType, as defined in the External Properties Database (AKA Static Database) by the VEHICLE_LOADING_CAPACITY typical property of Vehicle Native Types (VEHICLE sub-types).
If a vehicle of type CarrierVehicleNativeType is incapable of carrying vehicles of type MountedVehicleNativeType - zero is returned.
966
Carrier Vehicle Native Type
967
Applicable Periodic Stay Native Type
968
The WHEREABOUTS property of a ROLE defines a collection of Periodic Stay (PERIODIC_STAY) structures, describing the whereabouts of that role holder in different states of readiness at different times throughout a typical day (24 hours). The function returns the native type of the Periodic Stay structure that is applicable to the specified RoleNativeType, in the specified StateOfReadiness, at the specified MinuteOfDay - as defined in the External Properties Database (AKA Static Database).
If several applicable Periodic Stay structures are found - the most specific (see below) of them is returned. If no applicable Periodic Stay structure is found - a Null Native Type is returned.
If the specified RoleNativeType does not exist - an Exception is thrown.

The PERIOD (TypeRef) attribute of a Periodic Stay structure associates it with a particular PERIOD. A PERIOD has the following attributes:
- READINESS (TypeRef) - the STATE_OF_READINESS to which the PERIOD applies. It may be abstract or concrete.
- FROM_MINUTE, TO_MINUTE (decimal hhmm) - the time of day to which this PERIOD applies, for example: the values FROM_MINUTE = 2230, TO_MINUTE = 629 define a period of 8 hours that starts at 22:30 and ends at 6:29 (inclusive) on the following day.

The STAY_IN_OBJECT attribute of a Periodic Stay defines where (variant of of a Cultural Point Terrain Object - TASHTIT_POINT) the Role holder resides at the corresponding PERIOD. Note that STAY_IN_OBJECT attribute is irrelevant for this purpose and is merely described here for general orientation.

Definitions:
- A PERIOD P "contains" the specified MinuteOfDay if either one of the following conditions is met:
   + P.TO_MINUTE >= P.FROM_MINUTE AND (MinuteOfDay >= P.FROM_MINUTE  AND P.TO_MINUTE >= MinuteOfDay)
   + P.FROM_MINUTE > P.TO_MINUTE   AND (MinuteOfDay >= P.FROM_MINUTE OR    P.TO_MINUTE >= MinuteOfDay)
- A PERIOD P is considered "applicable" if the following conditions are both met:
   + The specified StateOfReadiness belongs to P.READINESS
   + P "contains" the specified MinuteOfDay.
- The NumberOfMinutes in a decimal hhmm value D (such as FROM_MINUTE,TO_MINUTE of PERIOD) is given by Floor(D/100)*60 + Modulo(D,100). Examples:
   + NumberOfMinutes(645) = 405
   + NumberOfMinutes(1107) = 667.
- The "duration" in minutes of a PERIOD P is computed as follows:
   If P.TO_MINUTE >= P.FROM_MINUTE
         "duration" equals NumberOfMinutes(P.TO_MINUTE) - NumberOfMinutes(P.FROM_MINUTE) + 1,
   else (P.FROM_MINUTE > P.TO_MINUTE)
        "duration" equals 24*60 - NumberOfMinutes(P.FROM_MINUTE) + NumberOfMinutes(P.TO_MINUTE) + 1.
- A PERIOD A is considered "more specific" than PERIOD B if if either one of the following conditions is met:
   + A.READINESS != B.READINESS AND A.READINESS belongs to B.READINESS.
   + A.READINESS = B.READINESS AND the "duration" of A is shorter than the "duaration" of B.

Process Logic:
- Initialize ApplicablePeriodicStay (return value) to a Null Native Type.
- If the specified RoleNativeType does not exist - terminate with an Exception, quoting the offending RoleNativeType.
- Do for each Periodic Stay PSi of the specified RoleNativeType's WHEREABOUTS collection:
   + If PSi.PERIOD is "applicable" AND (ApplicablePeriodicStay equals Null Native Type OR PSi.PERIOD is "more specific" than ApplicablePeriodicStay.PERIOD)
         ApplicablePeriodicStay = PSi.
- Return ApplicablePeriodicStay.

Example:
Given the following values in External Properties Database:
- ROLE_CIVILIAN having the following WHEREABOUTS collection defined for it, containing the following Periodic Stay structures:
    PERIOD => {STATE_OF_READINESS,   800 - 1659}, STAY_IN_OBJECT => TASH_PLANT
    PERIOD => {STATE_OF_READINESS, 1700 -   759}, STAY_IN_OBJECT => TASH_BUILDING
    PERIOD => {STATE_OF_READINESS, 1800 - 1929}, STAY_IN_OBJECT => TASH_MOSQUE
- ROLE_RESERVIST inheriting ROLE_CIVILIAN and extending its WHEREABOUTS collection with an additional Periodic Stay structure:
    PERIOD => {SOR_WAR, 0 - 2359}, STAY_IN_OBJECT => TASH_BUNKER

For input {ROLE_RESERVIST, SOR_Normal,1007}, expected return value is ROLE_CIVILIAN_WHEREABOUTS_1.
For input {ROLE_RESERVIST, SOR_Normal, 1732}, expected return value is ROLE_CIVILIAN_WHEREABOUTS_2.
For input {ROLE_RESERVIST, SOR_Normal, 1840}, expected return value is ROLE_CIVILIAN_WHEREABOUTS_3.
For input {ROLE_RESERVIST, SOR_War, 1840}, expected return value is ROLE_RESERVIST_WHEREABOUTS_1.
969
MinuteOfDay
970
An Integer in the range 0 - 2359 that represents a minute in a 24 hour day. It equals 100*HH+MM, where HH is the hour (0-23) and MM is the minute within that hour. Examples:
- 1947 represents 19:47
- 17 represents 00:17
- 506 represents 5:06
971
Boolean External Parameter Value
972
Returns the value of the specified ExternalParameter - as defined in the External Parameters File (AKA mkrc file).
If no such external parameter is defined - false is returned.
973
ExternalParameter
974
Integer External Parameter Value
975
Returns the value of the specified ExternalParameter - as defined in the External Parameters File (AKA mkrc file).
If no such external parameter is defined - a NullInteger is returned.
976
Real External Parameter Value
977
Returns the value of the specified ExternalParameter - as defined in the External Parameters File (AKA mkrc file).
If no such external parameter is defined - a NullReal is returned.
978
Enumeration External Parameter Value
979
Returns the value of the specified ExternalParameter - as defined in the External Parameters File (AKA mkrc file).
If no such external parameter is defined - a NullEnumeration is returned.
980
Point to String Adaptive
981
Returns the String representation of the specified Point, suitable for display in a user interface that supports multiple coordinate systems (UTM, GEO etc.), with the ability to dynamically change the coordinate system in use.
The returned string may be used to display the specified Point value in the currently selected coordinate system.
982
Direct Fire Salvo Received
983
This Event is sent to a Simple Unit that was targeted (not necessarily hit or damaged) by a direct fire salvo.
984
Shooter
985
The shooting Unit.
986
Damaged Vehicles
987
The number of vehicles in the Target that were damaged by this salvo.
988
Damaged Soldiers
989
The number of soldiers in the Target that were damaged by this salvo.
990
Artillery Salvo Detonated
991
This Event is sent whenever a salvo of Artillery shells detonates, to all Simple Units located within 300m from the Mean Point of Impact.
992
Mean Point of Impact
993
The type of ammunition detonated.
994
Damage Sustained
995
This Event is sent to a Simple Unit that has sustained actual damage (i.e. at least one damaged soldier or vehicle) from whatever reason/cause: direct fire, artillery fire, air to surface munition, land mines, vehicle technical failure, directorate initiated attrition etc.
996
Cause
997
The reason of damage (VULNER_REASON sub-type)
998
The number of vehicles that were damaged.
999
DamagedSoldiers
1000
The number of soldiers that were damaged.
1001
Enemy Detections Improved
1002
This Event is sent to a Simple Unit whenever its Detection List is refreshed and at least one enemy detection in it is improved.
A detection is considered to be improved if it is new or if its Detection Level is better than its previous value.
1003
Enemy Detections Revised
1004
This Event is sent to a Simple Unit whenever its Detection List is revised and found to contain at least one enemy detection.
1005
Obstacle Encountered on Route
1006
This Event is sent to a moving Simple Unit (i.e while executing AtomicMoveAlongRoute/AtomicMoveAndFire) whenever it encounters a linear obstacle object (TOT_LinearObstacle) that crosses the remaining portion of its movement route and the obstacle type is considered movement blocking for the Simple Unit type. For example: for a Tank Simple Unit, an Anti-Tank Ditch is considered movement blocking but a Barbed Wire Fence is not.
If obstacle detection is enabled - the Event is sent as soon as the obstacle blocking the route is detected, otherwise the Event is sent only when the obstacle is actually reached.
1007
Obstacle
1008
Simulation Cycle Started
1009
This Event is sent to a Unit whenever calculation of a new simulation cycle (sub-step) is about to be started for it, in order to trigger Reaction Rules implementing ongoing monitoring/decision making logic.
1010
Time Step Finished
1011
This Event is sent to a Unit whenever calculation of an entire simulation time step (including "after step" cycle) is finished for it, in order to trigger Reaction Rules implementing ongoing monitoring/decision making logic.
1012
Current Time Reset
1013
This Event is sent to a Simple Unit whenever current simulation time is arbitrarily set to a new value. At the time the Event is sent, CurrentTime Atomic Function already returns the new value.
For the avoidance of doubt: the Event is not sent when current simulation time is changed due to normal time progression.
1014
Previous Current Time
1015
The previous CurrentTime value, as it was prior to its resetting.
1016
New Unit Created
1017
This Event is sent to a unit (hereinafter the Receiver) that was involved in the creation of a new unit, to notify it of the new unit that was created (the NewUnit parameter).
- When the new unit is created by either SplitSimpleUnit, CreateNewSimpleUnit, CreateNewAggregateUnit or CreateNewSubordinateUnit Command - the Receiver is the unit that executed the Command.
- When a MountVehicles Command is being executed, up to two different Events may be sent:
   + If the Simple Unit executing the MountVehicles Command (the passenger) is split - an Event is sent to it,
      with NewUnit parameter specifying the newly created passenger Simple Unit.
   + If the carrier Simple Unit is split - an Event is sent to it,
      with NewUnit parameter specifying the newly created carrier Simple Unit.
1018
New Unit
1019
No Primary Command
1020
This Event is sent to a Simple Unit that has no primary Command to execute.
