1
Not
2
Returns "true" if the Boolean parameter is "false", and "false" if the Boolean parameter is "true".
3
Boolean
4
Integer Equals
5
Returns "true" if the two Integer parameters are equal.
6
Int1
7
Int2
8
Integer Greater Than
9
Returns "true" if Int1 is greater than Int2.
10
Integer Less Than
11
Returns "true" if Int1 is less than Int2.
12
Integer Max
13
Returns the maximum between Int1 and Int2.
14
Integer Min
15
Returns the minimum between Int1 and Int2.
16
Integer Plus
17
Returns (Int1 + Int2), i.e. the result of adding Int2 and Int1.
18
Integer Minus
19
Returns (Int1 - Int2), i.e. the result of subtracting Int2 from Int1.
20
Integer Multiply
21
Returns the result of multiplying the Int1 parameter by the Int2 parameter (i.e. Int1*Int2).
22
Integer Divide
23
Returns the result of dividing the Int1 parameter by the Int2 parameter (i.e. Int1/Int2).
If Int2 is zero - Null Integer is returned.
24
Random Integer
25
Returns a random Integer in the range 0 to some large positive number (implementation dependent) -  accessible through the RandomIntegerMax Function.
26
Random Integer Max
27
Returns the highest possible integer that may be returned by the RandomInteger Function.
28
Null Integer
29
Returns a Null Integer, which is an Integer that does not exist. Used for designating a "missing" Integer value.
30
Null Real
31
Returns a Null Real, which is a Real that does not exist. Used for designating a "missing" Real value.
32
Real Equals
33
Returns "true" if the two Real parameters are equal.
34
Real1
35
Real2
36
Real Greater Than
37
Returns "true" if Real1 is greater than Real2.
38
Real Less Than
39
Returns "true" if Real1 is less than Real2.
40
Real Plus
41
Returns the result of adding the Real1 parameter to the Real2 parameter (i.e. Real1+Real2).
42
Real Divide
43
Returns the result of dividing the Real1 parameter by the Real2 parameter (i.e. Real1/Real2).
If Real2 is zero - Null Real is returned.
44
Real Multiply
45
Returns the result of multiplying the Real1 parameter by the Real2 parameter (i.e. Real1*Real2).
46
Real Power
47
Returns the result of raising the specified  Base to the power of the specified Exponent.
48
Base
49
Exponent
50
String Equals
51
Returns "true" if the two String parameters are equal.
52
String1
53
String2
54
String Concatenate
55
Returns a String that is the result of concatenating String2 (parameter) to the end of String1 (parameter).
56
Word in String
57
Returns a word (sub-string) from the specified ParsedString. A word is a sequence of characters (possibly empty) that is delimited by the specified Separator character and/or by the start/end of the string. The index (1-based) of the required word is specified by WordIndex.
For example: given that Separator is "," (comma), the ParsedString "F 16,B-52 ,,,G8" contains 5 words. Word 2 is "B-52 " and word 4 is "" (empty string).
Note: if Separator contains more or less than one character or if WordIndex is greater than the number of words in the ParsedString - an Exception is thrown.
58
Parsed String
59
Separator
60
Word Index
61
Char Index in String
62
Returns the index (1-based) in the specified String of the first character that appears in the specified SearchedCharacters string.
If the specified String doesn't contain any of the characters of the specified SearchedCharacters - a Null Integer is returned.
63
String
64
Searched Charcters
65
Char Count in String
66
Returns the number of characters in the specified String that appear in the specified SearchedCharacters string.
Examples:
CharCountInString("ABC ABC DEF", "AE") = 3
CharCountInString("ABC ABC DEF", "GB") = 2
CharCountInString("ABC ABC DEF", "M") = 0
67
Odd Char Index in String
68
Returns the index (1-based) in the specified String of the first character that does not appears in the specified SearchedCharacters string.
If no such character is found - a Null Integer is returned.
69
Sub String
70
Returns a portion of the specified String that starts at the specified StartIndex (1-based) and spans Length characters or until the end of the specified String - whichever comes first.
Examples:
- SubString("ABCDEF", 4, 10) = "DEF"
- SubString("ABCDEF", 1, 0) = "" (null/empty string)
71
Start Index
72
Length
73
String Length
74
Returns the number of characters in the specified String.
75
Time Equals
76
Returns "true" if the two Time parameters are Equal.
77
Time 1
78
Time 2
79
Time Greater Than
80
Returns "true" if Time1 is greater than Time2.
81
Time Plus
82
Returns the result of adding the TimeSpan parameter to the Time parameter.
83
Time
84
Time Span
85
Time Minus
86
Returns the result of subtracting the TimeSpan parameter from the Time parameter.
87
Null Time
88
Returns a Null Time, which is a Time that does not exist. Used for designating a "missing" Time value.
89
Timespan Equals
90
Returns True if the two Timespan parameters are Equal.
91
Timespan 1
92
Timespan 2
93
Null Timespan
94
Returns a Null Timespan, which is a Timespan that does not exist. Used for designating a "missing" Timespan value.
95
Timespan
96
Returns an equivalent Timespan to the Duration (parameter) in seconds. (e.g. Timespan(85) = 00:00:01:25)
97
Duration
98
Timespan Greater Than
99
Returns "true" if Timespan1 is greater than Timespan2.
100
Timespan1
101
Timespan2
102
Time Difference
103
Returns the absolute difference between Time1 and Time2.
Note that TimeDifference(T1,T2) = TimeDifference(T2,T1) by definition.
104
Hour
105
Returns the hour portion (hh) of the specified Time value, which is a value in the range 0-23.
106
Minute
107
Returns the minute portion (mm) of the specified Time value, which is a value in the range 0-59.
108
Second
109
Returns the second portion (ss) of the specified Time value, which is a value in the range 0-59.
110
Enumeration Equals
111
Returns "true" if the two Enumeration parameters are equal.
112
Enumeration1
113
Enumeration2
114
Is Kind of
115
Returns "true" if Enumeration1 (parameter) is a sub-type of (i.e. belongs to the hierarchy of Enumerations defined by) Enumeration2 (parameter).
Note that IsKindOf(E,E) is "true" for any Enumerations E by definition.
116
Null Enumeration
117
Returns a Null Enumeration, which is an Enumeration that does not exist. Used for designating a "missing" Enumeration value.
118
Enumeration Children Count
119
Returns the number of child Enumerations under the specified Enumeration.
120
Enumeration
121
Sequence Under Parent
122
Returns the child sequence number (1 based) of the specified Enumeration under its parent Enumeration. If the specified Enumeration has no parent Enumeration - a Null Integer is returned.
123
Enumeration By Sequence Under Parent
124
Returns the child Enumeration of the specified ParentEnumeration whose sequence under the parent is the specified Sequence.
Example: EnumerationBySequenceUnderParent(ES_ExecutionState, 2) = ES_Skipped.
If the specified ParentEnumeration has no child Enumeration with the specified Sequence - a Null enumeration is returned
125
Parent Enumeration
126
Sequence
127
Enumeration External ID
128
Returns the External ID associated with the specified Enumeration value. 
Note: External IDs are used for mapping Enumeration values to equivalent enumerated types (AKA Native Types) of the host simulation.
129
Enumeration Display Name
130
Returns the Display Name associated with the specified Enumeration value.
131
Downcast to Yes/No
132
Converts the YesNo parameter that is received as a non-specific (Root) Enumeration, to a YN_YesNo (leaf) value.
If the received parameter is not a YN_YesNo leaf value - an InvalidDowncast Exception is thrown.
133
Yes/No
134
Enumeration by External ID
135
Returns the Enumeration value whose External ID is the specified ExternalID. If no such Enumeration exists - a Null Enumeration is returned.
136
External ID
137
Sector
138
Returns a Sector whose middle Azimuth is the specified Direction and whose width is defined by the specified Angle.
139
Direction
140
Angle
141
The width of the returned Sector.
142
AzimuthOfLine
143
Returns the Azimuth of the Line parameter (from 1st Point to 2nd Point).
144
Line
145
Reverse Azimuth
146
Returns the reverse (opposite direction)  Azimuth of the given Azimuth parameter.
147
Azimuth
148
AzimuthPlus
149
Returns the sum of Azimuth1 and Azimuth2 parameters. Note that Azimuth is cyclic by nature, e.g.  Azimuth(150)+Azimuth(300) = Azimuth(90).
150
Azimuth1
151
Azimuth2
152
Returns an Azimuth which is based on the Integer parameter. Note that the Integer parameter bay be negative and may be greater than 359. For example: Azimuth(-20) = Azimuth(340), Azimuth(1000) = Azimuth(280).
153
Integer
154
AzimuthMinus
155
Returns the difference between Azimuth1 and Azimuth2 parameters. Note that Azimuth is cyclic by nature, e.g.  Azimuth(150)-Azimuth(300) = Azimuth(-150) = Azimuth(210).
156
Null Azimuth
157
Returns a Null Azimuth, which is an Azimuth that does not exist. Used for designating a "missing" Azimuth value.
158
Point Equals
159
Returns "true" if Point1 and Point2 (parameters) are equal.
160
Point1
161
Point2
162
Null Point
163
Returns a Null Point, which is a Point that does not exist. Used for designating a "missing" Point value.
164
Point Name
165
Returns the name of the specified Point.
166
Point
167
Point With Name
168
Returns a Point that is based on the specified Point and has the specified Name as its name.
169
Name
170
PointOnAzimuth
171
Returns a Point that is in the specified Distance (parameter) from the Origin parameter, and in the specified Azimuth (parameter) from the Origin parameter.
172
Origin
173
Distance
174
Distance in meters from the Origin Point.
175
Azimuth from the Origin Point.
176
Returns the Line which is defined by the two Point arguments .
177
Null Line
178
Returns a Null Line, which is a Line that does not exist (made up of two Null Points). Used for designating a "missing" Line value.
179
Line Equals
180
Returns "true" if Line1 and Line2 (parameters) are equal.
181
Line 1
182
Line 2
183
Line Left Perpendicular
184
Returns a Line which is perpendicular to the Line parameter and has the same length. The returned Line's 1st Point is the Line parameter's 2nd Point, and its 2nd Point is to the left of the Line parameter.
185
Line Right Perpendicular
186
Returns a Line which is perpendicular to the Line parameter and has the same length. The returned Line's 1st Point is the Line parameter's 2nd Point, and its 2nd Point is to the right of the Line parameter.
187
Line Length
188
Returns the length (in meters) of the input Line parameter.
189
Point On Line
190
Returns a Point on the Line parameter whose distance from the 1st Point of the Line is OffsetPercent (0..100) of the Line's length.
191
Offset Percent
192
Is Point on Right Side
193
Returns true if the Point parameter is on the right side of the Line parameter. Left and right are determined relative to the direction of the Line (from its 1st Point to its 2nd Point).
194
Reverse Line
195
Returns a Line that contains the Points of the Line parameter in reverse order.
196
Polyline Length
197
Returns the length (in meters) of the input Polyline parameter.
198
Polyline
199
Polyline Name
200
Returns the name of the specified Polyline.
201
Polyline Number of Points
202
Returns the number of points (vertices) of the specified Polyline.
203
Polyline Point
204
Returns the point (vertex) of the specified Polygon that corresponds to the specified Index (1-based).
If the specified Index is less than one or greater than the number of points in the specified Polyline - an Exception is thrown.
205
Index
206
Polyline Last Point
207
Returns the last Point of the Polyline parameter.
208
Polyline Farthest Point
209
Returns the point on the specified Polyline that is farhest from the specified Point.
210
Snap To Polyline
211
Returns the Point on the specified Polyline parameter, which is closest (geometrically) to the specified Point parameter.
212
Trimmed Polyline
213
Returns a Polyline which is the middle part of the input Polyline parameter. The TrimFromStart and TrimFromEnd parameters, specify the length (in meters) which should be trimmed from each side of the input Polyline. Note that when the sum TrimFromStart+TrimFromEnd is greater than the input Polyline length, the returned Polyline is empty (have no Points).
214
The input Polyline.
215
Trim From Start
216
The distance (in meters) which should be trimmed from the start of the Polyline.
217
Trim From End
218
The distance (in meters) which should be trimmed from the end of the Polyline.
219
Trim Polyline Between Points
220
Returns the middle part of a specified Polyline (parameter), which starts at the specified StartPoint parameter - snapped to the specified Polyline, and ends at the specified EndPoint parameter - also snapped to the specified Polyline.
221
Start Point
222
End Point
223
Loops Trimmed Polyline
224
Returns a Polyline that is based on the specified Polyline, with loops trimmed/eliminated.
A loop is a section of a self intersecting Polyline that starts and ends at the same [self intersection] point.
225
Reverse Polyline
226
Returns a Polyline which contains the Points of the Polyline parameter in reverse order.
227
Parallel Polyline
228
Returns a Polyline that is parallel to the specified Polyline, in the specified Offset from it - to the right (positive Offset value) or left (negative Offset value).
The returned Polyline does not intersect itself, i.e "loops" that may be formed in the process of creating it are all trimmed.
Since the returned Polyline may contain arcs, the resolution for their approximation is defined by CircleNumberOfPoints, e.g. CircleNumberOfPoints = 60 means that a 90 degree arc should be approximated by 15 points.
229
Offset
230
Circle Number of Points
231
Polyline Add
232
Returns a Polyline resulting from joining Polyline1 and Polyline2 (parameters). The returned Polyline is comprised of all Polyline1 Points, followed by all Polyline2 Points. If the first Point of Polyine2 is identical to the last Point of Polyline1 - it is omitted from the returned Polyline to prevent redundancy.
233
Polyline1
234
Polyline2
235
Null Polyline
236
Returns a Null Polyline, which is a Polyline that does not exist. Used for designating a "missing" Polyline value.
237
Polyline Equals
238
Returns "true" if Polyline1 and Polyline2 (parameters) are equal.
239
Polyline 1
240
Polyline 2
241
Polyline Edge
242
Returns the edge of the specified Polyline on which the specified Point (snapped to the Polyline) resides.
Note: an edge of a Polyline is a line that connects two adjacent vertices.
243
Polygon Equals
244
Returns "true" if Polygon1 and Polygon2 (parameters) are equal.
245
Polygon 1
246
Polygon 2
247
Empty Polygon
248
Returns an empty Polygon.
249
Polygon Name
250
Returns the name of the specified Polygon.
251
Polygon
252
Polygon With Name
253
Returns a Polygon that is based on the specified Polygon and has the specified Name as its name.
254
Polygon Left Part
255
Returns a Polygon that is the part of the specified Polygon (parameter) that resides in the left part of the plane - as divided by the DividerLine parameter. Left and right are relative to the DividerLine direction - from its 1st Point to its 2nd Point. If the entire Polygon resides in the right part of the divided plane - a Null (empty) Polygon is returned.
256
Divider Line
257
Rectangle
258
Returns a Rectangular Polygon. The center of the Rectangle is specified by the Center parameter. The Width and Depth parameters specify the dimensions of the Rectangle sides. The Rectangle is aligned so that its Width side faces the Orientation Azimuth parameter (i.e. the Depth side is parallel to the Orientation Azimuth).
259
Center
260
Width
261
The Width (in meters) of the Rectangle.
262
Depth
263
The Depth (in meters) of the Rectangle.
264
Orientation
265
The Azimuth of the Depth dimention.
266
Polygon Right Part
267
Returns a Polygon that is the part of the specified Polygon (parameter) that resides in the right part of the plane - as divided by the DividerLine parameter. Left and right are relative to the DividerLine direction - from its 1st Point to its 2nd Point. If the entire Polygon resides in the left part of the divided plane - a Null (empty) Polygon is returned.
268
Polygon Add
269
Returns a Polygon that is the union of two Polygons. If the two Polygons do not overlap at all - the result is obtained by adding a zero width "bridge" that connects the two Polygons  between two vertexes - to form the union Polygon. The location of the "bridge" is selected so that it doesn't intersect any of the two Polygons.
For example: if Polygon1 is a triangle A1,B1,C1 and Polygon2 is a triangle A2,B2,C2 and the Polygons do not overlap at all and the line B1-C2 is the first vertex-connecting line that does not intersect any of the two Polygons, the returned Polygon is B1,C1,A1,B1,C2,A2,B2,C2 (with C2-B1 naturally being the last edge that closes the Polygon).
Note that for this purpose, tangent Polygons are considered to be partially overlapping, i.e. no "bridge" is required to connect them.
270
Polygon1
271
Polygon2
272
Triangle
273
Returns a triangular Polygon based on the three Vertex parameters.
274
Vertex 1
275
Vertex 2
276
Vertex 3
277
Polygon Center
278
Returns the Point which is the center of gravity of the specified Polygon parameter. Note that the returned Polygon's center point could be outside the specified Polygon.
279
Polygon Area
280
Returns the area of the specified Polygon, in square Kilometers.
281
Point Inside Polygon
282
Returns "true" if the specified Point is inside the specified Polygon (parameters). For this purpose, all Points located on the perimeter of the Polygon are considered inside the Polygon.
283
Polygon Subtract
284
Returns a Polygon which is the result of subtracting Polygon2 from Polygon1.
If Polygon2 entirely covers Polygon1 - a null (empty) polygon is returned.
If subtraction yields more than one polygon - the one with the largest area (see PolygonArea) is returned.
285
Polygon Longest Crossing Line
286
Returns the longest line that crosses the specified Polygon (hereinafter P) and is completely inside it, i.e. the longest line L that satisfies the following conditions:
- Both end points of L are located on the perimeter of P.
- All other points of L are "truly inside" P, i.e are inside P but not on P's perimeter.
Note: the following possible implementation is somewhat inaccurate but cosidered to be good enough:
- Allocate N equally spaced points (p1,p2...pN) on P's perimeter, with N chosen according to performance limitations (e.g. N = 15).
- Check each possible line between points pi and pj (i != j) to see whether it is truly inside P.
- Return the longest line among all lines found to be truly inside P.
287
Polygon Contained Polyline
288
Returns a Polyline that is based on the specified Polyline, with external segments (segments passing outside the specified Polygon) replaced by Polygon perimeter segments. The returned Polyline is thus fully contained inside the Polygon. For this purpose all points on the perimeter of the specified Polygon are considered to be inside it.
The specified Polyline is assumed to start and end inside the specified Polygon. If this is not the case - a Null Polyline is returned.
An external segment of the specified Polyline is a segment that starts at point Ps - where the Polyline exits the Polygon, and ends at point Pe - where the Polyline reenters the Polygon. Each external segment is replaced by a Polygon perimeter segment Ps...Pe that is the shorter of the two (forward/backwards along the Polygon perimeter).
289
Ellipse Center
290
Returns the center of an Ellipse.
291
Ellipse
292
Ellipse Diameter
293
Returns the diameter (Line) of the specified Ellipse (parameter) in the specified Azimuth (parameter). A diameter is a Line that crosses the Ellipse's center and whose two Points are on the Ellipse's perimeter. The Azimuth of the returned diameter Line (from its 1st Point to its 2nd Point) is specified by the Azimuth parameter.
294
Ellipse Shortest Diameter
295
Returns the shortest diameter (Line) of the specified Ellipse (parameter). A diameter is a Line that crosses the Ellipse's center and whose two Points are on the Ellipse's perimeter. The order of the two Points in the returned Line is arbitrary.
296
Ellipse Bounding Polygon
297
Returns the smallest Ellipse that bounds the specified Polygon parameter.
If the specified Polygon is an EmptyPolygon - a NullEllipse is returned.
298
Returns an Ellipse based on its specified  Width, Depth, Center and Orientation (parameters). The Orientation of the Ellipse is the Azimuth of its specified Depth dimension.
299
The Width (in meters) of the Ellipse.
300
The Depth (in meters) of the Ellipse.
301
Ellipse Equals
302
Returns True if the two Ellipse parameters are Equal.
303
Ellipse 1
304
Ellipse 2
305
Null Ellipse
306
Returns a Null Ellipse, which is a Ellipse that does not exist. Used for designating a "missing" Ellipse value.
307
Intersection Point
308
Returns the Point of intersection of the Line1 parameter and the Line2 parameter. The two Line parameters are considered endless, i.e. the intersection Point does not have to be on either one of them. If the two Lines are parallel, the Null (empty) Point is returned.
309
Polygon Crossing Point
310
Returns the first Point where the Line parameter crosses (intersects) the Polygon Parameter, when advancing from the 1st Point of the Line parameter towards its 2nd Point. If the Line and the Polygon do not intersect, a null (empty) Point is returned.
311
Polyline Ellipse Intersection Point
312
Returns the first intersection Point between the Polyline (parameter) and the Ellipse (parameter). The search advances along the Polyline parameter, starting from its 1st Point. If the Polyline and the Ellipse do not intersect, a null (empty) Point is returned.
313
Polylines Intersection Point
314
Returns the first Point along the first Polyline which is intersected by the second Polyline. If the two Polylines do not intersect, a Null Point is returned.
315
The Second Polyline.
316
Polyline Circle Intersection Percentage
317
Returns the percentage (0-100) of the specified Polyline that passes inside a circle defined by the specified Center and Radius.
Note that since the Polyline may enter and exit the circle several times, an accurate geometrical computation is not trivial. The following alternative computation method is considered a valid approximation:
- The result is based on sampling N equally spaced points along the Polyline, where N is relatively small (e.g. 25).
- Given that the Polyline length is L, the distance between the points is L/(N-1) since the first and last points of the Polyline are of course included in the sample.
- The result is 100*I/N where I is the number of sampled points that are located inside the circle (i.e. whose distance from the specified Center is not greater than the specified Radius).
318
Radius
319
Polygons Intersection
320
Returns the area common to both Polygon1 and Polygon2.
If Polygon1 and Polygon2 do not intersect - an EmptyPolygon is returned.
321
Null Unit
322
Returns a Null Unit, which is a Unit that does not exist. Used for designating a "missing" Unit value.
323
Unit Equals
324
Returns "true" if Unit1 and Unit2 (parameters) are the same Unit.
325
Unit1
326
Unit2
327
Empty Unit Collection
328
Returns an empty Unit Collection.
329
Unit As Collection
330
Returns a Unit Collection that contains the specified Unit parameter.
331
Unit
332
Unit Collection Count
333
Returns the number of Units in the specified UnitCollection parameter.
334
Unit Collection
335
Unit in Collection
336
Returns a Unit of the specified Collection parameter that correspond to the specified Index parameter (1-based).
If the specified Index is outside the bounds of the Collection - an Exception is thrown.
337
Collection
338
Unit Index in Collection
339
Returns the index (1-based) of the first appearance of the specified Unit in the specified Collection.
If the specified Unit does not appear in the specified Collection - NullInteget is returned.
340
Append Units to Collection
341
Returns a collection containing all Units of the specified UnitCollection1 followed by all Units of the specified UnitCollection2.
342
Unit Collection 1
343
Unit Collection 2
344
Remove Units From Collection
345
Returns a collection of all Units of the specified UnitCollection that are not included in the specified RemovedUnits collection.
346
Removed Units
347
Unit Collection Head
348
Returns a collection containing the first HeadSize elements of the specified UnitCollection.
If the specified HeadSize is greater than the number of elements in the specified UnitCollection - the entire UnitCollection is returned.
349
UnitCollection
350
Head Size
351
Unit Collection Shuffled
352
Returns a collection containing the units of the specified UnitCollection in random order.
353
Null Object
354
Returns a Null Object, which is an Object that does not exist. Used for designating a "missing" Object value.
355
Object Equals
356
Returns "true" if Object1 and Object2 (parameters) are the same Object.
357
Object1
358
Object2
359
Empty Object Collection
360
Returns an empty Object Collection.
361
Object As Collection
362
Returns an Object Collection that contains the specified Object parameter.
363
Object
364
Object Collection Count
365
Returns the number of Objects in the specified ObjectCollection parameter.
366
Object Collection
367
Object in Collection
368
Returns an Object of the specified Collection parameter that correspond to the specified Index parameter (1-based).
If the specified Index is outside the bounds of the Collection - an Exception is thrown.
369
Object Index in Collection
370
Returns the index (1-based) of the first appearance of the specified Object in the specified Collection.
If the specified Object does not appear in the specified Collection - NullInteget is returned.
371
Append Objects to Collection
372
Returns a collection containing all Objects of the specified ObjectCollection1 followed by all Objects of the specified ObjectCollection2.
373
Object Collection 1
374
Object Collection 2
375
Remove Objects From Collection
376
Returns a collection of all Objects of the specified ObjectCollection that are not included in the specified RemovedObjects collection.
Note: the order of objects in the specified ObjectCollection is maintained in the result.
377
Removed Objects
378
Object Collection Shuffled
379
Returns a collection containing the objects of the specified ObjectCollection in random order.
380
Null Task
381
Returns a Null Task, which is a Task that does not exist. Used for designating a "missing" Task value.
382
Task Equals
383
Returns "true" if Task1 and Task2 (parameters) are the same Task.
384
Task1
385
Task2
386
Task ID
387
Returns the Internal ID of the specified Task as a String value.
388
Task
389
Allocation
390
Returns an Allocation of the specified NativeType, Quantity and Duration.
391
Native Type
392
Quantity
393
Null Allocation
394
Returns a Null Allocation, which is a Allocation that does not exist. Used for designating a "missing" Allocation value.
395
Allocation Equals
396
Returns "true" if Allocation1 and Allocation2 (parameters) are equal.
397
Allocation 1
398
Allocation 2
399
Allocation Native Type
400
Returns the Native Type of the specified Allocation.
401
Polyline Number of Points
402
Returns the number of points (vertices) of the specified Polyline.
403
Polyline Point
404
Returns the point (vertex) of the specified Polygon that corresponds to the specified Index (1-based).
If the specified Index is less than one or greater than the number of points in the specified Polyline - an Exception is thrown.
405
Index
406
Polyline Last Point
407
Returns the last Point of the Polyline parameter.
408
Polyline Farthest Point
409
Returns the point on the specified Polyline that is farhest from the specified Point.
410
Snap To Polyline
411
Returns the Point on the specified Polyline parameter, which is closest (geometrically) to the specified Point parameter.
412
Trimmed Polyline
413
Returns a Polyline which is the middle part of the input Polyline parameter. The TrimFromStart and TrimFromEnd parameters, specify the length (in meters) which should be trimmed from each side of the input Polyline. Note that when the sum TrimFromStart+TrimFromEnd is greater than the input Polyline length, the returned Polyline is empty (have no Points).
414
The input Polyline.
415
Trim From Start
416
The distance (in meters) which should be trimmed from the start of the Polyline.
417
Trim From End
418
The distance (in meters) which should be trimmed from the end of the Polyline.
419
Trim Polyline Between Points
420
Returns the middle part of a specified Polyline (parameter), which starts at the specified StartPoint parameter - snapped to the specified Polyline, and ends at the specified EndPoint parameter - also snapped to the specified Polyline.
421
Start Point
422
End Point
423
Loops Trimmed Polyline
424
Returns a Polyline that is based on the specified Polyline, with loops trimmed/eliminated.
A loop is a section of a self intersecting Polyline that starts and ends at the same [self intersection] point.
425
Reverse Polyline
426
Returns a Polyline which contains the Points of the Polyline parameter in reverse order.
427
Parallel Polyline
428
Returns a Polyline that is parallel to the specified Polyline, in the specified Offset from it - to the right (positive Offset value) or left (negative Offset value).
The returned Polyline does not intersect itself, i.e "loops" that may be formed in the process of creating it are all trimmed.
Since the returned Polyline may contain arcs, the resolution for their approximation is defined by CircleNumberOfPoints, e.g. CircleNumberOfPoints = 60 means that a 90 degree arc should be approximated by 15 points.
429
Offset
430
Circle Number of Points
431
Polyline Add
432
Returns a Polyline resulting from joining Polyline1 and Polyline2 (parameters). The returned Polyline is comprised of all Polyline1 Points, followed by all Polyline2 Points. If the first Point of Polyine2 is identical to the last Point of Polyline1 - it is omitted from the returned Polyline to prevent redundancy.
433
Polyline1
434
Polyline2
435
Null Polyline
436
Returns a Null Polyline, which is a Polyline that does not exist. Used for designating a "missing" Polyline value.
437
Polyline Equals
438
Returns "true" if Polyline1 and Polyline2 (parameters) are equal.
439
Polyline 1
440
Polyline 2
441
Polyline Edge
442
Returns the edge of the specified Polyline on which the specified Point (snapped to the Polyline) resides.
Note: an edge of a Polyline is a line that connects two adjacent vertices.
443
Polygon Equals
444
Returns "true" if Polygon1 and Polygon2 (parameters) are equal.
445
Polygon 1
446
Polygon 2
447
Empty Polygon
448
Returns an empty Polygon.
449
Polygon Name
450
Returns the name of the specified Polygon.
451
Polygon
452
Polygon With Name
453
Returns a Polygon that is based on the specified Polygon and has the specified Name as its name.
454
Polygon Left Part
455
Returns a Polygon that is the part of the specified Polygon (parameter) that resides in the left part of the plane - as divided by the DividerLine parameter. Left and right are relative to the DividerLine direction - from its 1st Point to its 2nd Point. If the entire Polygon resides in the right part of the divided plane - a Null (empty) Polygon is returned.
456
Divider Line
457
Rectangle
458
Returns a Rectangular Polygon. The center of the Rectangle is specified by the Center parameter. The Width and Depth parameters specify the dimensions of the Rectangle sides. The Rectangle is aligned so that its Width side faces the Orientation Azimuth parameter (i.e. the Depth side is parallel to the Orientation Azimuth).
459
Center
460
Width
461
The Width (in meters) of the Rectangle.
462
Depth
463
The Depth (in meters) of the Rectangle.
464
Orientation
465
The Azimuth of the Depth dimention.
466
Polygon Right Part
467
Returns a Polygon that is the part of the specified Polygon (parameter) that resides in the right part of the plane - as divided by the DividerLine parameter. Left and right are relative to the DividerLine direction - from its 1st Point to its 2nd Point. If the entire Polygon resides in the left part of the divided plane - a Null (empty) Polygon is returned.
468
Polygon Add
469
Returns a Polygon that is the union of two Polygons. If the two Polygons do not overlap at all - the result is obtained by adding a zero width "bridge" that connects the two Polygons  between two vertexes - to form the union Polygon. The location of the "bridge" is selected so that it doesn't intersect any of the two Polygons.
For example: if Polygon1 is a triangle A1,B1,C1 and Polygon2 is a triangle A2,B2,C2 and the Polygons do not overlap at all and the line B1-C2 is the first vertex-connecting line that does not intersect any of the two Polygons, the returned Polygon is B1,C1,A1,B1,C2,A2,B2,C2 (with C2-B1 naturally being the last edge that closes the Polygon).
Note that for this purpose, tangent Polygons are considered to be partially overlapping, i.e. no "bridge" is required to connect them.
470
Polygon1
471
Polygon2
472
Triangle
473
Returns a triangular Polygon based on the three Vertex parameters.
474
Vertex 1
475
Vertex 2
476
Vertex 3
477
Polygon Center
478
Returns the Point which is the center of gravity of the specified Polygon parameter. Note that the returned Polygon's center point could be outside the specified Polygon.
479
Polygon Area
480
Returns the area of the specified Polygon, in square Kilometers.
481
Point Inside Polygon
482
Returns "true" if the specified Point is inside the specified Polygon (parameters). For this purpose, all Points located on the perimeter of the Polygon are considered inside the Polygon.
483
Polygon Subtract
484
Returns a Polygon which is the result of subtracting Polygon2 from Polygon1.
If Polygon2 entirely covers Polygon1 - a null (empty) polygon is returned.
If subtraction yields more than one polygon - the one with the largest area (see PolygonArea) is returned.
485
Polygon Longest Crossing Line
486
Returns the longest line that crosses the specified Polygon (hereinafter P) and is completely inside it, i.e. the longest line L that satisfies the following conditions:
- Both end points of L are located on the perimeter of P.
- All other points of L are "truly inside" P, i.e are inside P but not on P's perimeter.
Note: the following possible implementation is somewhat inaccurate but cosidered to be good enough:
- Allocate N equally spaced points (p1,p2...pN) on P's perimeter, with N chosen according to performance limitations (e.g. N = 15).
- Check each possible line between points pi and pj (i != j) to see whether it is truly inside P.
- Return the longest line among all lines found to be truly inside P.
487
Polygon Contained Polyline
488
Returns a Polyline that is based on the specified Polyline, with external segments (segments passing outside the specified Polygon) replaced by Polygon perimeter segments. The returned Polyline is thus fully contained inside the Polygon. For this purpose all points on the perimeter of the specified Polygon are considered to be inside it.
The specified Polyline is assumed to start and end inside the specified Polygon. If this is not the case - a Null Polyline is returned.
An external segment of the specified Polyline is a segment that starts at point Ps - where the Polyline exits the Polygon, and ends at point Pe - where the Polyline reenters the Polygon. Each external segment is replaced by a Polygon perimeter segment Ps...Pe that is the shorter of the two (forward/backwards along the Polygon perimeter).
489
Ellipse Center
490
Returns the center of an Ellipse.
491
Ellipse
492
Ellipse Diameter
493
Returns the diameter (Line) of the specified Ellipse (parameter) in the specified Azimuth (parameter). A diameter is a Line that crosses the Ellipse's center and whose two Points are on the Ellipse's perimeter. The Azimuth of the returned diameter Line (from its 1st Point to its 2nd Point) is specified by the Azimuth parameter.
494
Ellipse Shortest Diameter
495
Returns the shortest diameter (Line) of the specified Ellipse (parameter). A diameter is a Line that crosses the Ellipse's center and whose two Points are on the Ellipse's perimeter. The order of the two Points in the returned Line is arbitrary.
496
Ellipse Bounding Polygon
497
Returns the smallest Ellipse that bounds the specified Polygon parameter.
If the specified Polygon is an EmptyPolygon - a NullEllipse is returned.
498
Returns an Ellipse based on its specified  Width, Depth, Center and Orientation (parameters). The Orientation of the Ellipse is the Azimuth of its specified Depth dimension.
499
The Width (in meters) of the Ellipse.
500
The Depth (in meters) of the Ellipse.
501
Ellipse Equals
502
Returns True if the two Ellipse parameters are Equal.
503
Ellipse 1
504
Ellipse 2
505
Null Ellipse
506
Returns a Null Ellipse, which is a Ellipse that does not exist. Used for designating a "missing" Ellipse value.
507
Intersection Point
508
Returns the Point of intersection of the Line1 parameter and the Line2 parameter. The two Line parameters are considered endless, i.e. the intersection Point does not have to be on either one of them. If the two Lines are parallel, the Null (empty) Point is returned.
509
Polygon Crossing Point
510
Returns the first Point where the Line parameter crosses (intersects) the Polygon Parameter, when advancing from the 1st Point of the Line parameter towards its 2nd Point. If the Line and the Polygon do not intersect, a null (empty) Point is returned.
511
Polyline Ellipse Intersection Point
512
Returns the first intersection Point between the Polyline (parameter) and the Ellipse (parameter). The search advances along the Polyline parameter, starting from its 1st Point. If the Polyline and the Ellipse do not intersect, a null (empty) Point is returned.
513
Polylines Intersection Point
514
Returns the first Point along the first Polyline which is intersected by the second Polyline. If the two Polylines do not intersect, a Null Point is returned.
515
The Second Polyline.
516
Polyline Circle Intersection Percentage
517
Returns the percentage (0-100) of the specified Polyline that passes inside a circle defined by the specified Center and Radius.
Note that since the Polyline may enter and exit the circle several times, an accurate geometrical computation is not trivial. The following alternative computation method is considered a valid approximation:
- The result is based on sampling N equally spaced points along the Polyline, where N is relatively small (e.g. 25).
- Given that the Polyline length is L, the distance between the points is L/(N-1) since the first and last points of the Polyline are of course included in the sample.
- The result is 100*I/N where I is the number of sampled points that are located inside the circle (i.e. whose distance from the specified Center is not greater than the specified Radius).
518
Radius
519
Polygons Intersection
520
Returns the area common to both Polygon1 and Polygon2.
If Polygon1 and Polygon2 do not intersect - an EmptyPolygon is returned.
521
Null Unit
522
Returns a Null Unit, which is a Unit that does not exist. Used for designating a "missing" Unit value.
523
Unit Equals
524
Returns "true" if Unit1 and Unit2 (parameters) are the same Unit.
525
Unit1
526
Unit2
527
Empty Unit Collection
528
Returns an empty Unit Collection.
529
Unit As Collection
530
Returns a Unit Collection that contains the specified Unit parameter.
531
Unit
532
Unit Collection Count
533
Returns the number of Units in the specified UnitCollection parameter.
534
Unit Collection
535
Unit in Collection
536
Returns a Unit of the specified Collection parameter that correspond to the specified Index parameter (1-based).
If the specified Index is outside the bounds of the Collection - an Exception is thrown.
537
Collection
538
Unit Index in Collection
539
Returns the index (1-based) of the first appearance of the specified Unit in the specified Collection.
If the specified Unit does not appear in the specified Collection - NullInteget is returned.
540
Append Units to Collection
541
Returns a collection containing all Units of the specified UnitCollection1 followed by all Units of the specified UnitCollection2.
542
Unit Collection 1
543
Unit Collection 2
544
Remove Units From Collection
545
Returns a collection of all Units of the specified UnitCollection that are not included in the specified RemovedUnits collection.
546
Removed Units
547
Unit Collection Head
548
Returns a collection containing the first HeadSize elements of the specified UnitCollection.
If the specified HeadSize is greater than the number of elements in the specified UnitCollection - the entire UnitCollection is returned.
549
UnitCollection
550
Head Size
551
Unit Collection Shuffled
552
Returns a collection containing the units of the specified UnitCollection in random order.
553
Null Object
554
Returns a Null Object, which is an Object that does not exist. Used for designating a "missing" Object value.
555
Object Equals
556
Returns "true" if Object1 and Object2 (parameters) are the same Object.
557
Object1
558
Object2
559
Empty Object Collection
560
Returns an empty Object Collection.
561
Object As Collection
562
Returns an Object Collection that contains the specified Object parameter.
563
Object
564
Object Collection Count
565
Returns the number of Objects in the specified ObjectCollection parameter.
566
Object Collection
567
Object in Collection
568
Returns an Object of the specified Collection parameter that correspond to the specified Index parameter (1-based).
If the specified Index is outside the bounds of the Collection - an Exception is thrown.
569
Object Index in Collection
570
Returns the index (1-based) of the first appearance of the specified Object in the specified Collection.
If the specified Object does not appear in the specified Collection - NullInteget is returned.
571
Append Objects to Collection
572
Returns a collection containing all Objects of the specified ObjectCollection1 followed by all Objects of the specified ObjectCollection2.
573
Object Collection 1
574
Object Collection 2
575
Remove Objects From Collection
576
Returns a collection of all Objects of the specified ObjectCollection that are not included in the specified RemovedObjects collection.
Note: the order of objects in the specified ObjectCollection is maintained in the result.
577
Removed Objects
578
Object Collection Shuffled
579
Returns a collection containing the objects of the specified ObjectCollection in random order.
580
Null Task
581
Returns a Null Task, which is a Task that does not exist. Used for designating a "missing" Task value.
582
Task Equals
583
Returns "true" if Task1 and Task2 (parameters) are the same Task.
584
Task1
585
Task2
586
Task ID
587
Returns the Internal ID of the specified Task as a String value.
588
Task
589
Allocation
590
Returns an Allocation of the specified NativeType, Quantity and Duration.
591
Native Type
592
Quantity
593
Null Allocation
594
Returns a Null Allocation, which is a Allocation that does not exist. Used for designating a "missing" Allocation value.
595
Allocation Equals
596
Returns "true" if Allocation1 and Allocation2 (parameters) are equal.
597
Allocation 1
598
Allocation 2
599
Allocation Native Type
600
Returns the Native Type of the specified Allocation.
1045
Seconds
1046
Minutes
1047
Hours
1048
Days
1049
Boolean to Yes/No
1050
Returns the specified Boolean values as a YN_YesNo Enumeration value.
1051
Polyline From Line Safe
1052
Returns a Polyline whose points are copied from the Line parameter. If a Null Line is received - a Null Polyline is returned.
1053
Timespan to Minutes
1054
Returns the number of whole minutes in the specified Timespan parameter. If the specified Timespan parameter is a NullTimespan - NullInteger is returned.
1055
String to Integer
1056
Returns the numeric value represented by the specified String.
Examples:
- StringToInteger("00234.900") = 234
- StringToInteger("8706") = 8706
If the specified String does not represent a valid numeric value - Null Integer is returned.
1057
Kilometers Per Hour to Meters Per Second
1058
Returns the speed in Meters Per Second that is equivalent to the specified KilometersPerHour value.
1059
Kilometers Per Hour
1060
Meters Per Second to Kilometers Per Hour
1061
Returns the speed in Kilometers Per Hour  that is equivalent to the specified MetersPerSecond value.
1062
Meters Per Second
1063
Polygon From Polyline Accurate
1064
Returns a "Stripe" Polygon that is based on the specified Polyline parameter, whose width (in meters) is specified by the Width parameter. The Polyline parameter thus defines the central "backbone" of the "Stripe" Polygon.
If the specified IncludeSemiCircles is 'true' - the returned Polygon includes two rather accurate semi-circles around the first and last points of the specified Polyline parameter, so that it effectively contains all points whose distance from the specified Polyline is not higher than half the specified Width.
1065
IncludeSemiCircles
1066
Polygon From Polyline Approximate
1067
Returns a "Stripe" Polygon that is based on the specified Polyline parameter, whose width (in meters) is specified by the Width parameter. The Polyline parameter thus defines the central "backbone" of the "Stripe" Polygon.
If the specified IncludeSemiCircles is 'true' - the returned Polygon includes two approximate semi-circles around the first and last points of the specified Polyline parameter, so that it effectively contains all points whose distance from the specified Polyline is not higher than half the specified Width.
1068
Decimal Minute to Timespan
1069
Returns a Timespan value that is equivalent to the specified DecimalMinute - an integer representing a specific minute in a 24h day as a value between 0 - 2359.
For example:
- 1739 represents 17:39
- 125 represents 01:25.
1070
Decimal Minute
