<?xml version="1.0" ?>
<Entries>
  <Entry>
    <Key>1</Key>
    <Value>
      <English>Not</English>
    </Value>
  </Entry>
  <Entry>
    <Key>2</Key>
    <Value>
      <English>Returns "true" if the Boolean parameter is "false", and "false" if the Boolean parameter is "true".</English>
    </Value>
  </Entry>
  <Entry>
    <Key>3</Key>
    <Value>
      <English>Boolean</English>
    </Value>
  </Entry>
  <Entry>
    <Key>4</Key>
    <Value>
      <English>Integer Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>5</Key>
    <Value>
      <English>Returns "true" if the two Integer parameters are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>6</Key>
    <Value>
      <English>Int1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>7</Key>
    <Value>
      <English>Int2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>8</Key>
    <Value>
      <English>Integer Greater Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>9</Key>
    <Value>
      <English>Returns "true" if Int1 is greater than Int2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>10</Key>
    <Value>
      <English>Integer Less Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>11</Key>
    <Value>
      <English>Returns "true" if Int1 is less than Int2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>12</Key>
    <Value>
      <English>Integer Max</English>
    </Value>
  </Entry>
  <Entry>
    <Key>13</Key>
    <Value>
      <English>Returns the maximum between Int1 and Int2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>14</Key>
    <Value>
      <English>Integer Min</English>
    </Value>
  </Entry>
  <Entry>
    <Key>15</Key>
    <Value>
      <English>Returns the minimum between Int1 and Int2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>16</Key>
    <Value>
      <English>Integer Plus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>17</Key>
    <Value>
      <English>Returns (Int1 + Int2), i.e. the result of adding Int2 and Int1.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>18</Key>
    <Value>
      <English>Integer Minus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>19</Key>
    <Value>
      <English>Returns (Int1 - Int2), i.e. the result of subtracting Int2 from Int1.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>20</Key>
    <Value>
      <English>Integer Multiply</English>
    </Value>
  </Entry>
  <Entry>
    <Key>21</Key>
    <Value>
      <English>Returns the result of multiplying the Int1 parameter by the Int2 parameter (i.e. Int1*Int2).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>22</Key>
    <Value>
      <English>Integer Divide</English>
    </Value>
  </Entry>
  <Entry>
    <Key>23</Key>
    <Value>
      <English>Returns the result of dividing the Int1 parameter by the Int2 parameter (i.e. Int1/Int2).
If Int2 is zero - Null Integer is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>24</Key>
    <Value>
      <English>Random Integer</English>
    </Value>
  </Entry>
  <Entry>
    <Key>25</Key>
    <Value>
      <English>Returns a random Integer in the range 0 to some large positive number (implementation dependent) -  accessible through the RandomIntegerMax Function.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>26</Key>
    <Value>
      <English>Random Integer Max</English>
    </Value>
  </Entry>
  <Entry>
    <Key>27</Key>
    <Value>
      <English>Returns the highest possible integer that may be returned by the RandomInteger Function.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>28</Key>
    <Value>
      <English>Null Integer</English>
    </Value>
  </Entry>
  <Entry>
    <Key>29</Key>
    <Value>
      <English>Returns a Null Integer, which is an Integer that does not exist. Used for designating a "missing" Integer value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>30</Key>
    <Value>
      <English>Null Real</English>
    </Value>
  </Entry>
  <Entry>
    <Key>31</Key>
    <Value>
      <English>Returns a Null Real, which is a Real that does not exist. Used for designating a "missing" Real value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>32</Key>
    <Value>
      <English>Real Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>33</Key>
    <Value>
      <English>Returns "true" if the two Real parameters are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>34</Key>
    <Value>
      <English>Real1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>35</Key>
    <Value>
      <English>Real2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>36</Key>
    <Value>
      <English>Real Greater Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>37</Key>
    <Value>
      <English>Returns "true" if Real1 is greater than Real2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>38</Key>
    <Value>
      <English>Real Less Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>39</Key>
    <Value>
      <English>Returns "true" if Real1 is less than Real2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>40</Key>
    <Value>
      <English>Real Plus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>41</Key>
    <Value>
      <English>Returns the result of adding the Real1 parameter to the Real2 parameter (i.e. Real1+Real2).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>42</Key>
    <Value>
      <English>Real Divide</English>
    </Value>
  </Entry>
  <Entry>
    <Key>43</Key>
    <Value>
      <English>Returns the result of dividing the Real1 parameter by the Real2 parameter (i.e. Real1/Real2).
If Real2 is zero - Null Real is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>44</Key>
    <Value>
      <English>Real Multiply</English>
    </Value>
  </Entry>
  <Entry>
    <Key>45</Key>
    <Value>
      <English>Returns the result of multiplying the Real1 parameter by the Real2 parameter (i.e. Real1*Real2).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>46</Key>
    <Value>
      <English>Real Power</English>
    </Value>
  </Entry>
  <Entry>
    <Key>47</Key>
    <Value>
      <English>Returns the result of raising the specified  Base to the power of the specified Exponent.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>48</Key>
    <Value>
      <English>Base</English>
    </Value>
  </Entry>
  <Entry>
    <Key>49</Key>
    <Value>
      <English>Exponent</English>
    </Value>
  </Entry>
  <Entry>
    <Key>50</Key>
    <Value>
      <English>String Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>51</Key>
    <Value>
      <English>Returns "true" if the two String parameters are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>52</Key>
    <Value>
      <English>String1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>53</Key>
    <Value>
      <English>String2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>54</Key>
    <Value>
      <English>String Concatenate</English>
    </Value>
  </Entry>
  <Entry>
    <Key>55</Key>
    <Value>
      <English>Returns a String that is the result of concatenating String2 (parameter) to the end of String1 (parameter).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>56</Key>
    <Value>
      <English>Word in String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>57</Key>
    <Value>
      <English>Returns a word (sub-string) from the specified ParsedString. A word is a sequence of characters (possibly empty) that is delimited by the specified Separator character and/or by the start/end of the string. The index (1-based) of the required word is specified by WordIndex.
For example: given that Separator is "," (comma), the ParsedString "F 16,B-52 ,,,G8" contains 5 words. Word 2 is "B-52 " and word 4 is "" (empty string).
Note: if Separator contains more or less than one character or if WordIndex is greater than the number of words in the ParsedString - an Exception is thrown.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>58</Key>
    <Value>
      <English>Parsed String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>59</Key>
    <Value>
      <English>Separator</English>
    </Value>
  </Entry>
  <Entry>
    <Key>60</Key>
    <Value>
      <English>Word Index</English>
    </Value>
  </Entry>
  <Entry>
    <Key>61</Key>
    <Value>
      <English>Char Index in String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>62</Key>
    <Value>
      <English>Returns the index (1-based) in the specified String of the first character that appears in the specified SearchedCharacters string.
If the specified String doesn't contain any of the characters of the specified SearchedCharacters - a Null Integer is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>63</Key>
    <Value>
      <English>String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>64</Key>
    <Value>
      <English>Searched Charcters</English>
    </Value>
  </Entry>
  <Entry>
    <Key>65</Key>
    <Value>
      <English>Char Count in String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>66</Key>
    <Value>
      <English>Returns the number of characters in the specified String that appear in the specified SearchedCharacters string.
Examples:
CharCountInString("ABC ABC DEF", "AE") = 3
CharCountInString("ABC ABC DEF", "GB") = 2
CharCountInString("ABC ABC DEF", "M") = 0</English>
    </Value>
  </Entry>
  <Entry>
    <Key>67</Key>
    <Value>
      <English>Odd Char Index in String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>68</Key>
    <Value>
      <English>Returns the index (1-based) in the specified String of the first character that does not appears in the specified SearchedCharacters string.
If no such character is found - a Null Integer is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>69</Key>
    <Value>
      <English>Sub String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>70</Key>
    <Value>
      <English>Returns a portion of the specified String that starts at the specified StartIndex (1-based) and spans Length characters or until the end of the specified String - whichever comes first.
Examples:
- SubString("ABCDEF", 4, 10) = "DEF"
- SubString("ABCDEF", 1, 0) = "" (null/empty string)</English>
    </Value>
  </Entry>
  <Entry>
    <Key>71</Key>
    <Value>
      <English>Start Index</English>
    </Value>
  </Entry>
  <Entry>
    <Key>72</Key>
    <Value>
      <English>Length</English>
    </Value>
  </Entry>
  <Entry>
    <Key>73</Key>
    <Value>
      <English>String Length</English>
    </Value>
  </Entry>
  <Entry>
    <Key>74</Key>
    <Value>
      <English>Returns the number of characters in the specified String.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>75</Key>
    <Value>
      <English>Time Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>76</Key>
    <Value>
      <English>Returns "true" if the two Time parameters are Equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>77</Key>
    <Value>
      <English>Time 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>78</Key>
    <Value>
      <English>Time 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>79</Key>
    <Value>
      <English>Time Greater Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>80</Key>
    <Value>
      <English>Returns "true" if Time1 is greater than Time2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>81</Key>
    <Value>
      <English>Time Plus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>82</Key>
    <Value>
      <English>Returns the result of adding the TimeSpan parameter to the Time parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>83</Key>
    <Value>
      <English>Time</English>
    </Value>
  </Entry>
  <Entry>
    <Key>84</Key>
    <Value>
      <English>Time Span</English>
    </Value>
  </Entry>
  <Entry>
    <Key>85</Key>
    <Value>
      <English>Time Minus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>86</Key>
    <Value>
      <English>Returns the result of subtracting the TimeSpan parameter from the Time parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>87</Key>
    <Value>
      <English>Null Time</English>
    </Value>
  </Entry>
  <Entry>
    <Key>88</Key>
    <Value>
      <English>Returns a Null Time, which is a Time that does not exist. Used for designating a "missing" Time value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>89</Key>
    <Value>
      <English>Timespan Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>90</Key>
    <Value>
      <English>Returns True if the two Timespan parameters are Equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>91</Key>
    <Value>
      <English>Timespan 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>92</Key>
    <Value>
      <English>Timespan 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>93</Key>
    <Value>
      <English>Null Timespan</English>
    </Value>
  </Entry>
  <Entry>
    <Key>94</Key>
    <Value>
      <English>Returns a Null Timespan, which is a Timespan that does not exist. Used for designating a "missing" Timespan value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>95</Key>
    <Value>
      <English>Timespan</English>
    </Value>
  </Entry>
  <Entry>
    <Key>96</Key>
    <Value>
      <English>Returns an equivalent Timespan to the Duration (parameter) in seconds. (e.g. Timespan(85) = 00:00:01:25)</English>
    </Value>
  </Entry>
  <Entry>
    <Key>97</Key>
    <Value>
      <English>Duration</English>
    </Value>
  </Entry>
  <Entry>
    <Key>98</Key>
    <Value>
      <English>Timespan Greater Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>99</Key>
    <Value>
      <English>Returns "true" if Timespan1 is greater than Timespan2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>100</Key>
    <Value>
      <English>Timespan1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>101</Key>
    <Value>
      <English>Timespan2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>102</Key>
    <Value>
      <English>Time Difference</English>
    </Value>
  </Entry>
  <Entry>
    <Key>103</Key>
    <Value>
      <English>Returns the absolute difference between Time1 and Time2.
Note that TimeDifference(T1,T2) = TimeDifference(T2,T1) by definition.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>104</Key>
    <Value>
      <English>Hour</English>
    </Value>
  </Entry>
  <Entry>
    <Key>105</Key>
    <Value>
      <English>Returns the hour portion (hh) of the specified Time value, which is a value in the range 0-23.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>106</Key>
    <Value>
      <English>Minute</English>
    </Value>
  </Entry>
  <Entry>
    <Key>107</Key>
    <Value>
      <English>Returns the minute portion (mm) of the specified Time value, which is a value in the range 0-59.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>108</Key>
    <Value>
      <English>Second</English>
    </Value>
  </Entry>
  <Entry>
    <Key>109</Key>
    <Value>
      <English>Returns the second portion (ss) of the specified Time value, which is a value in the range 0-59.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>110</Key>
    <Value>
      <English>Enumeration Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>111</Key>
    <Value>
      <English>Returns "true" if the two Enumeration parameters are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>112</Key>
    <Value>
      <English>Enumeration1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>113</Key>
    <Value>
      <English>Enumeration2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>114</Key>
    <Value>
      <English>Is Kind of</English>
    </Value>
  </Entry>
  <Entry>
    <Key>115</Key>
    <Value>
      <English>Returns "true" if Enumeration1 (parameter) is a sub-type of (i.e. belongs to the hierarchy of Enumerations defined by) Enumeration2 (parameter).
Note that IsKindOf(E,E) is "true" for any Enumerations E by definition.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>116</Key>
    <Value>
      <English>Null Enumeration</English>
    </Value>
  </Entry>
  <Entry>
    <Key>117</Key>
    <Value>
      <English>Returns a Null Enumeration, which is an Enumeration that does not exist. Used for designating a "missing" Enumeration value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>118</Key>
    <Value>
      <English>Enumeration Children Count</English>
    </Value>
  </Entry>
  <Entry>
    <Key>119</Key>
    <Value>
      <English>Returns the number of child Enumerations under the specified Enumeration.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>120</Key>
    <Value>
      <English>Enumeration</English>
    </Value>
  </Entry>
  <Entry>
    <Key>121</Key>
    <Value>
      <English>Sequence Under Parent</English>
    </Value>
  </Entry>
  <Entry>
    <Key>122</Key>
    <Value>
      <English>Returns the child sequence number (1 based) of the specified Enumeration under its parent Enumeration. If the specified Enumeration has no parent Enumeration - a Null Integer is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>123</Key>
    <Value>
      <English>Enumeration By Sequence Under Parent</English>
    </Value>
  </Entry>
  <Entry>
    <Key>124</Key>
    <Value>
      <English>Returns the child Enumeration of the specified ParentEnumeration whose sequence under the parent is the specified Sequence.
Example: EnumerationBySequenceUnderParent(ES_ExecutionState, 2) = ES_Skipped.
If the specified ParentEnumeration has no child Enumeration with the specified Sequence - a Null enumeration is returned</English>
    </Value>
  </Entry>
  <Entry>
    <Key>125</Key>
    <Value>
      <English>Parent Enumeration</English>
    </Value>
  </Entry>
  <Entry>
    <Key>126</Key>
    <Value>
      <English>Sequence</English>
    </Value>
  </Entry>
  <Entry>
    <Key>127</Key>
    <Value>
      <English>Enumeration External ID</English>
    </Value>
  </Entry>
  <Entry>
    <Key>128</Key>
    <Value>
      <English>Returns the External ID associated with the specified Enumeration value. 
Note: External IDs are used for mapping Enumeration values to equivalent enumerated types (AKA Native Types) of the host simulation.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>129</Key>
    <Value>
      <English>Enumeration Display Name</English>
    </Value>
  </Entry>
  <Entry>
    <Key>130</Key>
    <Value>
      <English>Returns the Display Name associated with the specified Enumeration value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>131</Key>
    <Value>
      <English>Downcast to Yes/No</English>
    </Value>
  </Entry>
  <Entry>
    <Key>132</Key>
    <Value>
      <English>Converts the YesNo parameter that is received as a non-specific (Root) Enumeration, to a YN_YesNo (leaf) value.
If the received parameter is not a YN_YesNo leaf value - an InvalidDowncast Exception is thrown.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>133</Key>
    <Value>
      <English>Yes/No</English>
    </Value>
  </Entry>
  <Entry>
    <Key>134</Key>
    <Value>
      <English>Enumeration by External ID</English>
    </Value>
  </Entry>
  <Entry>
    <Key>135</Key>
    <Value>
      <English>Returns the Enumeration value whose External ID is the specified ExternalID. If no such Enumeration exists - a Null Enumeration is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>136</Key>
    <Value>
      <English>External ID</English>
    </Value>
  </Entry>
  <Entry>
    <Key>137</Key>
    <Value>
      <English>Sector</English>
    </Value>
  </Entry>
  <Entry>
    <Key>138</Key>
    <Value>
      <English>Returns a Sector whose middle Azimuth is the specified Direction and whose width is defined by the specified Angle.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>139</Key>
    <Value>
      <English>Direction</English>
    </Value>
  </Entry>
  <Entry>
    <Key>140</Key>
    <Value>
      <English>Angle</English>
    </Value>
  </Entry>
  <Entry>
    <Key>141</Key>
    <Value>
      <English>The width of the returned Sector.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>142</Key>
    <Value>
      <English>AzimuthOfLine</English>
    </Value>
  </Entry>
  <Entry>
    <Key>143</Key>
    <Value>
      <English>Returns the Azimuth of the Line parameter (from 1st Point to 2nd Point).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>144</Key>
    <Value>
      <English>Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>145</Key>
    <Value>
      <English>Reverse Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>146</Key>
    <Value>
      <English>Returns the reverse (opposite direction)  Azimuth of the given Azimuth parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>147</Key>
    <Value>
      <English>Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>148</Key>
    <Value>
      <English>AzimuthPlus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>149</Key>
    <Value>
      <English>Returns the sum of Azimuth1 and Azimuth2 parameters. Note that Azimuth is cyclic by nature, e.g.  Azimuth(150)+Azimuth(300) = Azimuth(90).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>150</Key>
    <Value>
      <English>Azimuth1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>151</Key>
    <Value>
      <English>Azimuth2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>152</Key>
    <Value>
      <English>Returns an Azimuth which is based on the Integer parameter. Note that the Integer parameter bay be negative and may be greater than 359. For example: Azimuth(-20) = Azimuth(340), Azimuth(1000) = Azimuth(280).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>153</Key>
    <Value>
      <English>Integer</English>
    </Value>
  </Entry>
  <Entry>
    <Key>154</Key>
    <Value>
      <English>AzimuthMinus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>155</Key>
    <Value>
      <English>Returns the difference between Azimuth1 and Azimuth2 parameters. Note that Azimuth is cyclic by nature, e.g.  Azimuth(150)-Azimuth(300) = Azimuth(-150) = Azimuth(210).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>156</Key>
    <Value>
      <English>Null Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>157</Key>
    <Value>
      <English>Returns a Null Azimuth, which is an Azimuth that does not exist. Used for designating a "missing" Azimuth value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>158</Key>
    <Value>
      <English>Point Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>159</Key>
    <Value>
      <English>Returns "true" if Point1 and Point2 (parameters) are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>160</Key>
    <Value>
      <English>Point1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>161</Key>
    <Value>
      <English>Point2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>162</Key>
    <Value>
      <English>Null Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>163</Key>
    <Value>
      <English>Returns a Null Point, which is a Point that does not exist. Used for designating a "missing" Point value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>164</Key>
    <Value>
      <English>Point Name</English>
    </Value>
  </Entry>
  <Entry>
    <Key>165</Key>
    <Value>
      <English>Returns the name of the specified Point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>166</Key>
    <Value>
      <English>Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>167</Key>
    <Value>
      <English>Point With Name</English>
    </Value>
  </Entry>
  <Entry>
    <Key>168</Key>
    <Value>
      <English>Returns a Point that is based on the specified Point and has the specified Name as its name.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>169</Key>
    <Value>
      <English>Name</English>
    </Value>
  </Entry>
  <Entry>
    <Key>170</Key>
    <Value>
      <English>PointOnAzimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>171</Key>
    <Value>
      <English>Returns a Point that is in the specified Distance (parameter) from the Origin parameter, and in the specified Azimuth (parameter) from the Origin parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>172</Key>
    <Value>
      <English>Origin</English>
    </Value>
  </Entry>
  <Entry>
    <Key>173</Key>
    <Value>
      <English>Distance</English>
    </Value>
  </Entry>
  <Entry>
    <Key>174</Key>
    <Value>
      <English>Distance in meters from the Origin Point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>175</Key>
    <Value>
      <English>Azimuth from the Origin Point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>176</Key>
    <Value>
      <English>Returns the Line which is defined by the two Point arguments .</English>
    </Value>
  </Entry>
  <Entry>
    <Key>177</Key>
    <Value>
      <English>Null Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>178</Key>
    <Value>
      <English>Returns a Null Line, which is a Line that does not exist (made up of two Null Points). Used for designating a "missing" Line value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>179</Key>
    <Value>
      <English>Line Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>180</Key>
    <Value>
      <English>Returns "true" if Line1 and Line2 (parameters) are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>181</Key>
    <Value>
      <English>Line 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>182</Key>
    <Value>
      <English>Line 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>183</Key>
    <Value>
      <English>Line Left Perpendicular</English>
    </Value>
  </Entry>
  <Entry>
    <Key>184</Key>
    <Value>
      <English>Returns a Line which is perpendicular to the Line parameter and has the same length. The returned Line's 1st Point is the Line parameter's 2nd Point, and its 2nd Point is to the left of the Line parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>185</Key>
    <Value>
      <English>Line Right Perpendicular</English>
    </Value>
  </Entry>
  <Entry>
    <Key>186</Key>
    <Value>
      <English>Returns a Line which is perpendicular to the Line parameter and has the same length. The returned Line's 1st Point is the Line parameter's 2nd Point, and its 2nd Point is to the right of the Line parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>187</Key>
    <Value>
      <English>Line Length</English>
    </Value>
  </Entry>
  <Entry>
    <Key>188</Key>
    <Value>
      <English>Returns the length (in meters) of the input Line parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>189</Key>
    <Value>
      <English>Point On Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>190</Key>
    <Value>
      <English>Returns a Point on the Line parameter whose distance from the 1st Point of the Line is OffsetPercent (0..100) of the Line's length.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>191</Key>
    <Value>
      <English>Offset Percent</English>
    </Value>
  </Entry>
  <Entry>
    <Key>192</Key>
    <Value>
      <English>Is Point on Right Side</English>
    </Value>
  </Entry>
  <Entry>
    <Key>193</Key>
    <Value>
      <English>Returns true if the Point parameter is on the right side of the Line parameter. Left and right are determined relative to the direction of the Line (from its 1st Point to its 2nd Point).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>194</Key>
    <Value>
      <English>Reverse Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>195</Key>
    <Value>
      <English>Returns a Line that contains the Points of the Line parameter in reverse order.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>196</Key>
    <Value>
      <English>Polyline Length</English>
    </Value>
  </Entry>
  <Entry>
    <Key>197</Key>
    <Value>
      <English>Returns the length (in meters) of the input Polyline parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>198</Key>
    <Value>
      <English>Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>199</Key>
    <Value>
      <English>Polyline Name</English>
    </Value>
  </Entry>
  <Entry>
    <Key>200</Key>
    <Value>
      <English>Returns the name of the specified Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>201</Key>
    <Value>
      <English>Polyline Number of Points</English>
    </Value>
  </Entry>
  <Entry>
    <Key>202</Key>
    <Value>
      <English>Returns the number of points (vertices) of the specified Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>203</Key>
    <Value>
      <English>Polyline Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>204</Key>
    <Value>
      <English>Returns the point (vertex) of the specified Polygon that corresponds to the specified Index (1-based).
If the specified Index is less than one or greater than the number of points in the specified Polyline - an Exception is thrown. </English>
    </Value>
  </Entry>
  <Entry>
    <Key>205</Key>
    <Value>
      <English>Index</English>
    </Value>
  </Entry>
  <Entry>
    <Key>206</Key>
    <Value>
      <English>Polyline Last Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>207</Key>
    <Value>
      <English>Returns the last Point of the Polyline parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>208</Key>
    <Value>
      <English>Polyline Farthest Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>209</Key>
    <Value>
      <English>Returns the point on the specified Polyline that is farhest from the specified Point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>210</Key>
    <Value>
      <English>Snap To Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>211</Key>
    <Value>
      <English>Returns the Point on the specified Polyline parameter, which is closest (geometrically) to the specified Point parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>212</Key>
    <Value>
      <English>Trimmed Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>213</Key>
    <Value>
      <English>Returns a Polyline which is the middle part of the input Polyline parameter. The TrimFromStart and TrimFromEnd parameters, specify the length (in meters) which should be trimmed from each side of the input Polyline. Note that when the sum TrimFromStart+TrimFromEnd is greater than the input Polyline length, the returned Polyline is empty (have no Points).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>214</Key>
    <Value>
      <English>The input Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>215</Key>
    <Value>
      <English>Trim From Start</English>
    </Value>
  </Entry>
  <Entry>
    <Key>216</Key>
    <Value>
      <English>The distance (in meters) which should be trimmed from the start of the Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>217</Key>
    <Value>
      <English>Trim From End</English>
    </Value>
  </Entry>
  <Entry>
    <Key>218</Key>
    <Value>
      <English>The distance (in meters) which should be trimmed from the end of the Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>219</Key>
    <Value>
      <English>Trim Polyline Between Points</English>
    </Value>
  </Entry>
  <Entry>
    <Key>220</Key>
    <Value>
      <English>Returns the middle part of a specified Polyline (parameter), which starts at the specified StartPoint parameter - snapped to the specified Polyline, and ends at the specified EndPoint parameter - also snapped to the specified Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>221</Key>
    <Value>
      <English>Start Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>222</Key>
    <Value>
      <English>End Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>223</Key>
    <Value>
      <English>Loops Trimmed Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>224</Key>
    <Value>
      <English>Returns a Polyline that is based on the specified Polyline, with loops trimmed/eliminated.
A loop is a section of a self intersecting Polyline that starts and ends at the same [self intersection] point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>225</Key>
    <Value>
      <English>Reverse Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>226</Key>
    <Value>
      <English>Returns a Polyline which contains the Points of the Polyline parameter in reverse order.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>227</Key>
    <Value>
      <English>Parallel Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>228</Key>
    <Value>
      <English>Returns a Polyline that is parallel to the specified Polyline, in the specified Offset from it - to the right (positive Offset value) or left (negative Offset value).
The returned Polyline does not intersect itself, i.e "loops" that may be formed in the process of creating it are all trimmed.
Since the returned Polyline may contain arcs, the resolution for their approximation is defined by CircleNumberOfPoints, e.g. CircleNumberOfPoints = 60 means that a 90 degree arc should be approximated by 15 points.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>229</Key>
    <Value>
      <English>Offset</English>
    </Value>
  </Entry>
  <Entry>
    <Key>230</Key>
    <Value>
      <English>Circle Number of Points</English>
    </Value>
  </Entry>
  <Entry>
    <Key>231</Key>
    <Value>
      <English>Polyline Add</English>
    </Value>
  </Entry>
  <Entry>
    <Key>232</Key>
    <Value>
      <English>Returns a Polyline resulting from joining Polyline1 and Polyline2 (parameters). The returned Polyline is comprised of all Polyline1 Points, followed by all Polyline2 Points. If the first Point of Polyine2 is identical to the last Point of Polyline1 - it is omitted from the returned Polyline to prevent redundancy.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>233</Key>
    <Value>
      <English>Polyline1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>234</Key>
    <Value>
      <English>Polyline2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>235</Key>
    <Value>
      <English>Null Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>236</Key>
    <Value>
      <English>Returns a Null Polyline, which is a Polyline that does not exist. Used for designating a "missing" Polyline value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>237</Key>
    <Value>
      <English>Polyline Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>238</Key>
    <Value>
      <English>Returns "true" if Polyline1 and Polyline2 (parameters) are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>239</Key>
    <Value>
      <English>Polyline 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>240</Key>
    <Value>
      <English>Polyline 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>241</Key>
    <Value>
      <English>Polyline Edge</English>
    </Value>
  </Entry>
  <Entry>
    <Key>242</Key>
    <Value>
      <English>Returns the edge of the specified Polyline on which the specified Point (snapped to the Polyline) resides.
Note: an edge of a Polyline is a line that connects two adjacent vertices.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>243</Key>
    <Value>
      <English>Polygon Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>244</Key>
    <Value>
      <English>Returns "true" if Polygon1 and Polygon2 (parameters) are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>245</Key>
    <Value>
      <English>Polygon 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>246</Key>
    <Value>
      <English>Polygon 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>247</Key>
    <Value>
      <English>Empty Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>248</Key>
    <Value>
      <English>Returns an empty Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>249</Key>
    <Value>
      <English>Polygon Name</English>
    </Value>
  </Entry>
  <Entry>
    <Key>250</Key>
    <Value>
      <English>Returns the name of the specified Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>251</Key>
    <Value>
      <English>Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>252</Key>
    <Value>
      <English>Polygon With Name</English>
    </Value>
  </Entry>
  <Entry>
    <Key>253</Key>
    <Value>
      <English>Returns a Polygon that is based on the specified Polygon and has the specified Name as its name.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>254</Key>
    <Value>
      <English>Polygon Left Part</English>
    </Value>
  </Entry>
  <Entry>
    <Key>255</Key>
    <Value>
      <English>Returns a Polygon that is the part of the specified Polygon (parameter) that resides in the left part of the plane - as divided by the DividerLine parameter. Left and right are relative to the DividerLine direction - from its 1st Point to its 2nd Point. If the entire Polygon resides in the right part of the divided plane - a Null (empty) Polygon is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>256</Key>
    <Value>
      <English>Divider Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>257</Key>
    <Value>
      <English>Rectangle</English>
    </Value>
  </Entry>
  <Entry>
    <Key>258</Key>
    <Value>
      <English>Returns a Rectangular Polygon. The center of the Rectangle is specified by the Center parameter. The Width and Depth parameters specify the dimensions of the Rectangle sides. The Rectangle is aligned so that its Width side faces the Orientation Azimuth parameter (i.e. the Depth side is parallel to the Orientation Azimuth).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>259</Key>
    <Value>
      <English>Center</English>
    </Value>
  </Entry>
  <Entry>
    <Key>260</Key>
    <Value>
      <English>Width</English>
    </Value>
  </Entry>
  <Entry>
    <Key>261</Key>
    <Value>
      <English>The Width (in meters) of the Rectangle.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>262</Key>
    <Value>
      <English>Depth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>263</Key>
    <Value>
      <English>The Depth (in meters) of the Rectangle.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>264</Key>
    <Value>
      <English>Orientation</English>
    </Value>
  </Entry>
  <Entry>
    <Key>265</Key>
    <Value>
      <English>The Azimuth of the Depth dimention.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>266</Key>
    <Value>
      <English>Polygon Right Part</English>
    </Value>
  </Entry>
  <Entry>
    <Key>267</Key>
    <Value>
      <English>Returns a Polygon that is the part of the specified Polygon (parameter) that resides in the right part of the plane - as divided by the DividerLine parameter. Left and right are relative to the DividerLine direction - from its 1st Point to its 2nd Point. If the entire Polygon resides in the left part of the divided plane - a Null (empty) Polygon is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>268</Key>
    <Value>
      <English>Polygon Add</English>
    </Value>
  </Entry>
  <Entry>
    <Key>269</Key>
    <Value>
      <English>Returns a Polygon that is the union of two Polygons. If the two Polygons do not overlap at all - the result is obtained by adding a zero width "bridge" that connects the two Polygons  between two vertexes - to form the union Polygon. The location of the "bridge" is selected so that it doesn't intersect any of the two Polygons.
For example: if Polygon1 is a triangle A1,B1,C1 and Polygon2 is a triangle A2,B2,C2 and the Polygons do not overlap at all and the line B1-C2 is the first vertex-connecting line that does not intersect any of the two Polygons, the returned Polygon is B1,C1,A1,B1,C2,A2,B2,C2 (with C2-B1 naturally being the last edge that closes the Polygon).
Note that for this purpose, tangent Polygons are considered to be partially overlapping, i.e. no "bridge" is required to connect them.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>270</Key>
    <Value>
      <English>Polygon1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>271</Key>
    <Value>
      <English>Polygon2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>272</Key>
    <Value>
      <English>Triangle</English>
    </Value>
  </Entry>
  <Entry>
    <Key>273</Key>
    <Value>
      <English>Returns a triangular Polygon based on the three Vertex parameters.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>274</Key>
    <Value>
      <English>Vertex 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>275</Key>
    <Value>
      <English>Vertex 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>276</Key>
    <Value>
      <English>Vertex 3</English>
    </Value>
  </Entry>
  <Entry>
    <Key>277</Key>
    <Value>
      <English>Polygon Center</English>
    </Value>
  </Entry>
  <Entry>
    <Key>278</Key>
    <Value>
      <English>Returns the Point which is the center of gravity of the specified Polygon parameter. Note that the returned Polygon's center point could be outside the specified Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>279</Key>
    <Value>
      <English>Polygon Area</English>
    </Value>
  </Entry>
  <Entry>
    <Key>280</Key>
    <Value>
      <English>Returns the area of the specified Polygon, in square Kilometers.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>281</Key>
    <Value>
      <English>Point Inside Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>282</Key>
    <Value>
      <English>Returns "true" if the specified Point is inside the specified Polygon (parameters). For this purpose, all Points located on the perimeter of the Polygon are considered inside the Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>283</Key>
    <Value>
      <English>Polygon Subtract</English>
    </Value>
  </Entry>
  <Entry>
    <Key>284</Key>
    <Value>
      <English>Returns a Polygon which is the result of subtracting Polygon2 from Polygon1.
If Polygon2 entirely covers Polygon1 - a null (empty) polygon is returned.
If subtraction yields more than one polygon - the one with the largest area (see PolygonArea) is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>285</Key>
    <Value>
      <English>Polygon Longest Crossing Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>286</Key>
    <Value>
      <English>Returns the longest line that crosses the specified Polygon (hereinafter P) and is completely inside it, i.e. the longest line L that satisfies the following conditions:
- Both end points of L are located on the perimeter of P.
- All other points of L are "truly inside" P, i.e are inside P but not on P's perimeter.
Note: the following possible implementation is somewhat inaccurate but cosidered to be good enough:
- Allocate N equally spaced points (p1,p2...pN) on P's perimeter, with N chosen according to performance limitations (e.g. N = 15).
- Check each possible line between points pi and pj (i != j) to see whether it is truly inside P.
- Return the longest line among all lines found to be truly inside P.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>287</Key>
    <Value>
      <English>Polygon Contained Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>288</Key>
    <Value>
      <English>Returns a Polyline that is based on the specified Polyline, with external segments (segments passing outside the specified Polygon) replaced by Polygon perimeter segments. The returned Polyline is thus fully contained inside the Polygon. For this purpose all points on the perimeter of the specified Polygon are considered to be inside it.
The specified Polyline is assumed to start and end inside the specified Polygon. If this is not the case - a Null Polyline is returned.
An external segment of the specified Polyline is a segment that starts at point Ps - where the Polyline exits the Polygon, and ends at point Pe - where the Polyline reenters the Polygon. Each external segment is replaced by a Polygon perimeter segment Ps...Pe that is the shorter of the two (forward/backwards along the Polygon perimeter).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>289</Key>
    <Value>
      <English>Ellipse Center</English>
    </Value>
  </Entry>
  <Entry>
    <Key>290</Key>
    <Value>
      <English>Returns the center of an Ellipse.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>291</Key>
    <Value>
      <English>Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>292</Key>
    <Value>
      <English>Ellipse Diameter</English>
    </Value>
  </Entry>
  <Entry>
    <Key>293</Key>
    <Value>
      <English>Returns the diameter (Line) of the specified Ellipse (parameter) in the specified Azimuth (parameter). A diameter is a Line that crosses the Ellipse's center and whose two Points are on the Ellipse's perimeter. The Azimuth of the returned diameter Line (from its 1st Point to its 2nd Point) is specified by the Azimuth parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>294</Key>
    <Value>
      <English>Ellipse Shortest Diameter</English>
    </Value>
  </Entry>
  <Entry>
    <Key>295</Key>
    <Value>
      <English>Returns the shortest diameter (Line) of the specified Ellipse (parameter). A diameter is a Line that crosses the Ellipse's center and whose two Points are on the Ellipse's perimeter. The order of the two Points in the returned Line is arbitrary.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>296</Key>
    <Value>
      <English>Ellipse Bounding Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>297</Key>
    <Value>
      <English>Returns the smallest Ellipse that bounds the specified Polygon parameter.
If the specified Polygon is an EmptyPolygon - a NullEllipse is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>298</Key>
    <Value>
      <English>Returns an Ellipse based on its specified  Width, Depth, Center and Orientation (parameters). The Orientation of the Ellipse is the Azimuth of its specified Depth dimension.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>299</Key>
    <Value>
      <English>The Width (in meters) of the Ellipse.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>300</Key>
    <Value>
      <English>The Depth (in meters) of the Ellipse.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>301</Key>
    <Value>
      <English>Ellipse Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>302</Key>
    <Value>
      <English>Returns True if the two Ellipse parameters are Equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>303</Key>
    <Value>
      <English>Ellipse 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>304</Key>
    <Value>
      <English>Ellipse 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>305</Key>
    <Value>
      <English>Null Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>306</Key>
    <Value>
      <English>Returns a Null Ellipse, which is a Ellipse that does not exist. Used for designating a "missing" Ellipse value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>307</Key>
    <Value>
      <English>Intersection Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>308</Key>
    <Value>
      <English>Returns the Point of intersection of the Line1 parameter and the Line2 parameter. The two Line parameters are considered endless, i.e. the intersection Point does not have to be on either one of them. If the two Lines are parallel, the Null (empty) Point is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>309</Key>
    <Value>
      <English>Polygon Crossing Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>310</Key>
    <Value>
      <English>Returns the first Point where the Line parameter crosses (intersects) the Polygon Parameter, when advancing from the 1st Point of the Line parameter towards its 2nd Point. If the Line and the Polygon do not intersect, a null (empty) Point is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>311</Key>
    <Value>
      <English>Polyline Ellipse Intersection Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>312</Key>
    <Value>
      <English>Returns the first intersection Point between the Polyline (parameter) and the Ellipse (parameter). The search advances along the Polyline parameter, starting from its 1st Point. If the Polyline and the Ellipse do not intersect, a null (empty) Point is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>313</Key>
    <Value>
      <English>Polylines Intersection Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>314</Key>
    <Value>
      <English>Returns the first Point along the first Polyline which is intersected by the second Polyline. If the two Polylines do not intersect, a Null Point is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>315</Key>
    <Value>
      <English>The Second Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>316</Key>
    <Value>
      <English>Polyline Circle Intersection Percentage</English>
    </Value>
  </Entry>
  <Entry>
    <Key>317</Key>
    <Value>
      <English>Returns the percentage (0-100) of the specified Polyline that passes inside a circle defined by the specified Center and Radius.
Note that since the Polyline may enter and exit the circle several times, an accurate geometrical computation is not trivial. The following alternative computation method is considered a valid approximation:
- The result is based on sampling N equally spaced points along the Polyline, where N is relatively small (e.g. 25).
- Given that the Polyline length is L, the distance between the points is L/(N-1) since the first and last points of the Polyline are of course included in the sample.
- The result is 100*I/N where I is the number of sampled points that are located inside the circle (i.e. whose distance from the specified Center is not greater than the specified Radius).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>318</Key>
    <Value>
      <English>Radius</English>
    </Value>
  </Entry>
  <Entry>
    <Key>319</Key>
    <Value>
      <English>Polygons Intersection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>320</Key>
    <Value>
      <English>Returns the area common to both Polygon1 and Polygon2.
If Polygon1 and Polygon2 do not intersect - an EmptyPolygon is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>321</Key>
    <Value>
      <English>Null Unit</English>
    </Value>
  </Entry>
  <Entry>
    <Key>322</Key>
    <Value>
      <English>Returns a Null Unit, which is a Unit that does not exist. Used for designating a "missing" Unit value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>323</Key>
    <Value>
      <English>Unit Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>324</Key>
    <Value>
      <English>Returns "true" if Unit1 and Unit2 (parameters) are the same Unit.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>325</Key>
    <Value>
      <English>Unit1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>326</Key>
    <Value>
      <English>Unit2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>327</Key>
    <Value>
      <English>Empty Unit Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>328</Key>
    <Value>
      <English>Returns an empty Unit Collection.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>329</Key>
    <Value>
      <English>Unit As Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>330</Key>
    <Value>
      <English>Returns a Unit Collection that contains the specified Unit parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>331</Key>
    <Value>
      <English>Unit</English>
    </Value>
  </Entry>
  <Entry>
    <Key>332</Key>
    <Value>
      <English>Unit Collection Count</English>
    </Value>
  </Entry>
  <Entry>
    <Key>333</Key>
    <Value>
      <English>Returns the number of Units in the specified UnitCollection parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>334</Key>
    <Value>
      <English>Unit Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>335</Key>
    <Value>
      <English>Unit in Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>336</Key>
    <Value>
      <English>Returns a Unit of the specified Collection parameter that correspond to the specified Index parameter (1-based).
If the specified Index is outside the bounds of the Collection - an Exception is thrown.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>337</Key>
    <Value>
      <English>Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>338</Key>
    <Value>
      <English>Unit Index in Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>339</Key>
    <Value>
      <English>Returns the index (1-based) of the first appearance of the specified Unit in the specified Collection.
If the specified Unit does not appear in the specified Collection - NullInteget is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>340</Key>
    <Value>
      <English>Append Units to Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>341</Key>
    <Value>
      <English>Returns a collection containing all Units of the specified UnitCollection1 followed by all Units of the specified UnitCollection2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>342</Key>
    <Value>
      <English>Unit Collection 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>343</Key>
    <Value>
      <English>Unit Collection 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>344</Key>
    <Value>
      <English>Remove Units From Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>345</Key>
    <Value>
      <English>Returns a collection of all Units of the specified UnitCollection that are not included in the specified RemovedUnits collection.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>346</Key>
    <Value>
      <English>Removed Units</English>
    </Value>
  </Entry>
  <Entry>
    <Key>347</Key>
    <Value>
      <English>Unit Collection Head</English>
    </Value>
  </Entry>
  <Entry>
    <Key>348</Key>
    <Value>
      <English>Returns a collection containing the first HeadSize elements of the specified UnitCollection.
If the specified HeadSize is greater than the number of elements in the specified UnitCollection - the entire UnitCollection is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>349</Key>
    <Value>
      <English>UnitCollection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>350</Key>
    <Value>
      <English>Head Size</English>
    </Value>
  </Entry>
  <Entry>
    <Key>351</Key>
    <Value>
      <English>Unit Collection Shuffled</English>
    </Value>
  </Entry>
  <Entry>
    <Key>352</Key>
    <Value>
      <English>Returns a collection containing the units of the specified UnitCollection in random order.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>353</Key>
    <Value>
      <English>Null Object</English>
    </Value>
  </Entry>
  <Entry>
    <Key>354</Key>
    <Value>
      <English>Returns a Null Object, which is an Object that does not exist. Used for designating a "missing" Object value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>355</Key>
    <Value>
      <English>Object Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>356</Key>
    <Value>
      <English>Returns "true" if Object1 and Object2 (parameters) are the same Object.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>357</Key>
    <Value>
      <English>Object1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>358</Key>
    <Value>
      <English>Object2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>359</Key>
    <Value>
      <English>Empty Object Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>360</Key>
    <Value>
      <English>Returns an empty Object Collection.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>361</Key>
    <Value>
      <English>Object As Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>362</Key>
    <Value>
      <English>Returns an Object Collection that contains the specified Object parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>363</Key>
    <Value>
      <English>Object</English>
    </Value>
  </Entry>
  <Entry>
    <Key>364</Key>
    <Value>
      <English>Object Collection Count</English>
    </Value>
  </Entry>
  <Entry>
    <Key>365</Key>
    <Value>
      <English>Returns the number of Objects in the specified ObjectCollection parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>366</Key>
    <Value>
      <English>Object Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>367</Key>
    <Value>
      <English>Object in Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>368</Key>
    <Value>
      <English>Returns an Object of the specified Collection parameter that correspond to the specified Index parameter (1-based).
If the specified Index is outside the bounds of the Collection - an Exception is thrown.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>369</Key>
    <Value>
      <English>Object Index in Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>370</Key>
    <Value>
      <English>Returns the index (1-based) of the first appearance of the specified Object in the specified Collection.
If the specified Object does not appear in the specified Collection - NullInteget is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>371</Key>
    <Value>
      <English>Append Objects to Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>372</Key>
    <Value>
      <English>Returns a collection containing all Objects of the specified ObjectCollection1 followed by all Objects of the specified ObjectCollection2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>373</Key>
    <Value>
      <English>Object Collection 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>374</Key>
    <Value>
      <English>Object Collection 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>375</Key>
    <Value>
      <English>Remove Objects From Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>376</Key>
    <Value>
      <English>Returns a collection of all Objects of the specified ObjectCollection that are not included in the specified RemovedObjects collection.
Note: the order of objects in the specified ObjectCollection is maintained in the result.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>377</Key>
    <Value>
      <English>Removed Objects</English>
    </Value>
  </Entry>
  <Entry>
    <Key>378</Key>
    <Value>
      <English>Object Collection Shuffled</English>
    </Value>
  </Entry>
  <Entry>
    <Key>379</Key>
    <Value>
      <English>Returns a collection containing the objects of the specified ObjectCollection in random order.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>380</Key>
    <Value>
      <English>Null Task</English>
    </Value>
  </Entry>
  <Entry>
    <Key>381</Key>
    <Value>
      <English>Returns a Null Task, which is a Task that does not exist. Used for designating a "missing" Task value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>382</Key>
    <Value>
      <English>Task Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>383</Key>
    <Value>
      <English>Returns "true" if Task1 and Task2 (parameters) are the same Task.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>384</Key>
    <Value>
      <English>Task1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>385</Key>
    <Value>
      <English>Task2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>386</Key>
    <Value>
      <English>Task ID</English>
    </Value>
  </Entry>
  <Entry>
    <Key>387</Key>
    <Value>
      <English>Returns the Internal ID of the specified Task as a String value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>388</Key>
    <Value>
      <English>Task</English>
    </Value>
  </Entry>
  <Entry>
    <Key>389</Key>
    <Value>
      <English>Allocation</English>
    </Value>
  </Entry>
  <Entry>
    <Key>390</Key>
    <Value>
      <English>Returns an Allocation of the specified NativeType, Quantity and Duration.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>391</Key>
    <Value>
      <English>Native Type</English>
    </Value>
  </Entry>
  <Entry>
    <Key>392</Key>
    <Value>
      <English>Quantity</English>
    </Value>
  </Entry>
  <Entry>
    <Key>393</Key>
    <Value>
      <English>Null Allocation</English>
    </Value>
  </Entry>
  <Entry>
    <Key>394</Key>
    <Value>
      <English>Returns a Null Allocation, which is a Allocation that does not exist. Used for designating a "missing" Allocation value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>395</Key>
    <Value>
      <English>Allocation Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>396</Key>
    <Value>
      <English>Returns "true" if Allocation1 and Allocation2 (parameters) are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>397</Key>
    <Value>
      <English>Allocation 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>398</Key>
    <Value>
      <English>Allocation 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>399</Key>
    <Value>
      <English>Allocation Native Type</English>
    </Value>
  </Entry>
  <Entry>
    <Key>400</Key>
    <Value>
      <English>Returns the Native Type of the specified Allocation.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>401</Key>
    <Value>
      <English>Allocation Quantity</English>
    </Value>
  </Entry>
  <Entry>
    <Key>402</Key>
    <Value>
      <English>Returns the Quantity of the specified Allocation.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>403</Key>
    <Value>
      <English>Allocation Duration</English>
    </Value>
  </Entry>
  <Entry>
    <Key>404</Key>
    <Value>
      <English>Returns the Duration of the specified Allocation.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>405</Key>
    <Value>
      <English>Empty Allocation Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>406</Key>
    <Value>
      <English>Returns an empty Allocation Collection.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>407</Key>
    <Value>
      <English>Allocation As Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>408</Key>
    <Value>
      <English>Returns an Allocation Collection that contains the specified Allocation parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>409</Key>
    <Value>
      <English>Allocation Collection Count</English>
    </Value>
  </Entry>
  <Entry>
    <Key>410</Key>
    <Value>
      <English>Returns the number of Allocations in the specified AllocationCollection parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>411</Key>
    <Value>
      <English>Allocation Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>412</Key>
    <Value>
      <English>Allocation Collection Quantity</English>
    </Value>
  </Entry>
  <Entry>
    <Key>413</Key>
    <Value>
      <English>Returns the sum of Quantities (see AllocationQuantity Atomic Function) in all Allocations of the specified AllocationCollection.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>414</Key>
    <Value>
      <English>Allocation in Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>415</Key>
    <Value>
      <English>Returns an Allocation of the specified Collection parameter that correspond to the specified Index parameter (1-based).
If the specified Index is outside the bounds of the Collection - an Exception is thrown.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>416</Key>
    <Value>
      <English>Allocation Collection Intersection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>417</Key>
    <Value>
      <English>Returns the intersection between AllocationCollection1 and AllocationCollection2, i.e. a collection in which each Allocation Ai satisfies the following conditions (NativeType, Quantity and Duration properties of Ai are marked Ni, Qi, Di respectively):
- AllocationCollection1 contains an Allocation AC1j whose NativeType (see AllocationNativeType Atomic Function) is Ni.
- AllocationCollection2 contains an Allocation AC2k whose NativeType (see AllocationNativeType Atomic Function) is Ni.
- Qi is the minimum between the Quantities of AC1j and AC2k.
- Di is the minimum between the Durations of AC1j and  AC2k. If either AC1j or AC2k Duration is empty (equals Null Timespan) - Di is the non-empty of the two. If both are empty - Di is also empty.
If ExcludeZeroQuantity is true - Allocations for which Qi = 0 are excluded from the result collection.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>418</Key>
    <Value>
      <English>Allocation Collection1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>419</Key>
    <Value>
      <English>Allocation Collection2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>420</Key>
    <Value>
      <English>Exclude Zero Quantity</English>
    </Value>
  </Entry>
  <Entry>
    <Key>421</Key>
    <Value>
      <English>Allocation Collection Sorted by Quantity</English>
    </Value>
  </Entry>
  <Entry>
    <Key>422</Key>
    <Value>
      <English>Returns the Allocations of the specified AllocationCollection, sorted by their respective Quantity values (see AllocationQuantity Atomic Function) - from highest to lowest.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>423</Key>
    <Value>
      <English>Append Allocations to Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>424</Key>
    <Value>
      <English>Returns a collection containing all Allocations of the specified AllocationCollection1 followed by all Allocations of the specified AllocationCollection2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>425</Key>
    <Value>
      <English>Allocation Collection 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>426</Key>
    <Value>
      <English>Allocation Collection 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>427</Key>
    <Value>
      <English>Returns a NativeType that has the specified NativeTypeID.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>428</Key>
    <Value>
      <English>Native Type ID</English>
    </Value>
  </Entry>
  <Entry>
    <Key>429</Key>
    <Value>
      <English>Null Native Type</English>
    </Value>
  </Entry>
  <Entry>
    <Key>430</Key>
    <Value>
      <English>Returns a Null NativeType, which is a NativeType that does not exist. Used for designating a "missing" NativeType value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>431</Key>
    <Value>
      <English>Native Type Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>432</Key>
    <Value>
      <English>Returns "true" if NativeType1 and NativeType2 (parameters) are the same NativeType.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>433</Key>
    <Value>
      <English>NativeType1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>434</Key>
    <Value>
      <English>NativeType2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>435</Key>
    <Value>
      <English>Azimuth to Integer</English>
    </Value>
  </Entry>
  <Entry>
    <Key>436</Key>
    <Value>
      <English>Returns the integer value (between 0 and 359) of the specified Azimuth parameter. If the specified Azimuth parameter is a NullAzimuth - NullInteger is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>437</Key>
    <Value>
      <English>Real to Integer</English>
    </Value>
  </Entry>
  <Entry>
    <Key>438</Key>
    <Value>
      <English>Returns the Real parameter as an Integer value (i.e. discarding its fraction part).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>439</Key>
    <Value>
      <English>Real</English>
    </Value>
  </Entry>
  <Entry>
    <Key>440</Key>
    <Value>
      <English>Integer to Real</English>
    </Value>
  </Entry>
  <Entry>
    <Key>441</Key>
    <Value>
      <English>Returns the Integer parameter as a Real value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>442</Key>
    <Value>
      <English>Integer to String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>443</Key>
    <Value>
      <English>Returns the Integer parameter as a String value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>444</Key>
    <Value>
      <English>Time to String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>445</Key>
    <Value>
      <English>Returns the String representation of the specified Time, suitable for display.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>446</Key>
    <Value>
      <English>Timespan to Seconds</English>
    </Value>
  </Entry>
  <Entry>
    <Key>447</Key>
    <Value>
      <English>Returns the number of seconds in the specified Timespan parameter. If the specified Timespan parameter is a NullTimespan - NullInteger is returned.
Example: TimespanToSeconds(00:00:02:21) = 141.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>448</Key>
    <Value>
      <English>Polyline From Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>449</Key>
    <Value>
      <English>Returns a Polyline whose points are copied from the Line parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>450</Key>
    <Value>
      <English>Arc to Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>451</Key>
    <Value>
      <English>Returns a Polyline consists of NumOfPoints (parameter) points, including start and end point. The polyline is an Approximation of the arc created from the Ellipse (parameter). The arc is cut between the intersection points of the Ellipse circumference and the Sector (parameter). The polyline direction is the direction of the sector, from the left azimuth (when looking towards the sector's direction) to the right.
If the specified Ellipse is a NullEllipse - an EmptyPolygon is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>452</Key>
    <Value>
      <English>The Sector in between which the arc will be cut.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>453</Key>
    <Value>
      <English>Number Of Points</English>
    </Value>
  </Entry>
  <Entry>
    <Key>454</Key>
    <Value>
      <English>The number of the points that will create the Polyline. Including the Start point and the End point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>455</Key>
    <Value>
      <English>Polygon to Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>456</Key>
    <Value>
      <English>Returns a Polyline based on a given Polygon parameter. The returned Polyline is made up of the Polygon's points plus an additional point which is the Polygon's start point (required for "closing" the Polyline).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>457</Key>
    <Value>
      <English>Polyline to Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>458</Key>
    <Value>
      <English>Returns a Polygon based on a given Polyline parameter. The returned Polygon is made up of the points of the Polyline, i.e. it is formed by connecting the Polyline's last point to its first point. If the specified Polyline is a NullPolyline or if the resulting Polygon is not a valid Polygon (e.g. if the specified Polyline intersects itself) - an EmptyPolygon is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>459</Key>
    <Value>
      <English>Polygon From Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>460</Key>
    <Value>
      <English>Returns a "Stripe" Polygon that is based on the specified Polyline parameter, whose width (in meters) is specified by the Width parameter. The Polyline parameter thus defines the central "backbone" of the "Stripe" Polygon.
If the specified SemiCirclePointsNumber is greater than zero - the returned Polygon includes two approximated semi-circles around the first and last points of the specified Polyline parameter, so that it effectively contains all points whose distance from the specified Polyline is not higher than half the specified Width. </English>
    </Value>
  </Entry>
  <Entry>
    <Key>461</Key>
    <Value>
      <English>Stripe Width</English>
    </Value>
  </Entry>
  <Entry>
    <Key>462</Key>
    <Value>
      <English>Semi Circle Points Number</English>
    </Value>
  </Entry>
  <Entry>
    <Key>463</Key>
    <Value>
      <English>The number of points to use for each end point semi-circle. Zero/Null Integer indicates no semi-circles at all.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>464</Key>
    <Value>
      <English>Point to Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>465</Key>
    <Value>
      <English>Returns a single-point Polyline containing the specified Point parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>466</Key>
    <Value>
      <English>Point to String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>467</Key>
    <Value>
      <English>Returns the String representation of the specified Point, suitable for display.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>468</Key>
    <Value>
      <English>String to Real</English>
    </Value>
  </Entry>
  <Entry>
    <Key>469</Key>
    <Value>
      <English>Returns the numeric value represented by the specified String.
Examples:
- StringToReal("00234.900") = 234.9
- StringToReal("8706") = 8706.0
If the specified String does not represent a valid numeric value - Null Real is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>470</Key>
    <Value>
      <English>Abort</English>
    </Value>
  </Entry>
  <Entry>
    <Key>471</Key>
    <Value>
      <English>Causes an immediate abortion of planning/execution, providing the specified ReasonDescription as a description of the cause/reason that led to aborting.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>472</Key>
    <Value>
      <English>Reason Description</English>
    </Value>
  </Entry>
  <Entry>
    <Key>473</Key>
    <Value>
      <English>Xor</English>
    </Value>
  </Entry>
  <Entry>
    <Key>474</Key>
    <Value>
      <English>Returns "true" if either Boolean1 parameter is "true" or Boolean2 parameter is "true", but not both.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>475</Key>
    <Value>
      <English>Boolean1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>476</Key>
    <Value>
      <English>Boolean2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>477</Key>
    <Value>
      <English>Xor3</English>
    </Value>
  </Entry>
  <Entry>
    <Key>478</Key>
    <Value>
      <English>Returns "true" if one and only one of Boolean1, Boolean2, Boolean3 parameters is 'true'.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>479</Key>
    <Value>
      <English>Boolean3</English>
    </Value>
  </Entry>
  <Entry>
    <Key>480</Key>
    <Value>
      <English>Or 3</English>
    </Value>
  </Entry>
  <Entry>
    <Key>481</Key>
    <Value>
      <English>Returns "true" if at least one parameter is "true", and "false" if all parameters are "false".</English>
    </Value>
  </Entry>
  <Entry>
    <Key>482</Key>
    <Value>
      <English>Or 4</English>
    </Value>
  </Entry>
  <Entry>
    <Key>483</Key>
    <Value>
      <English>Boolean4</English>
    </Value>
  </Entry>
  <Entry>
    <Key>484</Key>
    <Value>
      <English>And3</English>
    </Value>
  </Entry>
  <Entry>
    <Key>485</Key>
    <Value>
      <English>Returns "true" if all three parameters are "true".</English>
    </Value>
  </Entry>
  <Entry>
    <Key>486</Key>
    <Value>
      <English>And4</English>
    </Value>
  </Entry>
  <Entry>
    <Key>487</Key>
    <Value>
      <English>Returns "true" if all four parameters are "true".</English>
    </Value>
  </Entry>
  <Entry>
    <Key>488</Key>
    <Value>
      <English>Random Boolean</English>
    </Value>
  </Entry>
  <Entry>
    <Key>489</Key>
    <Value>
      <English>Returns "true" with the specified Probability (a number between 0.0 and 1.0).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>490</Key>
    <Value>
      <English>Probability</English>
    </Value>
  </Entry>
  <Entry>
    <Key>491</Key>
    <Value>
      <English>Is Null Integer</English>
    </Value>
  </Entry>
  <Entry>
    <Key>492</Key>
    <Value>
      <English>Returns "true" if the specified Integer parameter equals NullInteger.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>493</Key>
    <Value>
      <English>Interger is Even</English>
    </Value>
  </Entry>
  <Entry>
    <Key>494</Key>
    <Value>
      <English>Returns 'true' if the specified Integer is an even number.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>495</Key>
    <Value>
      <English>Integer is in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>496</Key>
    <Value>
      <English>Returns 'true' if the specified Integer is not less than the specified LowerBound and not greater than the specified UpperBound.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>497</Key>
    <Value>
      <English>Lower Bound</English>
    </Value>
  </Entry>
  <Entry>
    <Key>498</Key>
    <Value>
      <English>Upper Bound</English>
    </Value>
  </Entry>
  <Entry>
    <Key>499</Key>
    <Value>
      <English>Integer Absolute</English>
    </Value>
  </Entry>
  <Entry>
    <Key>500</Key>
    <Value>
      <English>Returns the absolute value of the specified Integer parameter. Examples: IntegerAbsolute(35) = 35, IntegerAbsolute(-189) = 189.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>501</Key>
    <Value>
      <English>Integer Average</English>
    </Value>
  </Entry>
  <Entry>
    <Key>502</Key>
    <Value>
      <English>Returns the average of Int1 and Int2 parameters.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>503</Key>
    <Value>
      <English>Integer Divide Rounded</English>
    </Value>
  </Entry>
  <Entry>
    <Key>504</Key>
    <Value>
      <English>Returns the result of dividing the Int1 parameter by the Int2 parameter, rounded to the nearest integer.
If Int2 is zero - Null Integer is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>505</Key>
    <Value>
      <English>Integer Modulo</English>
    </Value>
  </Entry>
  <Entry>
    <Key>506</Key>
    <Value>
      <English>Returns the remainder of dividing the specified Dividend by the specified Divisor.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>507</Key>
    <Value>
      <English>Dividend</English>
    </Value>
  </Entry>
  <Entry>
    <Key>508</Key>
    <Value>
      <English>Divisor</English>
    </Value>
  </Entry>
  <Entry>
    <Key>509</Key>
    <Value>
      <English>Random Integer in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>510</Key>
    <Value>
      <English>Returns a random Integer value between the specified LowerBound and UpperBound.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>511</Key>
    <Value>
      <English>Integer Randomized By Percentage</English>
    </Value>
  </Entry>
  <Entry>
    <Key>512</Key>
    <Value>
      <English>Returns a random Integer that is higher or lower than the specified Base by no more than the specified DeltaPercentage from the specified Base.
For example: IntegerRandomizedByPercentage(500, 20) returns a random Integer in the range 400 - 600.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>513</Key>
    <Value>
      <English>Delta Percentage</English>
    </Value>
  </Entry>
  <Entry>
    <Key>514</Key>
    <Value>
      <English>Integer Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>515</Key>
    <Value>
      <English>Returns the specified Value - if notNull, otherwise - the specified Else parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>516</Key>
    <Value>
      <English>Value</English>
    </Value>
  </Entry>
  <Entry>
    <Key>517</Key>
    <Value>
      <English>Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>518</Key>
    <Value>
      <English>Integer Not Null or Abort</English>
    </Value>
  </Entry>
  <Entry>
    <Key>519</Key>
    <Value>
      <English>Returns the specified Integer if it is not a NullInteger, otherwise - aborts with the specified ReasonDescription.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>520</Key>
    <Value>
      <English>ReasonDescription</English>
    </Value>
  </Entry>
  <Entry>
    <Key>521</Key>
    <Value>
      <English>Integer Power</English>
    </Value>
  </Entry>
  <Entry>
    <Key>522</Key>
    <Value>
      <English>Returns the result of raising the specified Base to the power of the specified Exponent.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>523</Key>
    <Value>
      <English>Integer Digit</English>
    </Value>
  </Entry>
  <Entry>
    <Key>524</Key>
    <Value>
      <English>Return the digit of the specified Integer whose index (1-based) is the specified DigitIndex.
Examples:
IntegerDigit(9702,3) = 7
IntegerDigit(-9702,3) = 7
IntegerDigit(9702,6) = 0</English>
    </Value>
  </Entry>
  <Entry>
    <Key>525</Key>
    <Value>
      <English>DigitIndex</English>
    </Value>
  </Entry>
  <Entry>
    <Key>526</Key>
    <Value>
      <English>Integer is 4 Digit Positive Octal</English>
    </Value>
  </Entry>
  <Entry>
    <Key>527</Key>
    <Value>
      <English>Returns "true" if the specified Integer is not less than zero, has no more than 4 digits and all its digits are between 0-7.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>528</Key>
    <Value>
      <English>Integer is Positive</English>
    </Value>
  </Entry>
  <Entry>
    <Key>529</Key>
    <Value>
      <English>Returns 'true' if the specified Integer is positive (greater than 0).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>530</Key>
    <Value>
      <English>Cyclic Index in Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>531</Key>
    <Value>
      <English>Returns the cyclic index (1-based)  for the specified Cycle Number in a collection with a length of the specified Collection Count value.
e.g. for a Cycle Number of 5 and a Collection Count of 3, the returned value is 2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>532</Key>
    <Value>
      <English>Cycle Number</English>
    </Value>
  </Entry>
  <Entry>
    <Key>533</Key>
    <Value>
      <English>Collection Count</English>
    </Value>
  </Entry>
  <Entry>
    <Key>534</Key>
    <Value>
      <English>Integer Additive Inverse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>535</Key>
    <Value>
      <English>Returns the additive inverse (opposite number) of the specified Integer.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>536</Key>
    <Value>
      <English>Integer Greater Than or Equal</English>
    </Value>
  </Entry>
  <Entry>
    <Key>537</Key>
    <Value>
      <English>Returns "true" if Int1 is greater than or equal to Int2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>538</Key>
    <Value>
      <English>Integer Less Than or Equal</English>
    </Value>
  </Entry>
  <Entry>
    <Key>539</Key>
    <Value>
      <English>Is Null Real</English>
    </Value>
  </Entry>
  <Entry>
    <Key>540</Key>
    <Value>
      <English>Returns "true" if the specified Real parameter equals NullReal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>541</Key>
    <Value>
      <English>Real is in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>542</Key>
    <Value>
      <English>Returns 'true' if the specified Real is not less than the specified LowerBound and not greater than the specified UpperBound.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>543</Key>
    <Value>
      <English>Real Fraction</English>
    </Value>
  </Entry>
  <Entry>
    <Key>544</Key>
    <Value>
      <English>Returns the fraction part of the specified Real number, i.e. the part to the right of the decimal point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>545</Key>
    <Value>
      <English>Real Max</English>
    </Value>
  </Entry>
  <Entry>
    <Key>546</Key>
    <Value>
      <English>Returns the maximum between Real1 and Real2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>547</Key>
    <Value>
      <English>Real Min</English>
    </Value>
  </Entry>
  <Entry>
    <Key>548</Key>
    <Value>
      <English>Returns the minimum between Real1 and Real2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>549</Key>
    <Value>
      <English>Real Minus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>550</Key>
    <Value>
      <English>Returns the result of subtracting the Real1 parameter from the Real2 parameter (i.e. Real1- Real2).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>551</Key>
    <Value>
      <English>Random Real</English>
    </Value>
  </Entry>
  <Entry>
    <Key>552</Key>
    <Value>
      <English>Returns a random number between 0.0 and 1.0 (inclusive).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>553</Key>
    <Value>
      <English>Real to Integer Rounded</English>
    </Value>
  </Entry>
  <Entry>
    <Key>554</Key>
    <Value>
      <English>Returns the specified Real parameter rounded to the nearest Integer value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>555</Key>
    <Value>
      <English>Real to Integer Ceiling</English>
    </Value>
  </Entry>
  <Entry>
    <Key>556</Key>
    <Value>
      <English>Returns the specified Real parameter rounded to the smallest following Integer value.
Examples: 
RealToIntegerCeiled(4.3) = 5.0
RealToIntegerCeiled(4.0) = 4.0.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>557</Key>
    <Value>
      <English>Real Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>558</Key>
    <Value>
      <English>Real Absolute</English>
    </Value>
  </Entry>
  <Entry>
    <Key>559</Key>
    <Value>
      <English>Returns the absolute value of the specified Real parameter. Examples: RealAbsolute(35.4) = 35.4, RealAbsolute(-0.189) = 0.189.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>560</Key>
    <Value>
      <English>Real Avarage</English>
    </Value>
  </Entry>
  <Entry>
    <Key>561</Key>
    <Value>
      <English>Returns the avarage of Real1 and Real2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>562</Key>
    <Value>
      <English>Real Square Root</English>
    </Value>
  </Entry>
  <Entry>
    <Key>563</Key>
    <Value>
      <English>Returns the square root of the specified Real number. If the specified Real is negative - NullReal is returned.
</English>
    </Value>
  </Entry>
  <Entry>
    <Key>564</Key>
    <Value>
      <English>Discriminant</English>
    </Value>
  </Entry>
  <Entry>
    <Key>565</Key>
    <Value>
      <English>Returns the discriminant (B*B - 4AC) of the quadratic equation that has the specified coefficients.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>566</Key>
    <Value>
      <English>Quadratic Equation Root</English>
    </Value>
  </Entry>
  <Entry>
    <Key>567</Key>
    <Value>
      <English>Returns one of the roots of the quadratic equation of the specified coefficients. The returned root is based on either adding or subtracting the square root of the Discriminant, based on the specified Add value.
If the equation has no roots - a Null Real is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>568</Key>
    <Value>
      <English>Add</English>
    </Value>
  </Entry>
  <Entry>
    <Key>569</Key>
    <Value>
      <English>If A=0 then the root is -C/B, which of course requires B to be greater than zero - otherwise there are no roots.
If the Discriminant is negative - there are no roots.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>570</Key>
    <Value>
      <English>Null String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>571</Key>
    <Value>
      <English>Returns a Null String.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>572</Key>
    <Value>
      <English>String Concatenate 3</English>
    </Value>
  </Entry>
  <Entry>
    <Key>573</Key>
    <Value>
      <English>Returns a String that is the result of concatenating the three String parameters.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>574</Key>
    <Value>
      <English>String3</English>
    </Value>
  </Entry>
  <Entry>
    <Key>575</Key>
    <Value>
      <English>String Concatenate 4</English>
    </Value>
  </Entry>
  <Entry>
    <Key>576</Key>
    <Value>
      <English>Returns a String that is the result of concatenating the four String parameters.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>577</Key>
    <Value>
      <English>String4</English>
    </Value>
  </Entry>
  <Entry>
    <Key>578</Key>
    <Value>
      <English>Is Null String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>579</Key>
    <Value>
      <English>Returns "true" if the specified String parameter equals NullString.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>580</Key>
    <Value>
      <English>String Join</English>
    </Value>
  </Entry>
  <Entry>
    <Key>581</Key>
    <Value>
      <English>Returns a String that is the result of concatenating the two String parameters, with the specified separator placed between them only if both are non-empty.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>582</Key>
    <Value>
      <English>Returns a String that is the result of concatenating the three String parameters, with the specified separator placed between each pair of non-empty Strings.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>583</Key>
    <Value>
      <English>Returns a String that is the result of concatenating the four String parameters, with the specified separator placed between each pair of non-empty Strings.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>584</Key>
    <Value>
      <English>Parenthesised String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>585</Key>
    <Value>
      <English>Returns a String that is the result of placing the specified String between parenthesis.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>586</Key>
    <Value>
      <English>Quoted String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>587</Key>
    <Value>
      <English>Returns a String that is the result of placing the specified String between single quotes.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>588</Key>
    <Value>
      <English>Double Quoted String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>589</Key>
    <Value>
      <English>Returns a String that is the result of placing the specified String between double quotes.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>590</Key>
    <Value>
      <English>String Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>591</Key>
    <Value>
      <English>String is Numeric</English>
    </Value>
  </Entry>
  <Entry>
    <Key>592</Key>
    <Value>
      <English>Returns 'true' if the specified String is not empty and contains numeric characters (0-9) only.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>593</Key>
    <Value>
      <English>0123456789</English>
    </Value>
  </Entry>
  <Entry>
    <Key>594</Key>
    <Value>
      <English>String is IP Address Element</English>
    </Value>
  </Entry>
  <Entry>
    <Key>595</Key>
    <Value>
      <English>Returns 'true' if the specified String represents an integer that is not less than 0 and not greater than 255.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>596</Key>
    <Value>
      <English>String is IP Address</English>
    </Value>
  </Entry>
  <Entry>
    <Key>597</Key>
    <Value>
      <English>Returns 'true' if the specified String is made up of four integers in the range 0-255 that are separated by periods.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>598</Key>
    <Value>
      <English>Newline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>599</Key>
    <Value>
      <English>Returns a string of characters representing a line break.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>600</Key>
    <Value>
      <English>\n</English>
    </Value>
  </Entry>
  <Entry>
    <Key>601</Key>
    <Value>
      <English>Is Null Time</English>
    </Value>
  </Entry>
  <Entry>
    <Key>602</Key>
    <Value>
      <English>Returns "true" if the specified Time parameter equals NullTime.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>603</Key>
    <Value>
      <English>Time Min</English>
    </Value>
  </Entry>
  <Entry>
    <Key>604</Key>
    <Value>
      <English>Returns the minimum between Time1 and Time2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>605</Key>
    <Value>
      <English>Time1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>606</Key>
    <Value>
      <English>Time2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>607</Key>
    <Value>
      <English>Time Min Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>608</Key>
    <Value>
      <English>Returns the minimum between Time1 and Time2 considering the possibility that Time1 and/or Time2 may be Null.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>609</Key>
    <Value>
      <English>Time Max</English>
    </Value>
  </Entry>
  <Entry>
    <Key>610</Key>
    <Value>
      <English>Returns the maximum between Time1 and Time2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>611</Key>
    <Value>
      <English>Time Max Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>612</Key>
    <Value>
      <English>Returns the maximum between Time1 and Time2 considering the possibility that Time1 and/or Time2 may be Null.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>613</Key>
    <Value>
      <English>Random Time in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>614</Key>
    <Value>
      <English>Returns a random Time value between the specified LowerBound and UpperBound.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>615</Key>
    <Value>
      <English>Time Minus Time</English>
    </Value>
  </Entry>
  <Entry>
    <Key>616</Key>
    <Value>
      <English>Returns the result of subtracting Time2 parameter from Time1 parameter, which may be a positive, zero or negative Timespan.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>617</Key>
    <Value>
      <English>Time Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>618</Key>
    <Value>
      <English>Time Less Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>619</Key>
    <Value>
      <English>Returns 'true' if Time1 is less than Time2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>620</Key>
    <Value>
      <English>Minute of Day</English>
    </Value>
  </Entry>
  <Entry>
    <Key>621</Key>
    <Value>
      <English>Return the hhmm portion of the specified Time as a decimal Integer in the range 0 - 2359.
Examples:
- MinuteOfDay(2021-11-28T18:37:06) = 1837
- MinuteOfDay(2021-11-28T02:14:50) = 214</English>
    </Value>
  </Entry>
  <Entry>
    <Key>622</Key>
    <Value>
      <English>Date</English>
    </Value>
  </Entry>
  <Entry>
    <Key>623</Key>
    <Value>
      <English>Returns the date portion of the specified time, i.e. the DD MM YYYY portion of it, with hh:mm:ss portion set to 00:00:00.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>624</Key>
    <Value>
      <English>Is Null Timespan</English>
    </Value>
  </Entry>
  <Entry>
    <Key>625</Key>
    <Value>
      <English>Returns "true" if the specified Timespan parameter equals NullTimespan.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>626</Key>
    <Value>
      <English>Timespan Min</English>
    </Value>
  </Entry>
  <Entry>
    <Key>627</Key>
    <Value>
      <English>Returns the minimum between Timespan1 and Timespan2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>628</Key>
    <Value>
      <English>Timespan Max</English>
    </Value>
  </Entry>
  <Entry>
    <Key>629</Key>
    <Value>
      <English>Returns the maximum between Timespan1 and Timespan2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>630</Key>
    <Value>
      <English>Timespan Plus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>631</Key>
    <Value>
      <English>Returns the result of adding Timespan1 parameter to Timespan2 parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>632</Key>
    <Value>
      <English>Timespan Minus</English>
    </Value>
  </Entry>
  <Entry>
    <Key>633</Key>
    <Value>
      <English>Returns the result of subtracting Timespan2 parameter from Timespan1 parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>634</Key>
    <Value>
      <English>Timespan Less Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>635</Key>
    <Value>
      <English>Returns "true" if Timespan1 is less than Timespan2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>636</Key>
    <Value>
      <English>Timespan Divide</English>
    </Value>
  </Entry>
  <Entry>
    <Key>637</Key>
    <Value>
      <English>Returns the result of dividing the specified Timespan by the specified Divisor.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>638</Key>
    <Value>
      <English>Days of Timespan</English>
    </Value>
  </Entry>
  <Entry>
    <Key>639</Key>
    <Value>
      <English>Returns the number of whole days in the specified Timespan value, i.e the DD component of DD:HH:MM:SS.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>640</Key>
    <Value>
      <English>Hours of Timespan</English>
    </Value>
  </Entry>
  <Entry>
    <Key>641</Key>
    <Value>
      <English>Returns the number of whole hours in the last day of the specified Timespan value, i.e the HH component of DD:HH:MM:SS.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>642</Key>
    <Value>
      <English>Minutes of Timespan</English>
    </Value>
  </Entry>
  <Entry>
    <Key>643</Key>
    <Value>
      <English>Returns the number of whole minutes in the last hour of the last day of the specified Timespan value, i.e the MM component of DD:HH:MM:SS.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>644</Key>
    <Value>
      <English>Seconds of Timespan</English>
    </Value>
  </Entry>
  <Entry>
    <Key>645</Key>
    <Value>
      <English>Returns the number of seconds in the last minute of the last hour of the last day of the specified Timespan value, i.e the SS component of DD:HH:MM:SS.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>646</Key>
    <Value>
      <English>Random Timespan in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>647</Key>
    <Value>
      <English>Returns a random Timespan value between the specified LowerBound and UpperBound.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>648</Key>
    <Value>
      <English>Timespan Multiply</English>
    </Value>
  </Entry>
  <Entry>
    <Key>649</Key>
    <Value>
      <English>Returns the result of multiplying the specified Timespan by the specified Multiplier.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>650</Key>
    <Value>
      <English>Multiplier</English>
    </Value>
  </Entry>
  <Entry>
    <Key>651</Key>
    <Value>
      <English>Timespan Difference</English>
    </Value>
  </Entry>
  <Entry>
    <Key>652</Key>
    <Value>
      <English>Returns the absolute difference between Timespan1 and Timespan2.
Note that TimespanDifference(T1,T2) = TimespanDifference(T2,T1) by definition.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>653</Key>
    <Value>
      <English>Forever</English>
    </Value>
  </Entry>
  <Entry>
    <Key>654</Key>
    <Value>
      <English>Returns a very very long Timespan value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>655</Key>
    <Value>
      <English>Timespan Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>656</Key>
    <Value>
      <English>Timespan Is Positive</English>
    </Value>
  </Entry>
  <Entry>
    <Key>657</Key>
    <Value>
      <English>Returns 'true' if the specified Timespan is not null and greater than zero.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>658</Key>
    <Value>
      <English>Timespan is in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>659</Key>
    <Value>
      <English>Returns 'true' if the specified Timespan is not less than the specified LowerBound and not greater than the specified UpperBound.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>660</Key>
    <Value>
      <English>Is Null Enumeration</English>
    </Value>
  </Entry>
  <Entry>
    <Key>661</Key>
    <Value>
      <English>Returns "true" if the specified Enumeration parameter is a null Enumeration.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>662</Key>
    <Value>
      <English>Echelon Higher Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>663</Key>
    <Value>
      <English>Returns "true" if Echelon1 is higher than Echelon2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>664</Key>
    <Value>
      <English>Echelon 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>665</Key>
    <Value>
      <English>Echelon 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>666</Key>
    <Value>
      <English>Echelon Lower Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>667</Key>
    <Value>
      <English>Returns "true" if Echelon1 is lower than Echelon2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>668</Key>
    <Value>
      <English>Echelon Is In Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>669</Key>
    <Value>
      <English>Returns "true" if the specified Echelon is not lower than the specified LowerBound and not higher than the specified UpperBound</English>
    </Value>
  </Entry>
  <Entry>
    <Key>670</Key>
    <Value>
      <English>Echelon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>671</Key>
    <Value>
      <English>Enumeration Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>672</Key>
    <Value>
      <English>If  Yes/No</English>
    </Value>
  </Entry>
  <Entry>
    <Key>673</Key>
    <Value>
      <English>Returns the WhenTrue parameter if the Condition parameter is true, and the WhenFalse parameter if the Condition is false.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>674</Key>
    <Value>
      <English>Condition</English>
    </Value>
  </Entry>
  <Entry>
    <Key>675</Key>
    <Value>
      <English>When True</English>
    </Value>
  </Entry>
  <Entry>
    <Key>676</Key>
    <Value>
      <English>When False</English>
    </Value>
  </Entry>
  <Entry>
    <Key>677</Key>
    <Value>
      <English>Random Enumeration</English>
    </Value>
  </Entry>
  <Entry>
    <Key>678</Key>
    <Value>
      <English>Returns a random child enumeration of the specified ParentEnumeration.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>679</Key>
    <Value>
      <English>Sector Between Azimuths</English>
    </Value>
  </Entry>
  <Entry>
    <Key>680</Key>
    <Value>
      <English>Returns a Sector between a Left Azimuth (parameter) and a RightAzimuth (parameter). The Left and Right are relative to the Sector's middle Azimuth.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>681</Key>
    <Value>
      <English>Left Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>682</Key>
    <Value>
      <English>Right Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>683</Key>
    <Value>
      <English>The Right Azimuth of the returned Sector.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>684</Key>
    <Value>
      <English>Sector by Left Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>685</Key>
    <Value>
      <English>Returns a Sector created from the specified LeftAzimuth expanded (clockwise) by the specified Angle parameter. i.e. the returned Sector begins at the LeftAzimuth and ends at the (LeftAzimuth + Angle).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>686</Key>
    <Value>
      <English>Sector by Right Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>687</Key>
    <Value>
      <English>Returns a Sector created from the specified RightAzimuth expanded (counter clockwise) by the specified Angle parameter. i.e. the returned Sector begins at the (RightAzimuth - Angle) and ends RightAzimuth.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>688</Key>
    <Value>
      <English>Azimuth on Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>689</Key>
    <Value>
      <English>Returns the Azimuth of the specified Polyline at the specified Point (snapped to the Polyline).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>690</Key>
    <Value>
      <English>Angle Between Azimuths</English>
    </Value>
  </Entry>
  <Entry>
    <Key>691</Key>
    <Value>
      <English>Returns the smallest of the two angles defined between Azimuth1 and Azimuth2 (parameters).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>692</Key>
    <Value>
      <English>Azimuth 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>693</Key>
    <Value>
      <English>Azimuth 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>694</Key>
    <Value>
      <English>Azimuth Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>695</Key>
    <Value>
      <English>Returns "true" if the two Azimuth parameters are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>696</Key>
    <Value>
      <English>Azimuth is in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>697</Key>
    <Value>
      <English>Returns 'true' if the specified Azimuth is not less than the specified LowerBound and not greater than the specified UpperBound.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>698</Key>
    <Value>
      <English>Azimuth Less Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>699</Key>
    <Value>
      <English>Returns "true" if Azimuth1 is less than Azimuth2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>700</Key>
    <Value>
      <English>Returns the direction (Azimuth) from Point 1 to Point 2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>701</Key>
    <Value>
      <English>Point 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>702</Key>
    <Value>
      <English>Point 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>703</Key>
    <Value>
      <English>Azimuth of Polyline Section</English>
    </Value>
  </Entry>
  <Entry>
    <Key>704</Key>
    <Value>
      <English>Returns the Azimuth of a section of the specified Polyline that ends at the specified SectionEndPoint (snapped to the Polyline) and whose length is the specified SectionLength (i.e. the section extends backwards along the Polyline).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>705</Key>
    <Value>
      <English>Section End Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>706</Key>
    <Value>
      <English>Section Length</English>
    </Value>
  </Entry>
  <Entry>
    <Key>707</Key>
    <Value>
      <English>Smooth Azimuth on Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>708</Key>
    <Value>
      <English>Returns the Azimuth of a 200m section of the specified Polyline that ends at the specified Point (snapped to the Polyline) - to help smooth out potential spikes along the Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>709</Key>
    <Value>
      <English>Is Null Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>710</Key>
    <Value>
      <English>Returns "true" if the specified Azimuth parameter equals NullAzimuth.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>711</Key>
    <Value>
      <English>Returns an Azimuth which is 90 degrees counterclockwise to the specified Azimuth.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>712</Key>
    <Value>
      <English>Returns an Azimuth which is 90 degrees clockwise to the specified Azimuth.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>713</Key>
    <Value>
      <English>Azimuth on Polyline End</English>
    </Value>
  </Entry>
  <Entry>
    <Key>714</Key>
    <Value>
      <English>Returns the Azimuth of the specified Polyline at its last point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>715</Key>
    <Value>
      <English>Azimuth Greater Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>716</Key>
    <Value>
      <English>Returns "true" if Azimuth1 is greater than Azimuth2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>717</Key>
    <Value>
      <English>Azimuth Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>718</Key>
    <Value>
      <English>Azimuth Min</English>
    </Value>
  </Entry>
  <Entry>
    <Key>719</Key>
    <Value>
      <English>Returns the minimum between Azimuth1 and Azimuth2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>720</Key>
    <Value>
      <English>Azimuth Max</English>
    </Value>
  </Entry>
  <Entry>
    <Key>721</Key>
    <Value>
      <English>Returns the maximum between Azimuth1 and Azimuth2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>722</Key>
    <Value>
      <English>Middle Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>723</Key>
    <Value>
      <English>Returns the Azimuth halfway between Azimuth1 and Azimuth2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>724</Key>
    <Value>
      <English>Line Orientated Towards Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>725</Key>
    <Value>
      <English>Returns either the Line parameter or its ReverseLine, depending on which Line's Azimuth is closer to the Azimuth  from the Line's center to the Point parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>726</Key>
    <Value>
      <English>Oriented Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>727</Key>
    <Value>
      <English>Returns a Line whose first point is specified by the Origin parameter and whose second point is located along the azimuth specified by the Orientation parameter (from the Origin point), at a distance specified by the Length parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>728</Key>
    <Value>
      <English>Line Start</English>
    </Value>
  </Entry>
  <Entry>
    <Key>729</Key>
    <Value>
      <English>Returns the 1st point of the Line parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>730</Key>
    <Value>
      <English>Line End</English>
    </Value>
  </Entry>
  <Entry>
    <Key>731</Key>
    <Value>
      <English>Returns the 2nd point of the Line parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>732</Key>
    <Value>
      <English>Distance from Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>733</Key>
    <Value>
      <English>Returns the distance of the Point parameter from the Line parameter (assumed to extend indefinitely).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>734</Key>
    <Value>
      <English>Returns the distance between the Point1 and Point2 parameters.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>735</Key>
    <Value>
      <English>Line Closer to Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>736</Key>
    <Value>
      <English>Returns the Line (Line1 or Line2) that is closer to the Point parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>737</Key>
    <Value>
      <English>Line1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>738</Key>
    <Value>
      <English>Line2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>739</Key>
    <Value>
      <English>Middle Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>740</Key>
    <Value>
      <English>Returns the midway point between Point 1 and Point 2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>741</Key>
    <Value>
      <English>Is Null Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>742</Key>
    <Value>
      <English>Returns "true" if the specified Point parameter equals NullPoint.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>743</Key>
    <Value>
      <English>Point Practically Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>744</Key>
    <Value>
      <English>Returns "true" if Point1 and Point2 (parameters) are practically equal, i.e. if the distance between them is no more than 1m.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>745</Key>
    <Value>
      <English>Is Null Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>746</Key>
    <Value>
      <English>Returns "true" if the specified Line parameter equals NullLine.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>747</Key>
    <Value>
      <English>Is Point on Left Side</English>
    </Value>
  </Entry>
  <Entry>
    <Key>748</Key>
    <Value>
      <English>Returns true if the Point parameter is on the left side of the Line parameter. Left and right are determined relative to the direction of the Line (from its 1st Point to its 2nd Point).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>749</Key>
    <Value>
      <English>Line Center</English>
    </Value>
  </Entry>
  <Entry>
    <Key>750</Key>
    <Value>
      <English>Returns the center point of the Line parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>751</Key>
    <Value>
      <English>Point Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>752</Key>
    <Value>
      <English>Point in Offset</English>
    </Value>
  </Entry>
  <Entry>
    <Key>753</Key>
    <Value>
      <English>Returns a point whose distance from the specified Origin is the absolute value of the specified Offset. If Offset is positive - the returned point if offseted towards the sepecified Azimuth, otherwies (negative) - towards the reverse Azimuth.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>754</Key>
    <Value>
      <English>Random Point in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>755</Key>
    <Value>
      <English>Returns a randomly selected point whose distance from the speicifed Origin is between the specified MinRange and MaxRange.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>756</Key>
    <Value>
      <English>Min Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>757</Key>
    <Value>
      <English>Max Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>758</Key>
    <Value>
      <English>Parallel Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>759</Key>
    <Value>
      <English>Returns a Line that is parallel to the specified Line, in the specified Offset from it - to the right (positive Offset value) or left (negative Offset value).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>760</Key>
    <Value>
      <English>Point Along Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>761</Key>
    <Value>
      <English>Returns a point of the specified PointIndex from NumberOfPoints points that are evenly spaced along the specified Line, so that the distance between each two adjacent points is twice the distance of the first and last points from the Line's start and end points respectively. For example, given a line:
|------------------------|
Divided into 3 evenly spaced points marked x,y,z:
|----x--------y--------z----|
PointAlongLine(Line, 1, 3) returns point x.


</English>
    </Value>
  </Entry>
  <Entry>
    <Key>762</Key>
    <Value>
      <English>Number of Points</English>
    </Value>
  </Entry>
  <Entry>
    <Key>763</Key>
    <Value>
      <English>Is Null Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>764</Key>
    <Value>
      <English>Returns "true" if the specified Polyline parameter equals NullPolyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>765</Key>
    <Value>
      <English>Is Polyline Cyclic</English>
    </Value>
  </Entry>
  <Entry>
    <Key>766</Key>
    <Value>
      <English>Returns "true" if the specified Polyline starts and ends at the same point and has a non-zero length.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>767</Key>
    <Value>
      <English>Polyline Is Self Intersecting</English>
    </Value>
  </Entry>
  <Entry>
    <Key>768</Key>
    <Value>
      <English>Returns 'True' if the Polyline has self intersections.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>769</Key>
    <Value>
      <English>Polyline Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>770</Key>
    <Value>
      <English>Polyline Not Null or Abort</English>
    </Value>
  </Entry>
  <Entry>
    <Key>771</Key>
    <Value>
      <English>Returns the specified Polyline if it is not a NullPolyline, otherwise - aborts with the specified ReasonDescription.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>772</Key>
    <Value>
      <English>Polyline Min</English>
    </Value>
  </Entry>
  <Entry>
    <Key>773</Key>
    <Value>
      <English>Returns the Polyline with the minimum length between Polyline1 and Polyline2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>774</Key>
    <Value>
      <English>Polyline Min Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>775</Key>
    <Value>
      <English>Returns the Polyline with the minimum length between Polyline1 and Polyline2 considering the possibility that Polyline1 and/or Polyline2 may be Null.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>776</Key>
    <Value>
      <English>Polyline Shorter Than</English>
    </Value>
  </Entry>
  <Entry>
    <Key>777</Key>
    <Value>
      <English>Returns "true" if the length of Polyline1 is less than the length of Polyline2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>778</Key>
    <Value>
      <English>Polyline First Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>779</Key>
    <Value>
      <English>Returns the first Point of  the specified Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>780</Key>
    <Value>
      <English>Polyline Middle Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>781</Key>
    <Value>
      <English>Returns the middle Point of the specified Polyline.
If the specified Polyline is a Null Polyline - a Null Point is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>782</Key>
    <Value>
      <English>PointOnPolyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>783</Key>
    <Value>
      <English>Returns a Point on the specified Polyline whose distance (along the Polyline) from the Polyline's first point is specified by the Distance parameter. If the specified Distance is greater than the Polyline's length - the last Point of the Polyline is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>784</Key>
    <Value>
      <English>Point on Polyline Extended</English>
    </Value>
  </Entry>
  <Entry>
    <Key>785</Key>
    <Value>
      <English>Returns a Point on the specified Polyline whose distance (along the Polyline) from the Polyline's first point is specified by the Distance parameter. For this purpose, if the specified Distance is greater than the Polyline's length - the Polyline is considered to extend indefinitely along the smoothed Azimuth of its end section.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>786</Key>
    <Value>
      <English>Relative Point on Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>787</Key>
    <Value>
      <English>Returns a Point on the specified Polyline whose distance (along the Polyline) from the specified Origin point (snapped to the Polyline) is the specified Offset parameter.
If the specified Offset is negative - the returned Point is closer to the Polyline start than the Origin point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>788</Key>
    <Value>
      <English>Random Point on Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>789</Key>
    <Value>
      <English>Returns a random Point on the specified Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>790</Key>
    <Value>
      <English>Is Point on Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>791</Key>
    <Value>
      <English>Returns "true" if the specified Point is within 3m of the specified Polyline.
if the specified Polyline is a Null Polyline - 'false' is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>792</Key>
    <Value>
      <English>Is Point Near Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>793</Key>
    <Value>
      <English>Returns "true" if the specified Point is located near the specified Polyline - not farther than the specified MaximalDistance.
if the specified Polyline is a Null Polyline - 'false' is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>794</Key>
    <Value>
      <English>Maximal Distance</English>
    </Value>
  </Entry>
  <Entry>
    <Key>795</Key>
    <Value>
      <English>Distance from Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>796</Key>
    <Value>
      <English>Returns the distance of the Point parameter from the Polyline parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>797</Key>
    <Value>
      <English>Distance Along Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>798</Key>
    <Value>
      <English>Returns the length of the Polyline section that starts at the beginning of the specified Polyline and ends with the snap point of the specified Point to the Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>799</Key>
    <Value>
      <English>Relative Distance Along Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>800</Key>
    <Value>
      <English>Return the distance from the specified Origin to the specified Point along the Polyline.
If the Point is located before the Origin, the returned distance is negative.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>801</Key>
    <Value>
      <English>Polyline End Section</English>
    </Value>
  </Entry>
  <Entry>
    <Key>802</Key>
    <Value>
      <English>Returns a section of the specified Polyline that starts at the specified StartPoint - snapped to the specified Polyline, and extends to the end (i.e. last point) of the specified Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>803</Key>
    <Value>
      <English>Polyline Start Section</English>
    </Value>
  </Entry>
  <Entry>
    <Key>804</Key>
    <Value>
      <English>Returns a section of the specified Polyline that starts at the first point of the specified Polyline, and extends to the specified EndPoint - snapped to the specified Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>805</Key>
    <Value>
      <English>SafelyTrimmed Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>806</Key>
    <Value>
      <English>Returns a Polyline which is the middle part of the input Polyline parameter. The TrimFromStart and TrimFromEnd parameters, specify the length (in meters) which should be trimmed from each side of the input Polyline. 
The returned Polyline is guaranteed to have a non-zero length (i.e. it is at least 1m long), which means that if the specified TrimFromStart and/orTrimFromEnd are too long - they are effectively overriden.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>807</Key>
    <Value>
      <English>Forward Section on Polyline</English>
    </Value>
  </Entry>
  <Entry>
    <Key>808</Key>
    <Value>
      <English>Returns a section of the specified Polyline that has the specified SectionLength, starts at the specified SectionStart point and extends forward along the Polyline.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>809</Key>
    <Value>
      <English>Section Start</English>
    </Value>
  </Entry>
  <Entry>
    <Key>810</Key>
    <Value>
      <English>Extend Polyline With Last Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>811</Key>
    <Value>
      <English>Returns a Polyline, which is created by extending the Polyline parameter with an additional Point at the end (the Point parameter).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>812</Key>
    <Value>
      <English>Extend Polyline With First Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>813</Key>
    <Value>
      <English>Returns a Polyline, which is created by extending the Polyline parameter with an additional Point at the beginning (the Point parameter).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>814</Key>
    <Value>
      <English>Polyline Add From Snap Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>815</Key>
    <Value>
      <English>Returns a Polyline which results from joining Polyline1 to a section of Polyline 2 that starts at the closest point on Polyline2 to Polyline1's last point.
The returned Polyline is therefore comprised of all Polyline1 Points, followed by the Snap Point of Polyline1 last point on Polyline 2, followed by the remainder of Polyline2 Points.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>816</Key>
    <Value>
      <English>Polyline Add Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>817</Key>
    <Value>
      <English>Returns a Polyline which results from joining Polyline1 to Polyline2. The returned Polyline is comprised of all Polyline1 Points, followed by all Polyline2 Points, with loops trimmed/eliminated.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>818</Key>
    <Value>
      <English>Parallel Polyline Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>819</Key>
    <Value>
      <English>Rectangle Bounding Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>820</Key>
    <Value>
      <English>Returns a rectangular Polygon that bounds the Ellipse parameter. The Rectangle has the same Width, Depth and Orientation as the Ellipse.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>821</Key>
    <Value>
      <English>Polygon Bounded by Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>822</Key>
    <Value>
      <English>Returns a Polygon that is bounded by the specified Ellipse (parameter).
If the specified Ellipse is a NullEllipse - an EmptyPolygon is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>823</Key>
    <Value>
      <English>Number of Vertices</English>
    </Value>
  </Entry>
  <Entry>
    <Key>824</Key>
    <Value>
      <English>Triangle Center</English>
    </Value>
  </Entry>
  <Entry>
    <Key>825</Key>
    <Value>
      <English>Returns the intersection point of the medians of a Triangle whose Vertices are Vertex 1, Vertex 2 and Vertex 3.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>826</Key>
    <Value>
      <English>Is Null Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>827</Key>
    <Value>
      <English>Returns "true" if the specified Polygon parameter is Null (equals EmptyPolygon).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>828</Key>
    <Value>
      <English>Quadrangle</English>
    </Value>
  </Entry>
  <Entry>
    <Key>829</Key>
    <Value>
      <English>Returns a quadrangular Polygon based on its four specified Vertex parameters (Vertex1-4).
Note: the order of specified Vertex parameters is immaterial, i.e. the same shape Polygon is returned regardless of the order by which Vertex parameters are specified. The order of vertices in the returned Polygon is not necessarily the order of the specified Vertex parameters.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>830</Key>
    <Value>
      <English>Vertex 4</English>
    </Value>
  </Entry>
  <Entry>
    <Key>831</Key>
    <Value>
      <English>Square</English>
    </Value>
  </Entry>
  <Entry>
    <Key>832</Key>
    <Value>
      <English>Returns a square shaped Polygon of the specified Side length, whose center is at the specified Center point. The square is aligned so that it faces the specified Orientation azimuth.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>833</Key>
    <Value>
      <English>Side</English>
    </Value>
  </Entry>
  <Entry>
    <Key>834</Key>
    <Value>
      <English>Island Polygon Substruct</English>
    </Value>
  </Entry>
  <Entry>
    <Key>835</Key>
    <Value>
      <English>Returns a Polygon which is the result of subtracting the specified Island and an additional "Bridge" Polygon from the specified Container. Subtracting the Bridge ensures that the resulting Polygon is "simple" (has no touching sides).
The "Bridge" Polygon  extends from the center of the specified Island towards the specified Bridge Azimuth.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>836</Key>
    <Value>
      <English>Container</English>
    </Value>
  </Entry>
  <Entry>
    <Key>837</Key>
    <Value>
      <English>Island</English>
    </Value>
  </Entry>
  <Entry>
    <Key>838</Key>
    <Value>
      <English>Bridge Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>839</Key>
    <Value>
      <English>Polyline Inside Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>840</Key>
    <Value>
      <English>Returns "true" if the specified Polyline is completely  inside the specified Polygon (parameters).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>841</Key>
    <Value>
      <English>Ellipse as Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>842</Key>
    <Value>
      <English>Returns a Polygon of roughly the same geometry as the specified Ellipse.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>843</Key>
    <Value>
      <English>Snap To Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>844</Key>
    <Value>
      <English>Returns the Point on the specified Polygon parameter, which is closest (geometrically) to the specified Point parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>845</Key>
    <Value>
      <English>Annular Sector</English>
    </Value>
  </Entry>
  <Entry>
    <Key>846</Key>
    <Value>
      <English>Returns an area that is a sectorial part of a ring.
The ring is defined by the CircleCenter, ShortRadius and LongRadius parameters.
The required sector of the ring is defined by the SectorCenterAzimuth and SectorAngle (width) parameters.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>847</Key>
    <Value>
      <English>Circle Center</English>
    </Value>
  </Entry>
  <Entry>
    <Key>848</Key>
    <Value>
      <English>Sector Center Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>849</Key>
    <Value>
      <English>Sector Angle</English>
    </Value>
  </Entry>
  <Entry>
    <Key>850</Key>
    <Value>
      <English>Short Radius</English>
    </Value>
  </Entry>
  <Entry>
    <Key>851</Key>
    <Value>
      <English>Long Radius</English>
    </Value>
  </Entry>
  <Entry>
    <Key>852</Key>
    <Value>
      <English>Polygon Inside Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>853</Key>
    <Value>
      <English>Returns "true" if the specified Polygon1 is completely inside the specified Polygon2 (parameters).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>854</Key>
    <Value>
      <English>Ellipse Inside Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>855</Key>
    <Value>
      <English>Returns "true" if the specified Ellipse is completely  inside the specified Polygon (parameters).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>856</Key>
    <Value>
      <English>Polygon Add Safely</English>
    </Value>
  </Entry>
  <Entry>
    <Key>857</Key>
    <Value>
      <English>Returns a Polygon that is the union of two Polygons, considering the posibility that either one of the Polygons may be an empty (Null) Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>858</Key>
    <Value>
      <English>Polygon Crossing Line</English>
    </Value>
  </Entry>
  <Entry>
    <Key>859</Key>
    <Value>
      <English>Returns a line of the specified Azimuth that passes through the specified InternalPoint (assumed to be inside the specified Polygon) and whose end points are on the perimeter of the specified Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>860</Key>
    <Value>
      <English>Internal Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>861</Key>
    <Value>
      <English>Polygon Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>862</Key>
    <Value>
      <English>Polygon Internal Center</English>
    </Value>
  </Entry>
  <Entry>
    <Key>863</Key>
    <Value>
      <English>Returns a heuristic centric point that is guaranteed to be inside the specified Polygon, as opposed to PolygonCenter - that returns the geometric center, which is not necessarily inside the Polygon.
The returned point is the middle of a crossing line (see PolygonCrossingLine) that is perpendicular to the longest crossing line (see PolygonLongestCrossingLine) and passes through its center.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>864</Key>
    <Value>
      <English>Random Point in Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>865</Key>
    <Value>
      <English>Returns a random Point inside the specified Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>866</Key>
    <Value>
      <English>Polygon Contained Connector STUB</English>
    </Value>
  </Entry>
  <Entry>
    <Key>867</Key>
    <Value>
      <English>Returns a Polyline that starts at the specified From point and ends at the specified To point, and is fully contained inside the specified [possibly concave] Container polygon. Both From and To must obviously be inside the specified Container (if not - a Null (Empty) Polygon is returned).
For this purpose points on the perimeter of the Container polygon are considered to be contained in it.
Note: a possible implementation is to take the straight line between From and To and replace each external segment (a segment that passes outside the Container polygon) with an equivalent perimeter segment (the shorter of the two). Although this does not necessarily yield the shortest possible connector Polyline, it is considered to be good enough.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>868</Key>
    <Value>
      <English>From</English>
    </Value>
  </Entry>
  <Entry>
    <Key>869</Key>
    <Value>
      <English>To</English>
    </Value>
  </Entry>
  <Entry>
    <Key>870</Key>
    <Value>
      <English>Polygon Contained Connector Approximated</English>
    </Value>
  </Entry>
  <Entry>
    <Key>871</Key>
    <Value>
      <English>Returns a connector Polyline that is contained inside the specified Polygon (see PolygonContainedConnector Atomic Function) from the specified From point to point T that is determined as follows: If the specified To point is contained inside the specified Container polygon - T is the specified To point, otherwise - T is the closet point on the specified Container's perimeter to the specified To point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>872</Key>
    <Value>
      <English>Polyline Overlaps Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>873</Key>
    <Value>
      <English>Returns "true" if the specified Polyline overlaps the specified Polygon (parameters), i.e. if the specified Polyline intersects or is fully contained by the specified Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>874</Key>
    <Value>
      <English>Point Inside Polygon Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>875</Key>
    <Value>
      <English>Returns 'true' if the specified Point is inside the specified Polygon (parameters). For this purpose, all Points located on the perimeter of the Polygon are considered inside the Polygon.
If a Null Point or Polygon is received - 'false' is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>876</Key>
    <Value>
      <English>Polygon Perimeter External Perpendicular Azimuth</English>
    </Value>
  </Entry>
  <Entry>
    <Key>877</Key>
    <Value>
      <English>Returns the external Azimuth of the perpendicular to the perimeter of the specified Polygon at the specified Point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>878</Key>
    <Value>
      <English>Closest Point Outside Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>879</Key>
    <Value>
      <English>Returns the closest point to the specified Point that is ouside of the specified Polygon.
If the specified Point is not inside the Polygon - it is returned as is, otherwise the returned point is located the specified Offset outwards - from the center of the Polygon towards the snap point (the point closest to the specifeid Point on the Polygon's perimeter).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>880</Key>
    <Value>
      <English>Closest Point Inside Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>881</Key>
    <Value>
      <English>Returns the closest point to the specified Point that is ouside of the specified Polygon.
If the specified Point is not inside the Polygon - it is returned as is, otherwise the returned point is located the specified Offset outwards - from the snap point (the point closest to the specifeid Point on the Polygon's perimeter) towards the center of the Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>882</Key>
    <Value>
      <English>Polygon Perimeter</English>
    </Value>
  </Entry>
  <Entry>
    <Key>883</Key>
    <Value>
      <English>Returns a perimeter polyline based on the specified Polygon which starts and ends at the specified StartPoint.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>884</Key>
    <Value>
      <English>Pseudo Random Point in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>885</Key>
    <Value>
      <English>Returns a seemingly random point whose distance from the specified Origin point is between MinimalRange and MaximalRange.
The distance and azimuth of the returned point relative to the Origin point are determined by the fraction portion (between 0.0 and 1.0) of the specified Seed - hence "pseudo" random.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>886</Key>
    <Value>
      <English>Minimal Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>887</Key>
    <Value>
      <English>Maximal Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>888</Key>
    <Value>
      <English>Seed</English>
    </Value>
  </Entry>
  <Entry>
    <Key>889</Key>
    <Value>
      <English>PseudoRandom Point in Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>890</Key>
    <Value>
      <English>Returns a seemingly random Point inside the specified Polygon, that is actually determined based on the fraction portion (between 0.0 and 1.0) of the specified Seed- hence "pseudo" random.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>891</Key>
    <Value>
      <English>Ellipse Longest Diameter</English>
    </Value>
  </Entry>
  <Entry>
    <Key>892</Key>
    <Value>
      <English>Returns a Line that is the longest diameter of the specified Ellipse (parameter). The order of the two Points that comprise the returned Line is arbitrary.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>893</Key>
    <Value>
      <English>Ellipse Heading Towards Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>894</Key>
    <Value>
      <English>Returns the Azimuth of the specified Ellipse' Shortest Diameter (its Heading) that is closest  to the Azimuth from the Ellipse' center towards the Point parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>895</Key>
    <Value>
      <English>Circle</English>
    </Value>
  </Entry>
  <Entry>
    <Key>896</Key>
    <Value>
      <English>Returns a Circle Ellipse based on the specified Radius and Center parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>897</Key>
    <Value>
      <English>Resized Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>898</Key>
    <Value>
      <English>Returns an Ellipse, based on the specified Ellipse parameter, whose width is the original Ellipse' width plus twice the Extension parameter and whose depth is the original Ellipse' depth plus twice the Extension parameter. Note that if the Extension parameter is negative -  the returned Ellipse is effectively shrinked.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>899</Key>
    <Value>
      <English>Extention</English>
    </Value>
  </Entry>
  <Entry>
    <Key>900</Key>
    <Value>
      <English>The required extension in meters.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>901</Key>
    <Value>
      <English>Ellipse Add</English>
    </Value>
  </Entry>
  <Entry>
    <Key>902</Key>
    <Value>
      <English>Returns an Ellipse which bounds both Ellipse1 and Ellipse 2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>903</Key>
    <Value>
      <English>Point Inside Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>904</Key>
    <Value>
      <English>Returns true if the Point parameter is inside the Ellipse parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>905</Key>
    <Value>
      <English>Ellipse Subtract</English>
    </Value>
  </Entry>
  <Entry>
    <Key>906</Key>
    <Value>
      <English>Returns an Ellipse that bounds the area resulting from subtracting Ellipse2 from Ellipse1.
If Ellipse2 entirely covers Ellipse1 - a NullEllipse is returned.
Note: for the purpose of this calculation - the Ellipses are approximated by 16 vertex polygons.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>907</Key>
    <Value>
      <English>Ellipses Intersection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>908</Key>
    <Value>
      <English>Returns the Ellipse that bounds the area common to both Ellipse1 and Ellipse2.
If Ellipse1 and Ellipse2 do not intersect - a NullEllipse is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>909</Key>
    <Value>
      <English>Distance From Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>910</Key>
    <Value>
      <English>Returns the distance (in meters) of the specified Point from the perimeter of the specified Ellipse.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>911</Key>
    <Value>
      <English>Point on Ellipse Perimeter</English>
    </Value>
  </Entry>
  <Entry>
    <Key>912</Key>
    <Value>
      <English>Return a point on the perimeter of the specified Ellipse, whose azimuth from the center of the Ellipse is the specified Azimuth.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>913</Key>
    <Value>
      <English>Is Null Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>914</Key>
    <Value>
      <English>Returns "true" if the specified Ellipse parameter equals NullEllipse.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>915</Key>
    <Value>
      <English>Pi</English>
    </Value>
  </Entry>
  <Entry>
    <Key>916</Key>
    <Value>
      <English>The ratio between a circle circumference and its diameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>917</Key>
    <Value>
      <English>Random Point In Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>918</Key>
    <Value>
      <English>Returns a random Point inside the specified Ellipse.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>919</Key>
    <Value>
      <English>Snap To Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>920</Key>
    <Value>
      <English>Returns the Point on the specified Ellipse parameter, which is closest (geometrically) to the specified Point parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>921</Key>
    <Value>
      <English>Ellipse Perimeter</English>
    </Value>
  </Entry>
  <Entry>
    <Key>922</Key>
    <Value>
      <English>Returns the specified Ellipse's parameter, starting at the specified Start Point (snapped to the Ellipse).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>923</Key>
    <Value>
      <English>Ellipse Perimeter is Clockwise</English>
    </Value>
  </Entry>
  <Entry>
    <Key>924</Key>
    <Value>
      <English>Returns 'true' if the speicfied Ellipse's perimeter polyline is clockwise.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>925</Key>
    <Value>
      <English>Ellipse Perimeter Directed</English>
    </Value>
  </Entry>
  <Entry>
    <Key>926</Key>
    <Value>
      <English>Returns the specified Ellipse's perimeter, starting at the specified Snapped Point (snapped to the Ellipse), and directed clockwise if Clockwise - 'true' or counterclockwise otherwise.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>927</Key>
    <Value>
      <English>Clockwise</English>
    </Value>
  </Entry>
  <Entry>
    <Key>928</Key>
    <Value>
      <English>Circle Bounding Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>929</Key>
    <Value>
      <English>Returns the smallest circle that bounds the specified Polygon parameter and is centered at its internal center.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>930</Key>
    <Value>
      <English>Ellipse Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>931</Key>
    <Value>
      <English>Ellipse Farthest Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>932</Key>
    <Value>
      <English>Returns the point on the perimeter of the specified Ellipse that is farthest from the specified Point.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>933</Key>
    <Value>
      <English>Diameter Constrained Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>934</Key>
    <Value>
      <English>Returns an Ellipse based on the specified Ellipse parameter, whose width and depth are shortened if necessary so that they do not exceed the specified DiameterConstraint.
If the specified Ellipse is Null - a Null Ellipse is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>935</Key>
    <Value>
      <English>Diameter Constraint</English>
    </Value>
  </Entry>
  <Entry>
    <Key>936</Key>
    <Value>
      <English>Polyline Polygon Intersection Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>937</Key>
    <Value>
      <English>Returns the first Point along the Polyline parameter that intersects with the Polygon parameter. If the Polyline does not intersect the Polygon, a Null Point is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>938</Key>
    <Value>
      <English>Polyline Splits Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>939</Key>
    <Value>
      <English>Returns "true" if the specified Polyline parameter splits/goes through (both enters and exits) the specified Polygon parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>940</Key>
    <Value>
      <English>Polyline Splits Ellipse</English>
    </Value>
  </Entry>
  <Entry>
    <Key>941</Key>
    <Value>
      <English>Returns "true" if the specified Polyline parameter splits/goes through (both enters and exits) the specified Ellipse parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>942</Key>
    <Value>
      <English>Polygons Intersection Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>943</Key>
    <Value>
      <English>Returns the Polygon that is the area common to both Polygon1 and Polygon2 , considering the possibility of them being Empty (Null) Polygon.
If both Polygons are empty - an EmptyPolygon is returned.
If only Polygon1 is empty - Polgyon2 is returned.
If only Polygon2 is empty - Polygon1 is returned.
</English>
    </Value>
  </Entry>
  <Entry>
    <Key>944</Key>
    <Value>
      <English>Polygons Intersection or Not Null</English>
    </Value>
  </Entry>
  <Entry>
    <Key>945</Key>
    <Value>
      <English>Returns PolygonsIntersectionSafe of Polygon1 and Polygon2, unless it turns out to be an Empty (Null) Polygon.
If this is the case Polygon1 is returned, unless it is empty, in which case Polygon2 is returned.
</English>
    </Value>
  </Entry>
  <Entry>
    <Key>946</Key>
    <Value>
      <English>Line Ellipse Intersection Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>947</Key>
    <Value>
      <English>Returns the first intersection Point between the specified Line and the specified Ellipse. The search advances along the Line parameter, starting from its 1st Point. If the Line and the Ellipse do not intersect, a null (empty) Point is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>948</Key>
    <Value>
      <English>Polylines Intersect</English>
    </Value>
  </Entry>
  <Entry>
    <Key>949</Key>
    <Value>
      <English>Returns "true" if the specified Polyline1 and Polyline2 intesect each other.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>950</Key>
    <Value>
      <English>Returns the first Point along the Line parameter that intersects with the Polygon parameter. If the Line does not intersect the Polygon, a Null Point is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>951</Key>
    <Value>
      <English>Polyline Intersects Polygon</English>
    </Value>
  </Entry>
  <Entry>
    <Key>952</Key>
    <Value>
      <English>Returns "true" if the specified Polyline and Polygon intersect each other.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>953</Key>
    <Value>
      <English>Line Ellipse Overlap Segment</English>
    </Value>
  </Entry>
  <Entry>
    <Key>954</Key>
    <Value>
      <English>Returns the segment of the specified Line that passes inside the specified Ellipse. A Null Line is returned if there is no such segment.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>955</Key>
    <Value>
      <English>Polyline Polygon First Overlap Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>956</Key>
    <Value>
      <English>Retruns the first point of the specified Polyline that is located within (or on the perimeter) of the specified Polygon.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>957</Key>
    <Value>
      <English>Polyline Polygon First Exit Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>958</Key>
    <Value>
      <English>Returns the first exit point of the Polyline from the Polygon. If the Polyline doesn't overlap and exit the Polygon a Null Polyline is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>959</Key>
    <Value>
      <English>Polyline Polygon Intersection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>960</Key>
    <Value>
      <English>Returns the first intersection between the Polyline and Polygon. If the Polyline doesn't overlap with the Polygon, a Null Polyline is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>961</Key>
    <Value>
      <English>Polyline Polygon Intersection Extended</English>
    </Value>
  </Entry>
  <Entry>
    <Key>962</Key>
    <Value>
      <English>Returns the first intersection between the Polyline and Polygon, extended to the perimeter of the Polygon. If the Polyline doesn't overlap with the Polygon, a Null Polyline is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>963</Key>
    <Value>
      <English>Polyline Polygon First Entry Point</English>
    </Value>
  </Entry>
  <Entry>
    <Key>964</Key>
    <Value>
      <English>Lines Intersect</English>
    </Value>
  </Entry>
  <Entry>
    <Key>965</Key>
    <Value>
      <English>Returns "true" if the specified Line1 and Line2 intesect each other.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>966</Key>
    <Value>
      <English>Is Null Unit</English>
    </Value>
  </Entry>
  <Entry>
    <Key>967</Key>
    <Value>
      <English>Returns "true" if the specified Unit parameter equals NullUnit.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>968</Key>
    <Value>
      <English>Append Unit to Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>969</Key>
    <Value>
      <English>Returns a Unit Collection that contains all elements of the UnitCollection parameter, followed by the specified Unit parameter (added at the end) - if not null.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>970</Key>
    <Value>
      <English>Unit Collection is Empty</English>
    </Value>
  </Entry>
  <Entry>
    <Key>971</Key>
    <Value>
      <English>Returns 'true' if the specified UnitCollection is empty, i.e contains no Units.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>972</Key>
    <Value>
      <English>Unit Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>973</Key>
    <Value>
      <English>Unit in Collection Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>974</Key>
    <Value>
      <English>Returns a Unit of the specified Collection parameter that correspond to the specified Index parameter (1-based).
If the specified Index is outside the bounds of the Collection - a NullUnit is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>975</Key>
    <Value>
      <English>Unit Collection Not Empty or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>976</Key>
    <Value>
      <English>Returns the specified Value - if not empty, otherwise - the specified Else parameter.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>977</Key>
    <Value>
      <English>Unit Collection Contains Units</English>
    </Value>
  </Entry>
  <Entry>
    <Key>978</Key>
    <Value>
      <English>Returns 'true' if the specified UnitCollection contains all units of the specified ContainedUnitCollection.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>979</Key>
    <Value>
      <English>Contained Unit Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>980</Key>
    <Value>
      <English>Unit Collection Contains</English>
    </Value>
  </Entry>
  <Entry>
    <Key>981</Key>
    <Value>
      <English>Returns 'true' if the specified UnitCollection contains the specified Unit.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>982</Key>
    <Value>
      <English>Random Unit in Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>983</Key>
    <Value>
      <English>Returns a random Unit from the specified Unit Collection. If the Unit Collection is empty, a Null Unit is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>984</Key>
    <Value>
      <English>Random Units in Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>985</Key>
    <Value>
      <English>Returns a random subset of the specified UnitCollection that contains just the specified NumberOfUnits, in random order.
If NumberOfUnits is greater than the size of UnitCollection, the returned subset contains all units of the specified UnitCollection.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>986</Key>
    <Value>
      <English>Number of Units</English>
    </Value>
  </Entry>
  <Entry>
    <Key>987</Key>
    <Value>
      <English>Unit Collections Intersection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>988</Key>
    <Value>
      <English>Returns all units apearing in both UnitCollection1 and UnitCollection2.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>989</Key>
    <Value>
      <English>Is Null Object</English>
    </Value>
  </Entry>
  <Entry>
    <Key>990</Key>
    <Value>
      <English>Returns "true" if the specified Object parameter equals NullObject.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>991</Key>
    <Value>
      <English>Append Object to Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>992</Key>
    <Value>
      <English>Returns an Object Collection that contains all elements of the ObjectCollection parameter, followed by the specified Object parameter (added at the end).</English>
    </Value>
  </Entry>
  <Entry>
    <Key>993</Key>
    <Value>
      <English>Object Collection is Empty</English>
    </Value>
  </Entry>
  <Entry>
    <Key>994</Key>
    <Value>
      <English>Returns 'true' if the specified ObjectCollection is empty, i.e contains no Objects.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>995</Key>
    <Value>
      <English>Object Collection Contains</English>
    </Value>
  </Entry>
  <Entry>
    <Key>996</Key>
    <Value>
      <English>Returns 'true' if the specified ObjectCollection contains the specified Object.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>997</Key>
    <Value>
      <English>Object in Collection Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>998</Key>
    <Value>
      <English>Returns an Object of the specified Collection parameter that correspond to the specified Index parameter (1-based).
If the specified Index is outside the bounds of the Collection - a NullObject is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>999</Key>
    <Value>
      <English>Object Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1000</Key>
    <Value>
      <English>Object Collection Not Empty or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1001</Key>
    <Value>
      <English>Random Object in Range</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1002</Key>
    <Value>
      <English>Returns a random Object from the specified Object Collection. If the Object Collection is empty, a Null Object is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1003</Key>
    <Value>
      <English>Remove Object From Collection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1004</Key>
    <Value>
      <English>Returns a collection of all Objects of the specified ObjectCollection without the specified Removed Object.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1005</Key>
    <Value>
      <English>Removed Object</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1006</Key>
    <Value>
      <English>Is First Iteration</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1007</Key>
    <Value>
      <English>Returns True if the command is in its first iteration.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1008</Key>
    <Value>
      <English>Execution State Equals</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1009</Key>
    <Value>
      <English>Returns 'true' if the two ExecutionState parameters are equal.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1010</Key>
    <Value>
      <English>Execution State 1</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1011</Key>
    <Value>
      <English>Execution State 2</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1012</Key>
    <Value>
      <English>Execution State is Terminal</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1013</Key>
    <Value>
      <English>Returns 'true' if the specified ExecutionState is terminal, i.e. indicates that execution cannot progress anymore.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1014</Key>
    <Value>
      <English>Execution State</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1015</Key>
    <Value>
      <English>Is Null Task</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1016</Key>
    <Value>
      <English>Returns "true" if the specified Task parameter equals NullTask.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1017</Key>
    <Value>
      <English>Is First Task Instance</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1018</Key>
    <Value>
      <English>Returns True if the current task instance is the first one.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1019</Key>
    <Value>
      <English>Is Null Allocation</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1020</Key>
    <Value>
      <English>Returns "true" if the specified Allocation parameter equals NullAllocation.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1021</Key>
    <Value>
      <English>Allocation Collection is Empty</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1022</Key>
    <Value>
      <English>Returns "true" if the specified AllocationCollection is empty, i.e. contains no Allocations.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1023</Key>
    <Value>
      <English>AllocationCollection</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1024</Key>
    <Value>
      <English>Is Null Native Type</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1025</Key>
    <Value>
      <English>Returns "true" if the specified NativeType parameter equals NullNativeType.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1026</Key>
    <Value>
      <English>NativeType</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1027</Key>
    <Value>
      <English>Native Type Not Null or Else</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1028</Key>
    <Value>
      <English>Real to String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1029</Key>
    <Value>
      <English>Returns the String representation of the specified Real number, suitable for display.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1030</Key>
    <Value>
      <English>Two Digit Integer to String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1031</Key>
    <Value>
      <English>Returns the Integer parameter as a String value. If the Integer has a single digit, the returned String includes a leading zero.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1032</Key>
    <Value>
      <English>Time HH MM</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1033</Key>
    <Value>
      <English>Returns the HH:MM portion (out of dd/mm/yyyy HH:MM:SS) of the specified Time.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1034</Key>
    <Value>
      <English>Time HH MM SS</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1035</Key>
    <Value>
      <English>Returns the HH:MM:SS portion (out of dd/mm/yyyy HH:MM:SS) of the specified Time.
If OmitZeroSS is specified as 'true' - SS portion is omitted if zero.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1036</Key>
    <Value>
      <English>Omit Zero SS</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1037</Key>
    <Value>
      <English>Timespan MM SS</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1038</Key>
    <Value>
      <English>Returns the MM:SS portion (out of DD:HH:MM:SS) of the specified Timespan.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1039</Key>
    <Value>
      <English>Timespan HH MM</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1040</Key>
    <Value>
      <English>Returns the HH:MM portion (out of DD:HH:MM:SS) of the specified Timespan.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1041</Key>
    <Value>
      <English>Timespan HH MM SS</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1042</Key>
    <Value>
      <English>Returns the HH:MM:SS portion (out of DD:HH:MM:SS) of the specified Timespan.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1043</Key>
    <Value>
      <English>Timespan Display String</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1044</Key>
    <Value>
      <English>Returns a string representation of the specified Timespan (hereinafter T) that is suited for display.
- If T is less than a minute - the returned string is in the form "SS seconds", otherwise
- If T is less than an hour - the returned string is in the form "MM:SS minutes", otherwise
- If T is less than a day - the returned string is in the form "HH:MM hours", otherwise
- the returned string is in the form "DD days HH:MM hours".</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1045</Key>
    <Value>
      <Hebrew>שניות</Hebrew>
    </Value>
  </Entry>
  <Entry>
    <Key>1046</Key>
    <Value>
      <Hebrew>דקות</Hebrew>
    </Value>
  </Entry>
  <Entry>
    <Key>1047</Key>
    <Value>
      <Hebrew>שעות</Hebrew>
    </Value>
  </Entry>
  <Entry>
    <Key>1048</Key>
    <Value>
      <Hebrew>ימים</Hebrew>
    </Value>
  </Entry>
  <Entry>
    <Key>1049</Key>
    <Value>
      <English>Boolean to Yes/No</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1050</Key>
    <Value>
      <English>Returns the specified Boolean values as a YN_YesNo Enumeration value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1051</Key>
    <Value>
      <English>Polyline From Line Safe</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1052</Key>
    <Value>
      <English>Returns a Polyline whose points are copied from the Line parameter. If a Null Line is received - a Null Polyline is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1053</Key>
    <Value>
      <English>Timespan to Minutes</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1054</Key>
    <Value>
      <English>Returns the number of whole minutes in the specified Timespan parameter. If the specified Timespan parameter is a NullTimespan - NullInteger is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1055</Key>
    <Value>
      <English>String to Integer</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1056</Key>
    <Value>
      <English>Returns the numeric value represented by the specified String.
Examples:
- StringToInteger("00234.900") = 234
- StringToInteger("8706") = 8706
If the specified String does not represent a valid numeric value - Null Integer is returned.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1057</Key>
    <Value>
      <English>Kilometers Per Hour to Meters Per Second</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1058</Key>
    <Value>
      <English>Returns the speed in Meters Per Second that is equivalent to the specified KilometersPerHour value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1059</Key>
    <Value>
      <English>Kilometers Per Hour</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1060</Key>
    <Value>
      <English>Meters Per Second to Kilometers Per Hour</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1061</Key>
    <Value>
      <English>Returns the speed in Kilometers Per Hour  that is equivalent to the specified MetersPerSecond value.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1062</Key>
    <Value>
      <English>Meters Per Second</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1063</Key>
    <Value>
      <English>Polygon From Polyline Accurate</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1064</Key>
    <Value>
      <English>Returns a "Stripe" Polygon that is based on the specified Polyline parameter, whose width (in meters) is specified by the Width parameter. The Polyline parameter thus defines the central "backbone" of the "Stripe" Polygon.
If the specified IncludeSemiCircles is 'true' - the returned Polygon includes two rather accurate semi-circles around the first and last points of the specified Polyline parameter, so that it effectively contains all points whose distance from the specified Polyline is not higher than half the specified Width.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1065</Key>
    <Value>
      <English>IncludeSemiCircles</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1066</Key>
    <Value>
      <English>Polygon From Polyline Approximate</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1067</Key>
    <Value>
      <English>Returns a "Stripe" Polygon that is based on the specified Polyline parameter, whose width (in meters) is specified by the Width parameter. The Polyline parameter thus defines the central "backbone" of the "Stripe" Polygon.
If the specified IncludeSemiCircles is 'true' - the returned Polygon includes two approximate semi-circles around the first and last points of the specified Polyline parameter, so that it effectively contains all points whose distance from the specified Polyline is not higher than half the specified Width.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1068</Key>
    <Value>
      <English>Decimal Minute to Timespan</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1069</Key>
    <Value>
      <English>Returns a Timespan value that is equivalent to the specified DecimalMinute - an integer representing a specific minute in a 24h day as a value between 0 - 2359.
For example:
- 1739 represents 17:39
- 125 represents 01:25.</English>
    </Value>
  </Entry>
  <Entry>
    <Key>1070</Key>
    <Value>
      <English>Decimal Minute</English>
    </Value>
  </Entry>
</Entries>
